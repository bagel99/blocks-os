/*
 * TI CC2538 System Control
 *
 * Reference: TI SWRU319C, Chapter 7.
 *
 * Copyright (c) 2014, Brian G. Lucas.  See LICENSE file.
 */

package sysctl
{

    // peripheral control register group
    const TMR   =  0;
    const SSI   =  1;
    const UART  = 2;
    const I2C0  = 3;
    const SEC   = 4;
    const RADIO = 5;
    // peripheral control register bit
    const PKA   = 0;
    const AES   = 1;


    type Select: [32]boolean: packed, lsb;
    type PeriphRegs:
    {   run: Select: out;	// run mode
	slp: Select: out;	// sleep mode
	pm0: Select: out;	// deep sleep mode
	rst: Select: out;	// reset
    };
    type ClockRegs:
    {   sysdiv:  0..7;		// .00-02
	_:       0..0b11111;	// .03-07
	iodiv:   0..7;		// .08-10
	_:       0..0b11111;	// .11-15
	osc:     boolean;	// .16    false=>XTAL, true=>RC
	oscpd:   boolean;	// .17
	hsstbl:  boolean;	// .18
	xoscstbl:boolean;	// .19
	srcchg:  boolean;	// .20
	ampdet:  boolean;	// .21
	_:       0..0b11;	// .22-23
	osc32k:  boolean;	// .24    false=>XTAL, true=>RC
	caldis:  boolean;	// .25
	sync32k: boolean;	// .26		status only
    }: packed, lsb, bits(32);
    
    type Regs:
    {   clkctl: ClockRegs: out;						// 00
    	clksts:	ClockRegs: in, ro;					// 04
    	pctl:   [5]PeriphRegs;
    	pm:  (NONE, PM1, PM2, PM3): bits(32), out;			// 58
    	srcrc:								// 5C
	    _uint32;
    	pwrdbg:								// 74
	    _uint32: at(0x74);
    	// FIXME - more to come
    	iwe:								// 94
    	{   portA: boolean;
	    portB: boolean;
	    portC: boolean;
	    portD: boolean;
	    usb:   boolean;
	    slptmr:boolean;
	}: packed, lsb, bits(32), out, at(0x94);
    	altmap:  boolean: out;						// 98
	radio:								// A8
    	{   run: Select: in, out;					// 48
    	    slp: Select: out;						// 4C
    	    pm0: Select: out;						// 50
    	}: at(0xA8);
    	// FIXME - more to come
    };
    var sc: Regs: external(0x400D_2000);

    type EnableMask: { run: boolean; slp: boolean; pm0: boolean; }: packed;

    proc DelayShort(n: _uint)
    {
	do
	    n -= 1;
	while n > 0;
    }
 
    proc Enable(group: _uint, unit: _uint, when: EnableMask)
    {
	if group <= 4 then	// contiguous groups
	{   if when.run then sc.pctl[group].run[unit] = true;
	    if when.slp then sc.pctl[group].slp[unit] = true;
	    if when.pm0 then sc.pctl[group].pm0[unit] = true;
	}
	else			// must be radio, only 1 unit
	{   if when.run then sc.radio.run[0] = true;
	    if when.slp then sc.radio.slp[0] = true;
	    if when.pm0 then sc.radio.pm0[0] = true;
	}
    }

    proc Disable(group: _uint, unit: _uint, when: EnableMask)
    {
	if group <= 4 then	// contiguous groups
	{   if when.run then sc.pctl[group].run[unit] = false;
	    if when.slp then sc.pctl[group].slp[unit] = false;
	    if when.pm0 then sc.pctl[group].pm0[unit] = false;
	}
	else			// must be radio, only 1 unit
	{   if when.run then sc.radio.run[0] = false;
	    if when.slp then sc.radio.slp[0] = false;
	    if when.pm0 then sc.radio.pm0[0] = false;
	}
    }

    proc WaitRadioEnabled(when: EnableMask)
    {
	if when.run then
	{   while !sc.radio.run[0] do {}	// wait for bit to set
	}
    }

    proc Reset(group: _uint, unit: _uint)
    {
	if group > 4 then	// must be radio, no reset
	    return;
	sc.pctl[group].rst[unit] = true;
	DelayShort(16);
	sc.pctl[group].rst[unit] = false;
    }

    proc GetIOClock(): _uint
    {
	return 32_000_000 / (sc.clksts.iodiv+1);
    }

    proc Init(xtal: boolean)
    {   var cr: ClockRegs;

	cr = sc.clkctl;
	if xtal then		// use external crystal
	{   // enable AMP detect to make sure XOSC starts correctly
	    cr.ampdet = true;
	    sc.clkctl = cr;	// enable AMP detect
	    cr.osc = false;	// use xtal osc
	    cr.sysdiv = 0;
	    cr.iodiv  = 0;
	}
	else			// use internal RC oscillator
	{   cr.osc = true;	// use RC osc
	    cr.oscpd = true;	// power down xtal
	    cr.sysdiv = 1;
	    cr.iodiv  = 1;
	}
	cr.osc32k=true;		// FIXME - make this configurable
	sc.clkctl = cr;
	// FIXME - possible infinite loop, but what to do on failure?
	while sc.clksts.osc != cr.osc do
	    DelayShort(16);
    }
}

