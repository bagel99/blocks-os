/*
 * Tests CC2538 AES unit in ECB mode using FIPS-197 test cases.
 */

import sys;
import uart;	// for debug
import debug;

import aes_ecb;

// TEST 128-bit key, FIPS-197 Appendix C.1
const key0: [16]_byte =
{	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
	0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
};
const plain0: [16]_byte =
{	0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,
	0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff
};
const cypher0: [16]_byte =
{	0x69,0xc4,0xe0,0xd8,0x6a,0x7b,0x04,0x30,
	0xd8,0xcd,0xb7,0x80,0x70,0xb4,0xc5,0x5a
};

// TEST 192-bit key, FIPS-197 Appendix C.2
const key1: [24]_byte =
{	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
	0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
	0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17
};
const plain1: [16]_byte =
{	0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,
	0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff
};
const cypher1: [16]_byte =
{	0xdd,0xa9,0x7c,0xa4,0x86,0x4c,0xdf,0xe0,
	0x6e,0xaf,0x70,0xa0,0xec,0x0d,0x71,0x91
};

// TEST 256-bit key, FIPS-197 Appendix C.2
const key2: [32]_byte =
{	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
	0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
	0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,
	0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
};
const plain2: [16]_byte =
{	0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,
	0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff
};
const cypher2: [16]_byte =
{	0x8e,0xa2,0xb7,0xca,0x51,0x67,0x45,0xbf,
	0xea,0xfc,0x49,0x90,0x4b,0x49,0x60,0x89
};

type Test:
{   keysize:aes.KeySize;
    key:    @[]_byte;
    plain:  @[16]_byte;
    cypher: @[16]_byte;
};

const tests: []Test = 
{   { KEY128, key0, plain0, cypher0 },
    { KEY192, key1, plain1, cypher1 },
    { KEY256, key2, plain2, cypher2 },
};

var result1: [16]_byte;
var result2: [16]_byte;
var plain: [16]_byte;	// AES DMA doesn't work from FLASH?

proc main(): _int
{   var i, kl, kn, ks: _uint;

    sys.Init(true);
    debug.Init();
debug.str("Test AES...\n");
    aes.Init();

    kn = 0;
    for i from 0 to tests?len-1 do
    {   ks = tests[i].keysize;
    	kl = ks/8;	// bits to bytes
	aes.LoadKey(ks, tests[i].key, kn);

	plain = tests[i].plain@;	// copy from flash to RAM

	aes.ecb.EncryptStart(plain, result1, 16, kn, ks);  
	while !aes.Check() do
	{}
	aes.ecb.Finish();

	aes.ecb.DecryptStart(result1, result2, 16, kn, ks);  
	while !aes.Check() do
	{}
	aes.ecb.Finish();
debug.str("Test "); debug.uint(i); debug.nl();	
debug.dumpb("Key", tests[i].key, kl);
debug.dumpb("Plain", plain, 16);
debug.dumpb("Encrypted", result1, 16);
debug.dumpb("Decrypted", result2, 16);
	kn += 2;			// keep even
	if kn >= 8 then kn = 0;		// and wrap
    }
    return 0;
}

