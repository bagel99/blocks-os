/*
 * Tests CC2538 AES unit CCM mode.
 */

import sys;
import uart;	// for debug
import debug;

import aes_ccm;

const key10: []_byte = { 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0,
			 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const key20: []_byte = { 0x26, 0x51, 0x1f, 0xb5, 0x1f, 0xcf, 0xa7, 0x5c,
			 0xb4, 0xb4, 0x4d, 0xa7, 0x5a, 0x6e, 0x5a, 0x0e,
			 0xb8, 0xd9, 0xc8, 0xf3, 0xb9, 0x06, 0xf8, 0x86 };
const key21: []_byte = { 0x08, 0x6e, 0x29, 0x67, 0xcd, 0xe9, 0x9e, 0x90,
			 0xfa, 0xae, 0xa8, 0xa9, 0x4e, 0x16, 0x8b, 0xf0,
			 0xe0, 0x66, 0xc5, 0x03, 0xa8, 0x49, 0xa9, 0xf3 };
const key22: []_byte = { 0xce, 0xb0, 0x09, 0xae, 0xa4, 0x45, 0x44, 0x51,
			 0xfe, 0xad, 0xf0, 0xe6, 0xb3, 0x6f, 0x45, 0x55,
			 0x5d, 0xd0, 0x47, 0x23, 0xba, 0xa4, 0x48, 0xe8 };
const key23: []_byte = { 0x11, 0xfd, 0x45, 0x74, 0x3d, 0x94, 0x6e, 0x6d,
			 0x37, 0x34, 0x1f, 0xec, 0x49, 0x94, 0x7e, 0x8c,
			 0x70, 0x48, 0x24, 0x94, 0xa8, 0xf0, 0x7f, 0xcc };
const key30: []_byte = { 0x26, 0x51, 0x1f, 0xb5, 0x1f, 0xcf, 0xa7, 0x5c,
			 0xb4, 0xb4, 0x4d, 0xa7, 0x5a, 0x6e, 0x5a, 0x0e,
			 0xb8, 0xd9, 0xc8, 0xf3, 0xb9, 0x06, 0xf8, 0x86,
			 0xdf, 0x3b, 0xa3, 0xe6, 0xda, 0x3a, 0x13, 0x89 };
const key31: []_byte = { 0xc6, 0xc1, 0x4c, 0x65, 0x5e, 0x52, 0xc8, 0xa4,
			 0xc7, 0xe8, 0xd5, 0x4e, 0x97, 0x4d, 0x69, 0x8e,
			 0x1f, 0x21, 0xee, 0x3b, 0xa7, 0x17, 0xa0, 0xad,
			 0xfa, 0x61, 0x36, 0xd0, 0x26, 0x68, 0xc4, 0x76 };
const key32: []_byte = { 0x55, 0x35, 0x21, 0xa7, 0x65, 0xab, 0x0c, 0x3f,
			 0xd2, 0x03, 0x65, 0x4e, 0x99, 0x16, 0x33, 0x0e,
			 0x18, 0x9b, 0xdf, 0x95, 0x1f, 0xee, 0xe9, 0xb4,
			 0x4b, 0x10, 0xda, 0x20, 0x8f, 0xee, 0x7a, 0xcf };
const key33: []_byte = { 0x90, 0x74, 0xb1, 0xae, 0x4c, 0xa3, 0x34, 0x2f,
			 0xe5, 0xbf, 0x6f, 0x14, 0xbc, 0xf2, 0xf2, 0x79,
			 0x04, 0xf0, 0xb1, 0x51, 0x79, 0xd9, 0x5a, 0x65,
			 0x4f, 0x61, 0xe6, 0x99, 0x69, 0x2e, 0x6f, 0x71 };

const nonce10: []_byte = { 0x00, 0x00, 0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0,
			   0x00, 0x00, 0x00, 0x00, 0x05 };
const nonce20: []_byte = { 0x15, 0xb3, 0x69, 0x88, 0x96, 0x99, 0xb6, 0xde,
			   0x1f, 0xa3, 0xee, 0x73, 0xe5 };
const nonce21: []_byte = { 0x92, 0x95, 0x42, 0xcd, 0x69, 0x0f, 0x1b, 0xab,
			   0xcf, 0x16, 0x96, 0xcb, 0x03 };
const nonce22: []_byte = { 0x76, 0x40, 0x43, 0xc4, 0x94, 0x60, 0xb7 };
const nonce23: []_byte = { 0xc6, 0xae, 0xeb, 0xcb, 0x14, 0x6c, 0xfa, 0xfa,
			   0xae, 0x66, 0xf7, 0x8a, 0xab };
const nonce30: []_byte = { 0x72, 0xa6, 0x0f, 0x34, 0x5a, 0x19, 0x78, 0xfb,
			   0x40, 0xf2, 0x8a, 0x2f, 0xa4 };
const nonce31: []_byte = { 0x29, 0x1e, 0x91, 0xb1, 0x9d, 0xe5, 0x18, 0xcd,
			   0x78, 0x06, 0xde, 0x44, 0xf6 };
const nonce32: []_byte = { 0xaa, 0xa2, 0x3f, 0x10, 0x16, 0x47, 0xd8 };
const nonce33: []_byte = { 0x2e, 0x1e, 0x01, 0x32, 0x46, 0x85, 0x00, 0xd4,
			   0xbd, 0x47, 0x86, 0x25, 0x63 };

const pdata0: []_byte = { 0x14, 0xaa, 0xbb, 0x00, 0x00, 0x01, 0x02, 0x03,
			  0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
			  0x0c, 0x0d, 0x0e, 0x0f };
const cdata0: []_byte = { 0x92, 0xe8, 0xad, 0xca, 0x53, 0x81, 0xbf, 0xd0,
			  0x5b, 0xdd, 0xf3, 0x61, 0x09, 0x09, 0x82, 0xe6,
			  0x2c, 0x61, 0x01, 0x4e };

const adata2: []_byte = { 0x69, 0x98, 0x03, 0x33, 0x63, 0xbb, 0xaa, 0x01,
			  0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x03 };

const tag2: []_byte = { 0x7b, 0x34, 0x4f, 0x09 };

const pdata3: []_byte = { 0x39, 0xf0, 0x8a, 0x2a, 0xf1, 0xd8, 0xda, 0x62,
			  0x12, 0x55, 0x06, 0x39, 0xb9, 0x1f, 0xb2, 0x57,
			  0x3e, 0x39, 0xa8, 0xeb, 0x5d, 0x80, 0x1d, 0xe8 };
const cdata3: []_byte = { 0x63, 0x42, 0xb8, 0x70, 0x0e, 0xde, 0xc9, 0x7a,
			  0x96, 0x0e, 0xb1, 0x6e, 0x7c, 0xb1, 0xeb, 0x44,
			  0x12, 0xfb, 0x4e, 0x26, 0x3d, 0xdd, 0x22, 0x06 };
const tag3: []_byte = { 0xb0, 0x90, 0x15, 0x5d, 0x34, 0xa7, 0x6c, 0x83,
			0x24, 0xe5, 0x55, 0x0c, 0x3e, 0xf4, 0x26, 0xed };

const adata4: []_byte = { 0x58, 0xf7, 0x0b, 0xab, 0x24, 0xe0, 0xa6, 0x13,
			  0x7e, 0x5c, 0xd3, 0xeb, 0x18, 0x65, 0x6f, 0x2b,
			  0x5c, 0xcd, 0xdc, 0x3f, 0x53, 0x8a, 0x00, 0x00,
			  0xc6, 0x51, 0x90, 0xe4, 0xa3, 0x66, 0x8e, 0x71 };
const tag4: []_byte = { 0x3b, 0xf9, 0xd9, 0x3a, 0xf6, 0xff, 0xac, 0x9a,
			0xc8, 0x4c, 0xd3, 0x20, 0x2d, 0x4e, 0x0c, 0xc8 };

const adata5: []_byte = { 0x6e, 0x80, 0xdd, 0x7f, 0x1b, 0xad, 0xf3, 0xa1,
			  0xc9, 0xab, 0x25, 0xc7, 0x5f, 0x10, 0xbd, 0xe7,
			  0x8c, 0x23, 0xfa, 0x0e, 0xb8, 0xf9, 0xaa, 0xa5,
			  0x3a, 0xde, 0xfb, 0xf4, 0xcb, 0xf7, 0x8f, 0xe4 };
const pdata5: []_byte = { 0xc8, 0xd2, 0x75, 0xf9, 0x19, 0xe1, 0x7d, 0x7f,
			  0xe6, 0x9c, 0x2a, 0x1f, 0x58, 0x93, 0x9d, 0xfe,
			  0x4d, 0x40, 0x37, 0x91, 0xb5, 0xdf, 0x13, 0x10 };
const cdata5: []_byte = { 0x8a, 0x0f, 0x3d, 0x82, 0x29, 0xe4, 0x8e, 0x74,
			  0x87, 0xfd, 0x95, 0xa2, 0x8a, 0xd3, 0x92, 0xc8,
			  0x0b, 0x36, 0x81, 0xd4, 0xfb, 0xc7, 0xbb, 0xfd };
const tag5: []_byte = { 0x2d, 0xd6, 0xef, 0x1c, 0x45, 0xd4, 0xcc, 0xb7,
			0x23, 0xdc, 0x07, 0x44, 0x14, 0xdb, 0x50, 0x6d };

const adata6: []_byte = { 0x7d, 0xc8, 0xc5, 0x21, 0x44, 0xa7, 0xcb, 0x65,
			  0xb3, 0xe5, 0xa8, 0x46, 0xe8, 0xfd, 0x7e, 0xae,
			  0x37, 0xbf, 0x69, 0x96, 0xc2, 0x99, 0xb5, 0x6e,
			  0x49, 0x14, 0x4e, 0xbf, 0x43, 0xa1, 0x77, 0x0f };
const pdata6: []_byte = { 0xee, 0x7e, 0x60, 0x75, 0xba, 0x52, 0x84, 0x6d,
			  0xe5, 0xd6, 0x25, 0x49, 0x59, 0xa1, 0x8a, 0xff,
			  0xc4, 0xfa, 0xf5, 0x9c, 0x8e, 0xf6, 0x34, 0x89 };
const cdata6: []_byte = { 0x13, 0x7d, 0x9d, 0xa5, 0x9b, 0xaf, 0x5c, 0xbf,
			  0xd4, 0x66, 0x20, 0xc5, 0xf2, 0x98, 0xfc, 0x76,
			  0x6d, 0xe1, 0x0a, 0xc6, 0x8e, 0x77, 0x4e, 0xdf };
const tag6: []_byte = { 0x1f, 0x2c, 0x5b, 0xad };

const pdata7: []_byte = { 0x30, 0xd5, 0x6f, 0xf2, 0xa2, 0x5b, 0x83, 0xfe,
			  0xe7, 0x91, 0x11, 0x0f, 0xca, 0xea, 0x48, 0xe4,
			  0x1d, 0xb7, 0xc7, 0xf0, 0x98, 0xa8, 0x10, 0x00 };
const cdata7: []_byte = { 0x55, 0xf0, 0x68, 0xc0, 0xbb, 0xba, 0x8b, 0x59,
			  0x80, 0x13, 0xdd, 0x18, 0x41, 0xfd, 0x74, 0x0f,
			  0xda, 0x29, 0x02, 0x32, 0x21, 0x48, 0xab, 0x5e };
const tag7: []_byte = { 0x93, 0x57, 0x53, 0xe6, 0x01, 0xb7, 0x9d, 0xb4,
			0xae, 0x73, 0x0b, 0x6a, 0xe3, 0x50, 0x07, 0x31 };

const adata8: []_byte = { 0xb4, 0xf8, 0x32, 0x69, 0x44, 0xa4, 0x5d, 0x95,
			  0xf9, 0x18, 0x87, 0xc2, 0xa6, 0xac, 0x36, 0xb6,
			  0x0e, 0xea, 0x5e, 0xde, 0xf8, 0x4c, 0x1c, 0x35,
			  0x81, 0x46, 0xa6, 0x66, 0xb6, 0x87, 0x83, 0x35 };
const tag8: []_byte = { 0xca, 0x48, 0x2c, 0x67, 0x4b, 0x59, 0x90, 0x46,
			0xcc, 0x7d, 0x7e, 0xe0, 0xd0, 0x0e, 0xec, 0x1e };

const adata9: []_byte = { 0xa3, 0x55, 0xd4, 0xc6, 0x11, 0x81, 0x2e, 0x5f,
			  0x92, 0x58, 0xd7, 0x18, 0x8b, 0x3d, 0xf8, 0x85,
			  0x14, 0x77, 0x09, 0x4f, 0xfc, 0x2a, 0xf2, 0xcf,
			  0x0c, 0x86, 0x70, 0xdb, 0x90, 0x3f, 0xbb, 0xe0 };
const pdata9: []_byte = { 0x64, 0x4e, 0xb3, 0x4b, 0x9a, 0x12, 0x6e, 0x43,
			  0x7b, 0x5e, 0x01, 0x5e, 0xea, 0x14, 0x1c, 0xa1,
			  0xa8, 0x80, 0x20, 0xf2, 0xd5, 0xd6, 0xcc, 0x2c };
const cdata9: []_byte = { 0x27, 0xed, 0x90, 0x66, 0x81, 0x74, 0xeb, 0xf8,
			  0x24, 0x1a, 0x3c, 0x74, 0xb3, 0x5e, 0x12, 0x46,
			  0xb6, 0x61, 0x7e, 0x41, 0x23, 0x57, 0x8f, 0x15 };
const tag9: []_byte = { 0x3b, 0xdb, 0x67, 0x06, 0x2a, 0x13, 0xef, 0x4e,
			0x98, 0x6f, 0x5b, 0xb3, 0xd0, 0xbb, 0x43, 0x07 };

const adataA: []_byte = { 0x3c, 0x5f, 0x54, 0x04, 0x37, 0x0a, 0xbd, 0xcb,
			  0x1e, 0xdd, 0xe9, 0x9d, 0xe6, 0x0d, 0x06, 0x82,
			  0xc6, 0x00, 0xb0, 0x34, 0xe0, 0x63, 0xb7, 0xd3,
			  0x23, 0x77, 0x23, 0xda, 0x70, 0xab, 0x75, 0x52 };
const pdataA: []_byte = { 0x23, 0x90, 0x29, 0xf1, 0x50, 0xbc, 0xcb, 0xd6,
			  0x7e, 0xdb, 0xb6, 0x7f, 0x8a, 0xe4, 0x56, 0xb4,
			  0xea, 0x06, 0x6a, 0x4b, 0xee, 0xe0, 0x65, 0xf9 };
const cdataA: []_byte = { 0x9c, 0x8d, 0x5d, 0xd2, 0x27, 0xfd, 0x9f, 0x81,
			  0x23, 0x76, 0x01, 0x83, 0x0a, 0xfe, 0xe4, 0xf0,
			  0x11, 0x56, 0x36, 0xc8, 0xe5, 0xd5, 0xfd, 0x74 };
const tagA: []_byte = { 0x3c, 0xb9, 0xaf, 0xed };

/*
 * IEEE 802.15-4 Test Vectors
 */
// test vector C.2.1 (authentication only)
const keyV: []_byte =    { 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
			   0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF };
const nonceV1: []_byte = { 0xAC, 0xDE, 0x48, 0x00, 0x00, 0x00, 0x00, 0x01,
			   0x00, 0x00, 0x00, 0x05, 0x02 };
const adataV1: []_byte = { 0x08, 0xD0, 0x84, 0x21, 0x43, 0x01, 0x00, 0x00,
			   0x00, 0x00, 0x48, 0xDE, 0xAC, 0x02, 0x05, 0x00,
			   0x00, 0x00, 0x55, 0xCF, 0x00, 0x00, 0x51, 0x52,
			   0x53, 0x54 };
const tagV1: []_byte =   { 0x22, 0x3b, 0xc1, 0xec, 0x84, 0x1a, 0xb5, 0x53 };
// test vector C.2.2 (encryption only)
// key same as above
const nonceV2: []_byte = { 0xAC, 0xDE, 0x48, 0x00, 0x00, 0x00, 0x00, 0x01,
			   0x00, 0x00, 0x00, 0x05, 0x04 };
const adataV2: []_byte = { 0x69, 0xDC, 0x84, 0x21, 0x43, 0x02, 0x00, 0x00,
			   0x00, 0x00, 0x48, 0xDE, 0xAC, 0x01, 0x00, 0x00,
			   0x00, 0x00, 0x48, 0xDE, 0xAC, 0x04, 0x05, 0x00,
			   0x00, 0x00 };
const pdataV2: []_byte = { 0x61, 0x62, 0x63, 0x64 };
const cdataV2: []_byte = { 0xD4, 0x3E, 0x02, 0x2B };
// test vector C.2.3 (encryption and authentication)
// key same as above
const nonceV3: []_byte = { 0xAC, 0xDE, 0x48, 0x00, 0x00, 0x00, 0x00, 0x01,
			   0x00, 0x00, 0x00, 0x05, 0x06 };
const adataV3: []_byte = { 0x2B, 0xDC, 0x84, 0x21, 0x43, 0x02, 0x00, 0x00,
			   0x00, 0x00, 0x48, 0xDE, 0xAC, 0xFF, 0xFF, 0x01,
			   0x00, 0x00, 0x00, 0x00, 0x48, 0xDE, 0xAC, 0x06,
			   0x05, 0x00, 0x00, 0x00, 0x01 };
const pdataV3: []_byte = { 0xCE };
const cdataV3: []_byte = { 0xD8 };
const tagV3: []_byte =   { 0x4F, 0xDE, 0x52, 0x90, 0x61, 0xF9, 0xC6, 0xF1 };


type Test:
{       keyno: _uint8;
	keysz: aes.KeySize;
	L:     2..8;		// length of length field in IV
	M:     _uint8;		// length of message authentication
	key:   _address;
	nonce: _address;	// main part of the IV
	alen:  _uint;		// size of associated data
	adata: _address;	// associated data
	plen:  _uint;		// size of message text
	pdata: _address;	// plain text
	cdata: _address;	// cypher text
	tag:   _address;	// message authentication tag (MAC)
};

const IEEEVectors: boolean = true;

if IEEEVectors then {
const tests:[]Test =
{//  kn    ks    L  M  key    nonce  alen  adata plen  pdata
    { 1, KEY128, 2, 8, keyV,  nonceV1, 26, adataV1, 0, 0,      0,      tagV1},
    { 1, KEY128, 2, 0, keyV,  nonceV2, 26, adataV2, 4, pdataV2,cdataV2,0    },
    { 1, KEY128, 2, 8, keyV,  nonceV3, 29, adataV3, 1, pdataV3,cdataV3,tagV3}
};
} else {
const tests:[]Test =
{//  kn    ks    L  M  key     nonce alen  adata plen  pdata
// 128-bit
    { 0, KEY128, 2, 0, key10, nonce10,  0, 0,      20, pdata0, cdata0, 0 },    // 0
    { 0, KEY128, 2, 4, key10, nonce10, 15, adata2, 20, pdata0, cdata0, tag2 }, // 2
// 192-bit
    { 0, KEY192, 2,16, key20, nonce20,  0, 0,      24, pdata3, cdata3, tag3 }, // 3
    { 2, KEY192, 2,16, key21, nonce21, 32, adata4,  0, 0,      0,      tag4 }, // 4
    { 4, KEY192, 8,16, key22, nonce22, 32, adata5, 24, pdata5, cdata5, tag5 }, // 5
//    { 0, KEY192, 2, 4, key23, nonce23, 32, adata6, 24, pdata6, cdata6, tag6 }, // 6
// 256-bit
    { 0, KEY256, 2,16, key30, nonce30,  0, 0,      24, pdata7, cdata7, tag7 }, // 7
    { 2, KEY256, 2,16, key31, nonce31, 32, adata8,  0, 0,      0,      tag8 }, // 8
    { 4, KEY256, 8,16, key32, nonce32, 32, adata9, 24, pdata9, cdata9, tag9 }, // 9
//    { 0, KEY256, 2, 4, key33, nonce33, 32, adataA, 24, pdataA, cdataA, tagA }  //10

};
}


var adata: [128]_byte;
var pdata: [128]_byte;
var cdata: [128]_byte;
var tag:   [16]_byte;

const db: boolean = false;

proc main(): _int
{   var i, n, errcnt: _uint;
    var alen, plen, L, M: _uint;

    errcnt = 0;
    sys.Init(true);
    debug.Init();
debug.str("Test AES-CCM..\n");
    aes.Init();

    for i from 0 to tests?len-1 do
    {
debug.str("Test "); debug.uint(i);  debug.nl();
	aes.LoadKey(tests[i].keysz, tests[i].key, tests[i].keyno);
	alen = tests[i].alen;
	plen = tests[i].plen;
	M = tests[i].M;
	L = tests[i].L;
	if alen != 0 then
	    adata[0:alen] = tests[i].adata[0:alen];	// copy to RAM
	if plen != 0 then
	    pdata[0:plen] = tests[i].pdata[0:plen];	// copy to RAM
if db then
{ debug.str("test data\n");
  debug.dumpb("nonce", tests[i].nonce, 15-L);
  if alen != 0 then debug.dumpb("adata", adata, alen);
  if plen != 0 then
  {   debug.dumpb("pdata", pdata, plen);
      debug.dumpb("cdata", tests[i].cdata, plen);
  }
  if M != 0 then debug.dumpb("tag", tests[i].tag, M);
}
	// encrypt in place pdata->pdata
	aes.ccm.AuthEncryptStart(tests[i].keyno,	// keyno
    				L,	// L
    				M,	// M
    				tests[i].nonce,
    				adata, alen,
    				pdata, plen);
	while !aes.Check() do
	{}
	aes.ccm.AuthEncryptFinish(tag, M);
	if M != 0 && tag[0:M] != tests[i].tag[0:M] then
	    debug.dumpb("Bad enc tag", tag, M);
	if plen != 0 && pdata[0:plen] != tests[i].cdata[0:plen] then
	    debug.dumpb("Bad encryption", pdata, plen);

	if plen != 0 then
	    cdata[0:plen] = tests[i].cdata[0:plen];	// copy to RAM
	// decrypt in place cdata->cdata
	aes.ccm.AuthDecryptStart(tests[i].keyno,	// keyno
    				L,	// L
    				M,	// M
    				tests[i].nonce,
    				adata, alen,
				cdata, plen);
	while !aes.Check() do
	{}
	aes.ccm.AuthDecryptFinish(tag, M);
if db then
{ if plen != 0 then debug.dumpb("pdata", cdata, plen);
  if M != 0 then debug.dumpb("tag", tag, M);
}
	if M != 0 && tag[0:M] != tests[i].tag[0:M] then
	    debug.dumpb("Bad dec tag", tag, M);
	if plen != 0 && cdata[0:plen] != tests[i].pdata[0:plen] then
	    debug.dumpb("Bad decryption", cdata, plen);
    }
		
    return errcnt;
}

