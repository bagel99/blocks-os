/*
 * Tests CC2538 AES unit SHA256 mode.
 */

import sys;
import uart;	// for debug
import debug;

import aes_sha;

var hash: aes.sha.State;

// NIST test vector 1
const data1: []_byte =
	"abc";
const hash1: [32]_byte =
{	0xba, 0x78, 0x16, 0xbf, 0x8f, 0x01, 0xcf, 0xea,
	0x41, 0x41, 0x40, 0xde, 0x5d, 0xae, 0x22, 0x23,
	0xb0, 0x03, 0x61, 0xa3, 0x96, 0x17, 0x7a, 0x9c,
	0xb4, 0x10, 0xff, 0x61, 0xf2, 0x00, 0x15, 0xad
};
// NIST test vector 2
const data2: []_byte = 
	"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
const hash2: [32]_byte =
{	0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8,
	0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39,
	0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67,
	0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1
};
// exactly 1 block
const data3: []_byte =
	"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijkl";
const hash3: [32]_byte =
{	0x2f, 0xcd, 0x5a, 0x0d, 0x60, 0xe4, 0xc9, 0x41,
	0x38, 0x1f, 0xcc, 0x4e, 0x00, 0xa4, 0xbf, 0x8b,
	0xe4, 0x22, 0xc3, 0xdd, 0xfa, 0xfb, 0x93, 0xc8,
	0x09, 0xe8, 0xd1, 0xe2, 0xbf, 0xff, 0xae, 0x8e
};
// 1 block plus 2 bytes
const data4: []_byte =
	"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmn";
const hash4: [32]_byte =
{	0x92, 0x90, 0x1c, 0x85, 0x82, 0xe3, 0x1c, 0x05,
	0x69, 0xb5, 0x36, 0x26, 0x9c, 0xe2, 0x2c, 0xc8,
	0x30, 0x8b, 0xa4, 0x17, 0xab, 0x36, 0xc1, 0xbb,
	0xaf, 0x08, 0x4f, 0xf5, 0x8b, 0x18, 0xdc, 0x6a
};
// exactly 2 blocks
const data5: []_byte =
	"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklabcd"
	"efghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijkl";
const hash5: [32]_byte =
{	0xf8, 0xa3, 0xf2, 0x26, 0xfc, 0x42, 0x10, 0xe9,
	0x0d, 0x13, 0x0c, 0x7f, 0x41, 0xf2, 0xbe, 0x66,
	0x45, 0x53, 0x85, 0xd2, 0x92, 0x0a, 0xda, 0x78,
	0x15, 0xf8, 0xf7, 0x95, 0xd9, 0x44, 0x90, 0x5f
};
// 2 blocks plus 2 bytes
const data6: []_byte =
	"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklabcd"
	"efghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmn";

const hash6: [32]_byte =
{	0x15, 0xd2, 0x3e, 0xea, 0x57, 0xb3, 0xd4, 0x61,
	0xbf, 0x38, 0x91, 0x12, 0xab, 0x4c, 0x43, 0xce,
	0x85, 0xe1, 0x68, 0x23, 0x8a, 0xaa, 0x54, 0x8e,
	0xc8, 0x6f, 0x0c, 0x9d, 0x65, 0xf9, 0xb9, 0x23
};



type Test:
{   len:  _uint;
    data: @[]_byte;
    hash: @[32]_byte;
};

const tests: []Test = 
{   { data1?len-1, data1, hash1 },
    { data2?len-1, data2, hash2 },
    { data3?len-1, data3, hash3 },
    { data4?len-1, data4, hash4 },
    { data5?len-1, data5, hash5 },
    { data6?len-1, data6, hash6 },
};


var buf: [4096]_byte;
var hashbuf: [8]_uint32: align(4);

type Hashbytes: @[32]_byte;

proc main(): _int
{   var i, n, errcnt: _uint;
    var hashbytes: @[32]_byte;

    errcnt = 0;
    sys.Init(true);
    debug.Init();
debug.str("Test SHA256...\n");
    aes.Init();

    for i from 0 to tests?len-1 do
    {
	aes.sha.Init(hash);
	n = tests[i].len;
	buf[0:n] = tests[i].data[0:n];	// move from flash to RAM
	hash.findigest = true;
	hash.length = n * 8;	// in bits
	aes.sha.HashNew(hash, buf, n, hashbuf);
	hashbytes = hashbuf;	// force pointer to bytes rather than words
	if tests[i].hash@ != hashbytes@ then	// byte array compare
	{
debug.str("Test "); debug.uint(i+1); debug.str(" len="); debug.uint(n); debug.nl();
debug.dumpb("Data", buf, n);
debug.dumpb("Hash", hashbuf, 32);
	}
    }
    if errcnt == 0 then debug.str("Success!\n");  
    return errcnt;
}

