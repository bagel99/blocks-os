/*
 * TI CC2538 RF Core
 *
 * Reference: TI SWRU319C, Chapter 23.
 *
 * Copyright (c) 2014-2016, Brian G. Lucas.  See LICENSE file.
 */

import dma;

package radio
{
    const autofcs: boolean = true;	// hardware checks incoming FCS

    const TxDMAChan = 2;	// FIXME - make configurable in sys
    const RxDMAChan = 3;	// FIXME - make configurable in sys

    const ChanMin = 11;
    const ChanMax = 26;
    const ChanDelta = 5;
    const RSSIOffset = 73;

    type CSP:	// command strobe processor opcodes
    (   RXON=0xE3,	TXON=0xE9,	TXONCCA=0xEA,
	FLUSHRX=0xED,	FLUSHTX=0xEE,	RFOFF=0xEF
    );

    type AddrReg: _uint8: bits(32);	// only low 8 bit used

    type Intr0:		// bits in irqenb0, irqf0
    {	actunused: boolean;	// .00 - reserved
	sfd:       boolean;	// .01 - SFD recv or xmit
	fifop:     boolean;	// .02 - FIFO full or done
	matchdone: boolean;	// .03 - source match done
	matchfound:boolean;	// .04 - source match found
	framegood: boolean;	// .05 - frame passed filtering
	rxpktdone: boolean;	// .06 - complete frame recvd
	rxmaskzero:boolean;	// .07 - RXENABLE is now all zero
    }: packed, lsb, bits(32);
    type Intr1:		// bits in irqenb1, irqf1
    {   txackdone: boolean;	// .00 - ACK has been xmitted
	txdone:    boolean;	// .01 - frame has been xmitted
	rfidle:    boolean;	// .02 - state machine in idle state
	cspmanint: boolean;	// .03 - manual interrupt from CSP
	cspstop:   boolean;	// .04 - CSP has stopped
	cspwait:   boolean;	// .05 - CSP continued after wait
    }: packed, lsb, bits(32);
    type IntrE:		// bits in irqenbe, errf
    {   nlock:     boolean;	// .00 - freq synth failed to lock
	rxabo:     boolean;	// .01 - frame recv aborted
	rxovrfl:   boolean;	// .02 - Rx FIFO overflow
	rxundfl:   boolean;	// .03 - Rx FIFO underflow
	txovrfl:   boolean;	// .04 - Tx FIFO overflow
	txundfl:   boolean;	// .05 - Tx FIFO underflow
	strobe:    boolean;	// .06 - command strobe ignored
    }: packed, lsb, bits(32);

    type RFRegs:
    {   rxfifo:   [128]_uint8;						// 000
	txfifo:   [128]_uint8;						// 200
	// Source address filtering, 3 sets, gap between 1 and 3
	filter0:  [8]AddrReg: out;					// 400
	filter1:  [8]AddrReg: out;					// 420
	filter3:  [8]AddrReg: out, at(0x560);				// 560
	// FFSM - these are in RAM and reset values are undefined
	srcres0:  _uint8: bits(32), in, at(0x580);			// 580
	srcres1:  _uint8: bits(32), in;					// 584
	srcres2:  _uint8: bits(32), in;					// 588
	srcresidx:_uint8: bits(32), in;					// 58C
	srcxpend0:_uint8: bits(32), out;				// 590
	srcxpend1:_uint8: bits(32), out;				// 594
	srcxpend2:_uint8: bits(32), out;				// 598
	srcspend0:_uint8: bits(32), out;				// 59C
	srcspend1:_uint8: bits(32), out;				// 5A0
	srcspend2:_uint8: bits(32), out;				// 5A4
	xadr:     [8]AddrReg: out;	// 64-bit long address		// 5A8
	pan:      [2]AddrReg: out;	// 16-bit PAN			// 5C8
	sadr:     [2]AddrReg: out;	// 16-bit short address		// 5D0

	// XREG
	frmflt0:							// 600
	{   enb:      boolean;	// .00 - enable frame filter (reset=1)
	    pancoord: boolean;	// .01 - device is pan coordinator
	    maxfrmver:0..3;	// .02-3 - maximum frame version accepted
	}: packed, lsb, bits(32), out, at(0x600);
	frmflt1:							// 604
	{   _:        0..1;	// .00 - reserved
	    modmsb:   0..3;	// .01-2 - modify MSB of frame type
	    enbeac:   boolean;	// .03 - enable beacon
	    endata:   boolean;	// .04 - enable data
	    enack:    boolean;	// .05 - enable ack
	    encomd:   boolean;	// .06 - enable mac command
	}: packed, lsb, bits(32), out;
	srcmatch:							// 608
	{   enb:      boolean;	// .00 - enable source addr matching
	    autopend: boolean;	// .01 - enable auto ack pending flag
	    datareq:  boolean;	// .02 - autopend data request comd only
	}: packed, lsb, bits(32), out;
	    	
	frmctl0:							// 624
	{   txmode: (NORM, _, LOOP, RAND);	// .00-01
	    rxmode: (NORM, SER, LOOP, DISSS);	// .02-03
	    engscan:(NORM, PEAK);	// .04
	    autoack:boolean;	// .05
	    autocrc:boolean;	// .06
	    append: boolean;	// .07
	}: packed, lsb, bits(32), out, at(0x624);
	frmctl1:							// 628
	{   rxenbontx: boolean;	// .00
	    igntxundf: boolean;	// .01
	    pendingor: boolean;	// .02
	}: packed, lsb, bits(32), out;
	rxenable:  _uint8: bits(32), in, ro;				// 62C
	rxmaskset: _uint8: bits(32), out;				// 630
	rxmaskclr: _uint8: bits(32), out;				// 634
	freqtune:  0..15:  bits(32), out;				// 638
	freqctl:   0..127: bits(32), out, at(0x63C);			// 63C
	txpwr:	   _uint8: bits(32), out;				// 640
	txctl:								// 644
	{   txmixcur:  0..3;	// .00-1
	    dacdc:     0..3;	// .02-3
	    daccur:    0..7;	// .04-6
	}: packed, lsb, bits(32), out;
	fsmsts0:							// 648
	{   fsmstate: 0..0x3F;	// .00-05 what do values mean?
	    calrunning: boolean;// .06
	    caldone:  boolean;	// .07
	}: packed, lsb, bits(32), in, ro;
	fsmsts1:							// 64C
	{   rxact:  boolean;	// .00
	    txact:  boolean;	// .01
	    plllock:boolean;	// .02
	    ccavld: boolean;	// .03
	    cca:    boolean;	// .04
	    sfd:    boolean;	// .05
	    fifop:  boolean;	// .06
	    fifo:   boolean;	// .07
	}: packed, lsb, bits(32), in, ro;
	fifopctl: 0..127: bits(32), out;				// 650
	fsmctl:								// 654
	{   rx2rxto:boolean;	// .00
	    slotack:boolean;	// .01
	}: packed, lsb, bits(32), out;
	ccactl0:   _int8: bits(32), out;				// 658
	ccactl1:							// 65C
	{   hyst:  0..7;	// .00-02
	    mode:  0..0b11;	// .03-04
	}: packed, lsb, bits(32);
	rssi:      _int8: bits(32), in, ro;				// 660
	rssists: boolean: bits(32), in, ro;				// 664
	rxfirst:   _uint8: bits(32), in, ro;				// 668
	rxfifocnt: _uint8: bits(32), in, ro;				// 66C
	txfifocnt: _uint8: bits(32), in, ro;				// 670
	rxbegadr:  _uint8: bits(32), in, ro;				// 674
	rxendadr:  _uint8: bits(32), in, ro;				// 678
	rxp1adr:   _uint8: bits(32), in, ro;				// 67C
	_:         _uint32;						// 680
	txbegadr:  _uint8: bits(32), in, ro;				// 684
	txendadr:  _uint8: bits(32), in, ro;				// 688
	irqenb0:   Intr0: out;	// interrupt enable (masks)		// 68C
	irqenb1:   Intr1: out;	// interrupt enable (masks)		// 690
	irqenbe:   IntrE: out;	// interrupt enable (masks)		// 694
	_:         _uint32;						// 689
	rfrnd:								// 69C
	{   irnd:   0..1;
	    qrnd:   0..1;
	}: packed, lsb, bits(32), in, ro;

	mdmctl1:							// 6A4
	{   corrthd:0..0x1F;	// .00-4
	    corrstd:boolean;	// .05
	}: packed, lsb, bits(32), out, at(0x6A4);
	freqest:  _int8: bits(32), in, ro;				// 6A8
	rxctl:								// 6AC
		_uint32;		// FIXME
	fsctl:								// 6B0
		_uint32;		// FIXME
	fscal0:								// 6B4
		_uint32;		// FIXME
	fscal1:								// 6B8
		_uint32;		// FIXME
	fscal2:								// 6BC
		_uint32;		// FIXME
	fscal3:								// 6C0
		_uint32;		// FIXME
	agcctl0:							// 6C4
		_uint32;		// FIXME
	agcctl1:  0..63: bits(32), out;					// 6C8
	agcctl2:							// 6CC
		_uint32;		// FIXME
	agcctl3:							// 6D0
		_uint32;		// FIXME
	adctest0:							// 6D4
		_uint32;		// FIXME
	adctest1:							// 6D8
		_uint32;		// FIXME
	adctest2:							// 6DC
		_uint32;		// FIXME
	mdmtest0:							// 6E0
		_uint32;		// FIXME
	mdmtest1:							// 6E4
		_uint32;		// FIXME
	dactest0:							// 6E8
		_uint32;		// FIXME
	dactest1:							// 6EC
		_uint32;		// FIXME
	dactest2:							// 6F0
		_uint32;		// FIXME
	atest:								// 6F4
		_uint32;		// FIXME
	ptest0:								// 6F8
		_uint32;		// FIXME
	ptest1:								// 6FC
		_uint32;		// FIXME

	txfltcfg: 0..15: bits(32), out, at(0x7E8);			// 7E8
	// SFR
	data:   _uint8: bits(32), in, out, at(0x828);	// FIFO		// 828
	errf:   IntrE: in, out;						// 82C
	irqf1:  Intr1: in, out;						// 830
	irqf0:	Intr0: in, out;						// 834
	inst:   CSP: bits(32), in, out;					// 838

	// Source address matching table begins here
    };
    type RF: @RFRegs;

    var rf: RFRegs: external(0x4008_8000);

    const rfvectnorm = 141;
    const rfvecterr  = 142;

    // Lookup table for setting transmit power
    type TxPowerEntry:
    {   dbm:     _int8;
	val:     _uint8;	// hi nibble is power, lo nibble is bias
    };
    const TxPowerTable: []TxPowerEntry =
    {	{   7, 0xFF }, {   5, 0xED }, {   3, 0xD5 }, {   1, 0xC5 },
	{   0, 0xB6 }, {  -1, 0xB0 }, {  -3, 0xA1 }, {  -5, 0x91 },
	{  -7, 0x88 }, {  -9, 0x72 }, { -11, 0x62 }, { -13, 0x58 },
	{ -15, 0x42 }, { -24, 0x00 },
    };  



    var state:
    {   rfon:     boolean;
	rxactive: boolean;
    }: packed;



    proc SetPan(pan: _uint16)
    {
	rf.pan[0] = _uint8(pan);
	rf.pan[1] = pan >> 8;
    }

    proc GetPan(): _uint16
    {   var pan: _uint16;

	pan = (rf.pan[1] << 8) | rf.pan[0];
	return pan;
    }

    proc SetShortAddr(adr: _uint16)
    {
	rf.sadr[0] = _uint8(adr);
	rf.sadr[1] = adr >> 8;
    }

    proc GetShortAddr(): _uint16
    {   var adr: _uint16;

	adr = (rf.sadr[1] << 8) | rf.sadr[0];
	return adr;
    }

    proc SetLongAddr(adr: @[8]_uint8)
    {   var i: _uint;

	for i from 0 to 7 do
	    rf.xadr[i] = adr[i];
    }

    proc GetLongAddr(adr: @[8]_uint8)
    {   var i: _uint;

	for i from 0 to 7 do
	    adr[i] = rf.xadr[i];
    }

    proc SetAutoAck(onoff: boolean)
    {
	rf.frmctl0.autoack = onoff;
    }

    proc SetFrameFilter(onoff: boolean)
    {
	rf.frmflt0.enb = onoff;
    }

    proc SetPanCoordinator(onoff: boolean)
    {
	rf.frmflt0.pancoord = onoff;
    }

    proc SetMaxFrameVersion(vers: _uint)
    {
	rf.frmflt0.maxfrmver = vers;
    }

    proc FlushRx(): : inline
    {
	rf.inst = FLUSHRX;
	rf.inst = FLUSHRX;
    }

    proc FlushTx(): : inline
    {
	rf.inst = FLUSHTX;
    }

    proc TurnOff()
    {
	// Wait for any transmission to end
	while rf.fsmsts1.txact do {}
	FlushRx();
	if rf.rxenable != 0 then
	    rf.inst = RFOFF;
	state.rxactive = false;
    }

    proc TurnOn()
    {
	if !state.rxactive then
	{   FlushRx();
	    rf.inst = RXON;
	    state.rxactive = true;
	}
    }

    proc SetChannel(chan: _uint)
    {   var wason: boolean = false;

	if chan < ChanMin || chan > ChanMax then return;
	if rf.fsmsts0.fsmstate != 0 then
	{   wason = true;
	    TurnOff();
	}
	rf.freqctl = ChanMin + ChanDelta*(chan-ChanMin);
	if wason then
	    TurnOn();
    }

    proc GetChannel(): _uint
    {   var freq: _uint;

	freq = rf.freqctl;
	return (freq - ChanMin)/ChanDelta + ChanMin;
    }

    proc GetRSSI(): _int
    {   var wasoff: boolean = false;
	var rssi: _int8;

	if rf.fsmsts0.fsmstate == 0 then
	{   wasoff = true;
	    TurnOn();
	}
	// wait for RSSI to become valid
	while !rf.rssists do {}
	rssi = rf.rssi - RSSIOffset;
	if wasoff then
	    TurnOff();
	return rssi;
    }

    proc GetCCAThreshold(): _int
    {
	return rf.ccactl0 - RSSIOffset;
    }

    proc SetCCAThreshold(val: _int)
    {
	rf.ccactl0 = _int8(val + RSSIOffset);
    }

    // Return whether the channel is clear
    proc IsChannelClear(): boolean
    {   var wasoff: boolean = false;
	var cca: boolean;

	if rf.fsmsts0.fsmstate == 0 then
	{   wasoff = true;
	    TurnOn();
	}
	// wait for RSSI to become valid
	while !rf.rssists do {}
	cca = rf.fsmsts1.cca;
	if wasoff then
	    TurnOff();
	return cca;	
    }

    proc GetTxPower(): _int
    {   var txpwr: _uint8;
	var i: _uint;

	txpwr = rf.txpwr;
	for i from 0 to TxPowerTable?len-1 do
	{   if txpwr >= TxPowerTable[i].val then
		return TxPowerTable[i].dbm;
	}
	return TxPowerTable[TxPowerTable?len-1].dbm;
    }

    proc SetTxPower(dbm: _int)
    {   var i: _uint;

	i = TxPowerTable?len-1;
	loop
	{   if dbm <= TxPowerTable[i].dbm then
	    {   rf.txpwr = TxPowerTable[i].val;
		return;
	    }
	  exit i == 0;
	    i -= 1;
	}
    }


    /*
     * Copy frame to be transmitted into the FIFO
     */
    proc XmitWrite(bp: @[]_byte, len: _uint)
    {   var i: _uint;

    	FlushTx();
	// FIXME - clear Tx done interrupt?
	// First comes the length byte (+2 for FCS)
	rf.data = _uint8(len+2);
	for i from 0 to len-1 do
	    rf.data = bp[i];
    }

    proc XmitStart(cca: boolean)
    {
	if cca then
	    rf.inst = TXONCCA;
	else
	    rf.inst = TXON;
	// FIXME - use interrupt?
	// wait for TxDone flag
	while !rf.irqf1.txdone do {}
	rf.irqf1.txdone = false;	// clear flag
    }

    /*
     * Copy received frame from the FIFO.
     * Two extra bytes follow the data: rssi and lqi.
     */
    proc RecvRead(bp: @[]_byte): _uint	// returns len
    {   var len: _uint;
    	var lqi: _uint8;
	var i: _uint;

	if !rf.fsmsts1.fifop then return 0;
	len = rf.data;			// get length of data in fifo
debug.str("len="); debug.uint(len); debug.nl();
	if len > 127 || len <= 4 then	// perhaps lost fifo synchronization
	{   FlushRx();
	    return 0;
	}
	for i from 0 to len-1 do
	    bp[i] = rf.data;
	lqi = bp[len-1];
debug.str("lqi="); debug.hex8(lqi); debug.nl();
	if lqi & 0x80 == 0 then		// FCS error
	    return 0;
	// If FIFOP==1 and FIFO==0 then there was a FIFO overflow
	if rf.fsmsts1.fifop && !rf.fsmsts1.fifo then
	    FlushRx();
	return len;
    }


    proc Init(chan: _uint)
    {
    	if state.rfon then return;

	sysctl.Enable(sysctl.RADIO, 0, {.run=true,.slp=true,.pm0=true});
	rf.ccactl0 = 0xF8;	// recommended in user guide?
	// Changes from default settings, section 23.15
	rf.txfltcfg = 0x09;
	rf.agcctl1  = 0x15;
	// analog trim

	rf.frmctl0 = { .autocrc=true, .autoack=true };
	rf.frmflt0 = { .enb=false, .pancoord=false, .maxfrmver=3 };
	rf.srcmatch = { .enb=false };
	rf.fifopctl = 127;	// max, so fifop intr is complete packet
	rf.txpwr = 0xD5;		// why?
	SetChannel(chan);

	// Enable interrupts
	rf.irqenb0.fifop = true;	// just FIFOP
//	nvic.Enable(rfvectnorm);
	rf.irqenbe = {.nlock=true,.rxabo=true,.rxovrfl=true,.rxundfl=true,
		      .txovrfl=true,.txundfl=true,.strobe=true};
//	nvic.Enable(rfvecterr);
/*
	// Setup DMA	
	dma.ChanMaskSet(TxDMAChan);
	dma.SetChanDst(TxDMAChan, rf.data);
	dma.ChanMaskSet(RxDMAChan);
	dma.SetChanSrc(RxDMAChan, rf.data); 
*/
	state.rfon = true;
    }

}

