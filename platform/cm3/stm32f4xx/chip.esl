/*
 * STM32F40x chip data
 *
 * Copyright (c) 2014, Brian G. Lucas.  See LICENSE file.
 * $Id$
 */

package chip
{
    type Bus: (APB2, APB1, AHB1, AHB2, AHB3, NOBUS);

    type BusInfo:
    {   lo:   _address;
	hi:   _address;
    };

    const bus: [Bus]BusInfo =
    {	[APB1] = { 0x4000_0000, 0x4000_7FFF },
	[APB2] = { 0x4001_0000, 0x4001_7FFF },
	[AHB1] = { 0x4002_0000, 0x4007_FFFF },
	[AHB2] = { 0x5000_0000, 0x5007_FFFF },
	[AHB3] = { 0xA000_0000, 0xA000_FFFF },
	[NOBUS]= { 0, 0 }
    };

    type Device:
    (	PWR,    SYSCFG, SDIO,
	GPIOA,  GPIOB,  GPIOC,  GPIOD,  GPIOE,  GPIOF,  GPIOG,  GPIOH,
	GPIOI,  GPIOJ,  GPIOK, 
	USART1, USART2, USART3, UART4,  UART5,  USART6,
	TIM1,   TIM2,   TIM3,   TIM4,   TIM5,   TIM6,   TIM7,   TIM8,
	TIM9,   TIM10,  TIM11,  TIM12,  TIM13,  TIM14,
	DMA1,	DMA2,
	OTGFS,	DCMI,	CRYP,	HASH,	RNG,	OTGHS,
	// the following are pseudo-devices for use in reset and clock control
	ETHMAC, ETHTX,  ETHRX,  ETHPTP, ULPI,
    );

    type DevInfo:
    {	bus:   Bus;
    	inx:   0..31;		// bit index for clock/reset control
	addr:  _uint8;		// index to calculate bus address
    	vect:  _uint8;
    }: packed, bits(32);

    const dev: [Device]DevInfo =
    {
	[TIM2]	= { APB1,  0,  0, 44 },
	[TIM3]	= { APB1,  1,  1, 45 },
	[TIM4]	= { APB1,  2,  2, 46 },
	[TIM5]	= { APB1,  3,  3, 66 },
	[TIM6]	= { APB1,  4,  4, 70 },	// vector shared with DAC
	[TIM7]	= { APB1,  5,  5, 71 },
	[TIM12]	= { APB1,  6,  6,  0 },
	[TIM13]	= { APB1,  7,  7,  0 },
	[TIM14]	= { APB1,  8,  8,  0 },
	[USART2]= { APB1, 17, 17, 54 },
	[USART3]= { APB1, 18, 18, 55 },
	[UART4]	= { APB1, 19, 19, 68 },
	[UART5]	= { APB1, 20, 20, 69 },
	[PWR]	= { APB1, 28, 28,  0 },
	[TIM1]	= { APB2,  0,  0, 40 },	// also vectors 41-43
	[USART1]= { APB2,  4,  4, 53 },
	[USART6]= { APB2,  5,  5, 87 },
	[SDIO]=   { APB2, 11, 11, 65 },
	[SYSCFG]= { APB2, 14, 14,  0 },
	[GPIOA]	= { AHB1,  0,  0,  0 },
	[GPIOB]	= { AHB1,  1,  1,  0 },
	[GPIOC]	= { AHB1,  2,  2,  0 },
	[GPIOD]	= { AHB1,  3,  3,  0 },
	[GPIOE]	= { AHB1,  4,  4,  0 },
	[GPIOF]	= { AHB1,  5,  5,  0 },
	[GPIOG]	= { AHB1,  6,  6,  0 },
	[GPIOH]	= { AHB1,  7,  7,  0 },
	[GPIOI]	= { AHB1,  8,  8,  0 },
	[GPIOJ]	= { AHB1,  9,  9,  0 },
	[GPIOK]	= { AHB1, 10, 10,  0 },
	[DMA1]  = { AHB1, 21, 21, 27 }, // vectors 27-33
	[DMA2]  = { AHB1, 22, 22, 72 },	// vectors 72-72
	[ETHMAC]= { AHB1, 25,  0,  0 },
	[ETHTX]	= { AHB1, 26,  0,  0 },
	[ETHRX] = { AHB1, 27,  0,  0 },
	[ETHPTP]= { AHB1, 28,  0,  0 },
	[OTGHS] = { AHB1, 29, 29, 93 }, // vectors 90-93
	[ULPI] =  { AHB1, 30,  0,  0 },
	[CRYP] =  { AHB2,  4,  4, 95 },
	[HASH] =  { AHB2,  5,  5, 96 },
	[RNG] =   { AHB2,  6,  6, 96 }, // shared with HASH
	[OTGFS] = { AHB2,  7,  0, 83 },
    };
/*
#define ETH_BASE              (AHB1PERIPH_BASE + 0x8000)
#define ETH_MAC_BASE          (ETH_BASE)
#define ETH_MMC_BASE          (ETH_BASE + 0x0100)
#define ETH_PTP_BASE          (ETH_BASE + 0x0700)
#define ETH_DMA_BASE          (ETH_BASE + 0x1000)
*/
    const rccaddr:  _address = 0x4002_3800;
    const extiaddr: _address = 0x4001_3C00;
    const gpios: []Device =
    {	GPIOA,  GPIOB,  GPIOC,  GPIOD,  GPIOE,  GPIOF,  GPIOG,  GPIOH,
	GPIOI,  GPIOJ,  GPIOK
    };
    const gpioaddr: []_address =
    { 0x4002_0000, 0x4002_0400, 0x4002_0800, 0x4002_0C00,
      0x4002_1000, 0x4002_1400, 0x4002_1800, 0x4002_1C00,
      0x4002_2000, 0x4002_2400, 0x4002_2800
    };
    const uarts: []Device =
    {	USART1, USART2, USART3, UART4,  UART5,  USART6
    };
    const uartaddr: []_address =
    {	0x4001_1000, 0x4000_4400, 0x4000_4800, 0x4000_4C00,
	0x4000_5000, 0x4001_1400
    };
    const dmas: []Device =
    {	DMA1, DMA2
    };
    const dmaddr: []_address =
    {	0x4002_6000, 0x4002_6400
    };
    const enetaddr: _address = 0x4002_8000;


    proc GetBusByAddress(a: _address): Bus
    {   var b: Bus;

	for b from APB2 to NOBUS do
	{   if _uintptr(bus[b].lo) <= _uintptr(a) &&
	       _uintptr(a) <= _uintptr(bus[b].hi) then
		return b;
	}
	return NOBUS;
    };
    
    proc GetDeviceBus(d: Device): Bus: inline
    {
	return dev[d].bus;
    }

    proc GetDeviceVector(d: Device): _uint8: inline
    {
	return dev[d].vect;
    }
}

