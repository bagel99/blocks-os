/*
 * STM32F40x USARTs
 * There are 5 UARTs.
 *
 * Copyright (c) 2011, Brian G. Lucas.  See LICENSE file.
 * $Id$
 */

import rcc;

package uart
{
    const NumUarts = 5;
    type Width:  (BITS8, BITS9);
    type Stop:   (STOP1, STOP0_5, STOP2, STOP1_5);
    type Parity: (NONE, _, EVEN, ODD);

    // Define register bits.
    // All registers can be accessed as 32 or 16-bits at a time.
    // We will work 32-bits at a time.
    type CR1:
    {   sbk:    boolean;	// .00
	rwu:    boolean;	// .01
	re:     boolean;	// .02 enable recv
	te:     boolean;	// .03 enable xmit
	idleie: boolean;	// .04
	rxneie: boolean;	// .05
	tcie:   boolean;	// .06
	txeie:  boolean;	// .07
	peie:   boolean;	// .08
	parity: Parity;		// .09-10
	wake:   boolean;	// .11
	width:  Width;		// .12
	ue:     boolean;	// .13 enable uart
    }: packed, lsb, bits(32);

    type UartRegs:
    {   sr:							// 0x00
	{   pe:  boolean;       // .00
	    fe:  boolean;       // .01
	    ne:  boolean;       // .02
	    ore: boolean;       // .03
	    idle:boolean;       // .04
	    rxne:boolean;       // .05 cleared by writing 0
	    tc:  boolean;       // .06 cleared by writing 0
	    txe: boolean;       // .07
	    lbd: boolean;       // .08 cleared by writing 0
	    cts: boolean;       // .09 cleared by writing 0
	}: packed, lsb, bits(32), in, out;
	dr:  _uint32: in, out;	// only low 9 bits are data	// 0x04
	brr: _uint32: out;  // actually binary fractional(12.4) // 0x08
	cr1: CR1: in, out;					// 0x0C
	cr2:							// 0x10
	{   addr:   0..15;
	    _:      0..1;
	    lbdl:   (BITS10, BITS11);
	    lbdie:  boolean;
	    _:      0..1;
	    lbcl:   boolean;
	    cpha:   (FIRST, SECOND);
	    cpol:   (LO, HI);
	    clken:  boolean;
	    stop:   Stop;
	    linen:  boolean;
	}: packed, lsb, bits(32), in, out;
	cr3:							// 0x14
	{   eie:    boolean;
	    iren:   boolean;
	    irlp:   boolean;
	    hdsel:  (FULL, HALF);
	    nack:   boolean;
	    scen:   boolean;
	    dmar:   boolean;
	    dmat:   boolean;
	    rtse:   boolean;
	    ctse:   boolean;
	    cgtsie: boolean;
	}: packed, lsb, bits(32), out;
	gtpr:							// 0x18
	{   psc:    0..255;
	    gt:     0..255;
	}: packed, lsb, bits(32), out;
    };

    type Uart:    @UartRegs;

    type UartTypes: (UART, USART);

    // Methods
    proc (u: Uart) SetFormat(w: Width, s: Stop, p: Parity)
    {
	u.cr1.width = w;
	u.cr1.parity = p;
	u.cr2.stop = s;
    }

    proc (u: Uart) SetSpeed(speed: _uint32)
    {   var clk: _uint32;
	var intdiv, fracdiv: _uint32;

	if chip.GetBusByAddress(_address(u))
        is APB2 then clk = sys.P2Clock;
        is APB1 then clk = sys.P1Clock;
        else return;    // eh?
	// This computes a binary fractional 12.4
	u.brr = clk/speed;
    }	

    proc (u: Uart) Send(data: _byte)
    {
	while !u.sr.txe do
	    {}		// spin until xmit ready
	u.dr = data;
    }

    proc Init(n: _uint): Uart
    {   var u: Uart;
	var cr1: CR1;
	var d: chip.Device;

	if n == 0 || n > chip.uarts?len then return 0;
	n -= 1;    // zero-based
	d = chip.uarts[n];
	rcc.ClockEnable(d);
	rcc.DeviceReset(d);
	u = Uart(chip.uartaddr[n]);;
	u.SetFormat(BITS8, STOP1, NONE);
	u.SetSpeed(115200);
	cr1 = u.cr1;
	cr1.re = true;
	cr1.te = true;
	cr1.ue = true;
	u.cr1 = cr1;
	return u;
    }
}
// For debugging
package debug
{
    // If Init not defined, they we are the debug port
    if !_defined(Init) then {
	var u: uart.Uart;
	proc Init()
	{
	    u = uart.Init(sys.DebugPort);
	}

	proc PutC(c: _byte)
	{
	    u.Send(c);
	}
    }
}
// vim: ts=8 sw=4 noet nowrap

