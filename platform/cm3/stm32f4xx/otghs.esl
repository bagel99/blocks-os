/*
 * USB OTG Driver for OTG_HS on STM32F4xx
 *
 * Reference: ST RM0090, doc id 18909 rev 5, chap 35
 *
 * Copyright (c) 2014, Brian G. Lucas.  See LICENSE file.
 * $Id$
 */

import usb;

package otghs
{
    type TxFIFODesc:
    {   start:   _uint16;		// .00-15
	depth:   _uint16;		// .16-31
    }: packed, lsb;
    type RxFIFODesc:
    {   depth:   _uint16;		// .00-15
	_:       _uint16;		// .16-31
    }: packed, lsb;

    // Device mode Receive Packet status
    type RecvDPktSts:
    (   GOUT_NAK=1, OUT=2, OUT_FIN=3, SETUP_FIN=4, SETUP=6 );
    type RecvDStatus:
    {   epnum:     0..15;		// .00-03 EP number
	bcnt:    0..0x7FF;		// .04-14 byte count
	dpid:    (DATA0,DATA1,DATA2,MDATA); // .15-16 Data PID
	pktsts:  RecvDPktSts: bits(4);	// .17-20
	frmnum:  0..15;			// .21-24 D: frame number mod 16
    }: packed, lsb, bits(32);

    // Host mode Receive Packet status
    type RecvHPktSts: ( IN=2, IN_FIN=3, DT_ERR=5, CH_HALT=7 );
    type RecvHStatus:
    {   chnum:     0..15;		// .00-03 channel number
	bcnt:    0..0x7FF;		// .04-14 byte count
	dpid:    (DATA0,DATA1,DATA2,MDATA); // .15-16 Data PID
	pktsts:  RecvHPktSts: bits(4);	// .17-20
    }: packed, lsb, bits(32);

    type OTGRegs:	// GLOBAL - used in both device and host mode
    {
	csr:								// 000
	{   srqscs:  boolean;		// .00 session request success
	    srq:     boolean;		// .01 session request
	    _:       0..0b111111;       // .02-07
	    hngscs:  boolean;		// .08
	    hnprq:   boolean;		// .09 HNP request
	    hshnpen: boolean;		// .10 host enable HNP
	    dhnpen:  boolean;		// .11 device HNP valid
	    _:       0..0b1111;		// .12-15
	    cidsts:  (A,B);		// .16 connector ID status
	    dbct:    boolean;		// .17 debounce time
	    asvld:   boolean;		// .18 A session valid
	    bsvld:   boolean;		// .19 B session valid
	    _:       0..0xFFF;		// .20-31
	}: packed, lsb, in, out;
	int:								// 004
	{   _:       0..0b11;		// .00-01
	    sedet:   boolean;		// .02 session end detected
	    _:       0..0b11111;	// .03-07
	    srsschg: boolean;		// .08 session req. status change
	    hnsschg: boolean;		// .09 host neg. status change
	    _:       0..0x7F;		// .10-16
	    hngdet:  boolean;		// .17 host negotiation detected
	    adtochg: boolean;		// .18 A device timeout change
	    dbcdne:  boolean;		// .19 debounce done
	    _:       0..0xFFF;		// .20-31    
	}: packed, lsb, in, out;
	ahbcfg:								// 008
	{   gintmsk: boolean;		// .00 global interrupt mask
	    bstlen:  (S,B1,B4,B8,B16): bits(4); // .01-04 burst length
	    dmaenb:  boolean;		// .05 DMA enable
	    _:       0..1;       	// .06
	    txfelvl: boolean;		// .07 Tx FIFO empty
	    ptxfelvl:boolean;		// .08 Periodic Tx FIFO empty
	    _:       0..0x7F_FFFF;      // .09-31
	}: packed, lsb, out;
	usbcfg:								// 00C
	{   tocal:   0..7;		// .00-02 FS timeout calibration
	    _:       0..0b111;		// .03-05
	    physel:  (LOW,FULL): wo;	// .06
	    _:       0..1;		// .07
	    srpcab:  boolean;		// .08 SRP capable
	    hnpcap:  boolean;		// .09 HNP capable
	    trdt:    0..15;		// .10-13 turnaround time
	    _:       0..1;		// .14
	    phylpcs: (C480,C48);	// .15 PHY low-power clock select
	    _:       0..1;		// .16
	    ulpifsls:boolean;		// .17 ULPI FS/LS select
	    ulpiar:  boolean;		// .18 ULPI auto-resume
	    ulpicsm: boolean;		// .19 ULPI clock suspendM
	    ulpivbus:(INT,EXT);		// .20 ULPI VBus drive
	    ulpibusi:(INT,EXT);		// .21 ULPI bus indicator
	    tsdps:   (TXVALID,TERMSEL);	// .22 TermSel DLine pulsing
	    pcci:    boolean;		// .23 indicator complement
	    ptci:    boolean;		// .24 indicator pass through
	    ulpipd:  boolean;		// .25 ULPI interface protect disable
	    _:       0..0b111;		// .26-28
	    fhmod:   boolean;		// .29 force host mode
	    fdmod:   boolean;		// .30 force device mode
	    ctxpkt:  boolean;		// .31  do not set!    
	}: packed, lsb, out;
	rstctl:								// 010
	{   csrst:   boolean;		// .00 core soft reset
	    hsrst:   boolean;		// .01 HCLK soft reset
	    fcrst:   boolean;		// .02 frame counter reset
	    _:       0..1;		// .03
	    rxfflsh: boolean;		// .04 RxFIFO flush
	    txfflsh: boolean;		// .05 TxFIFO flush
	    txfnum:  0..0b11111;	// .06-10 TxFIFO number
	    _:       0..0x7FFFF;	// .11-29
	    dmareq:  boolean: ro;	// .30 DMA request in progress
	    ahbidle: boolean: ro;	// .31 AHB master idle
	}: packed, lsb, in, out;
	intsts:								// 014
	{   cmod:    (DEVICE, HOST): ro;// .00 current mode
	    mmis:    boolean;		// .01 mode mismatch
	    otgint:  boolean: ro;	// .02 OTG protocol event
	    sof:     boolean;		// .03 start of frame
	    rxflvl:  boolean: ro;	// .04 RxFIFO not empty
	    nptxfe:  boolean: ro;	// .05 non-periodic TxFIFO empty
	    ginakeff:boolean: ro;	// .06 IN non-periodic NAK effective
	    gonakeff:boolean: ro;	// .07 OUT non-periodic NAK effective
	    _:       0..0b11;		// .08-09
	    esusp:   boolean;		// .10 D: early suspend
	    usbsusp: boolean;		// .11 D: suspend detected
	    usbrst:  boolean;		// .12 D: reset detected
	    enumdne: boolean;		// .13 D: enumeration done
	    isoodrp: boolean;		// .14 D: isoc OUT dropped
	    eopf:    boolean;		// .15 D: end of periodic frame
	    _:       0..0b11;		// .16-17
	    iepint:  boolean: ro;	// .18 D: in endpoint interrupt
	    oepint:  boolean: ro;	// .19 D: out endpoint interrupt
	    iisoixf: boolean;		// .20 D: incomplete isoc IN
	    iisooxf: boolean;		// .21 D: incomplete isoc OUT
	    dfsusp:  boolean;		// .22 DMA fetch suspended
	    _:       0..1;		// .23
	    hprtint: boolean: ro;	// .24 H: port interrupt
	    hcint:   boolean;		// .25 H: channel interrupt
	    ptxfe:   boolean;		// .26 H: periodic TxFIFO empty
	    _:       0..1;		// .27
	    cidschg: boolean;		// .28 connector ID status change
	    discint: boolean;		// .29 H: disconnect detected
	    srqint:  boolean;		// .30 session request
	    wkupint: boolean;		// .31 wakeup detected
	}: packed, lsb, in, out;
	intmsk:								// 018
	{   _:       0..1;
	    mmis:    boolean;		// .01 mode mismatch
	    otgint:  boolean: ro;	// .02 OTG protocol event
	    sof:     boolean;		// .03 start of frame
	    rxflvl:  boolean: ro;	// .04 RxFIFO not empty
	    nptxfe:  boolean: ro;	// .05 non-periodic TxFIFO empty
	    ginakeff:boolean: ro;	// .06 IN non-periodic NAK effective
	    gonakeff:boolean: ro;	// .07 OUT non-periodic NAK effective
	    _:       0..0b11;		// .08-09
	    esusp:   boolean;		// .10 D: early suspend
	    usbsusp: boolean;		// .11 D: suspend detected
	    usbrst:  boolean;		// .12 D: reset detected
	    enumdne: boolean;		// .13 D: enumeration done
	    isoodrp: boolean;		// .14 D: isoc out dropped
	    eopf:    boolean;		// .15 D: end of periodic frame
	    _:       0..1;		// .16
	    epmis:   boolean;		// .17 endpoint mismatch
	    iepint:  boolean: ro;	// .18 D: in endpoint interrupt
	    oepint:  boolean: ro;	// .19 D: out endpoint interrupt
	    iisoixf: boolean;		// .20 D: incomplete isoc IN
	    iisooxf: boolean;		// .21 HD
	    dfsusp:  boolean;		// .22 DMA fetch suspended
	    _:       0..1;		// .23
	    hprtint: boolean: ro;	// .24 H: port interrupt
	    hcint:   boolean: ro;	// .25 H: channel interrupt
	    ptxfe:   boolean: ro;	// .26 H: periodic TxFIFO empty
	    _:       0..1;		// .27
	    cidschg: boolean;		// .28 connector ID status change
	    discint: boolean;		// .29 disconnect detected
	    srqint:  boolean;		// .30 session request
	    wkupint: boolean;		// .31 wakeup detected
	}: packed, lsb, out;
	rxsts:	 RecvDStatus: in;	// must cast if host		// 01C
	rxstsp:	 RecvDStatus: in;	// must cast if host		// 020
	rxfsiz:	 RxFIFODesc: out;					// 024
	tx0fsiz: TxFIFODesc: out;	// must cast if host		// 028
	nptxsts: _uint32;		// H-only FIXME			// 02C
	_:  [2]_uint32;
	ccfg:							        // 038
	{   _:      0..0xFFFF;		// .00-15
	    powerup:boolean;		// .16 power down deactivated
	    _:      0..1;		// .17
	    senseA: boolean;		// .18 enable A Vbus sensing
	    senseB: boolean;		// .19 enable B Vbus sensing
	    sofout: boolean;		// .20 enable SOF output to pin
	}: packed, lsb, bits(32), out;
	cid:     _uint32;		// core ID			// 03C
	_:   [48]_uint32;
	ptxfsiz: TxFIFODesc: out;					// 100
	txfsiz: [3] TxFIFODesc: out;					// 104
    };
    type otggbl: @OTGRegs;
    const usbg: otggbl = 0x4004_0000;


}

