/*
 * The STM-P107 has the Ethernet PHY link "interrupt" hooked to a GPIO pin.
 * It is possible to cause a real interrupt from that pin.
 * For now we just test the pin on systicks.
 *
 * Copyright (c) 2012, Brian G. Lucas.  See LICENSE file.
 * $Id$
 */


import enet;	// the device driver
import timer;
import eth;	// the block wrapper

package eth	// Extend the package
{
    alias timer.TimerEvent as TimerEvent;
    alias timer.pTimerEvent as pTimerEvent;

    proc (eb: pEthBlock) ContinuePolling(te: pTimerEvent)
    {
	te.RestartSeconds(0, 2);		// 2 second polling interval
    }

    proc (eb: pEthBlock) EnablePolling()
    {   var te: timer.pTimerEvent;

if db > 2 then debug.str("EnblPoll\n");
	phy.EnableIntr(enet);	// so the GPIO pin sees the status
	timer.StartSeconds(0, 2);
    }

    proc (eb: pEthBlock) CheckLinkStatus(e: pEvent): boolean
    {   var te: pTimerEvent;

	te = pTimerEvent(e);
	eb.ContinuePolling(te);
if db > 2 then { debug.str("MDINT ");
debug.uint8(_uint8(gpio.Tst(sys.MDINT))); debug.nl(); }
	if !gpio.Tst(sys.MDINT) then
	    return phy.HandleIntr(enet);
	{
	}
	return !gpio.Tst(sys.MDINT);
    }

    proc (eb: pEthBlock) Intr()
    {
    	if eb.nintr == 1 then eb.state.RecvDone();
    	if eb.nintr == 0 then eb.state.XmitDone();
    }

    // FIXME - temporary until unified interrupt handling
    proc Interrupt():: global("ETH_IRQ")
    {
if db > 2 then debug.str("enet_irq\n");
        var e: Enet = enet;
	var istatus: ?enet.dma.sr;
    
	istatus = e.dma.sr;
	e.dma.sr = istatus;	// clear all 1 bits by writing back 1's
//debug.chr('I');debug.hex32(_uint32(istatus));debug.nl();
	if istatus.rs then	// Rx ready
	    EthID.Post(1);
	if istatus.ts then	// Tx ready
	    EthID.Post(0);
    }
}
