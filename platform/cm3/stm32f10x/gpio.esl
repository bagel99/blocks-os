/*
 * STM32F10x GPIO and pin remapping.
 *
 * Copyright (c) 2011, Brian G. Lucas.  See LICENSE file.
 * $Id$
 */

import chip;
import rcc;

package gpio
{
    // There are 7 ports of 16-bits each.  Not all are pinned-out.
    const NumGPIO = 7;
    // Ports (X is a special case)
    type Port: (A, B, C, D, E, F, G, X=15);
    type PortDesc:
    {   bit:  0..15;
	port: Port;
    }: packed;
    // PortConf is almost a direct mapping to cnf/mode bits,
    // only IN_PULLUP is a special case
    type PortConf:		// CNF MODE
    (   IN_ANALOG,		//  00 00
	GP_PP_10,		//  00 01      
	GP_PP_2,		//  00 10
	GP_PP_50,		//  00 11
	IN_FLOAT,		//  01 00
	GP_OD_10,		//  01 01
	GP_OD_2,		//  01 10
	GP_OD_50,		//  01 11
	IN_PULLDN,		//  10 00 ODR=0
	AF_PP_10,		//  10 01
	AF_PP_2,		//  10 10
	AF_PP_50,		//  10 11
	IN_PULLUP,		//  10 00 ODR=1, remapped before use
	AF_OD_10,		//  11 01
	AF_OD_2,		//  11 10
	AF_OD_50		//  11 11
    );
    type PortInit:
    {   port: PortDesc;
        conf: PortConf;
    }: packed, bits(16);

    type Conf: (GPDRIVE, GPOPEN, AFDRIVE, AFOPEN);
    const ANALOG:  Conf = GPDRIVE;
    const INFLOAT: Conf = GPOPEN;
    const INPULL:  Conf = AFDRIVE;
    type Mode: (INPUT, OUT10, OUT2, OUT50);

    // GPIO Registers
    // must be accessed as 32-bit words
    type GPIORegs:
    {   crl:  [8] PortConf: packed, lsb, out;				// 00
	crh:  [8] PortConf: packed, lsb, out;				// 04
	idr:  _uint16: bits(32), ro, in;				// 08
	odr:  _uint16: bits(32), out;					// 0C
	bsrr: _uint16: bits(32), wo, out; // hi 16 bit must be 0	// 10
	brr:  _uint16: bits(32), wo, out;				// 14
	lckr:								// 18
	{   lck:  _uint16;
	    lckk: 0..1;     // magic lock sequence bit
	}: packed, lsb, bits(32), in, out;
    };
    type GPIO: @GPIORegs;


    proc Clr(which: PortDesc)
    {   var g: GPIO;

	g = GPIO(chip.gpioaddr[which.port]);
	g.brr  = 1 << which.bit;
    }

    proc Set(which: PortDesc)
    {   var g: GPIO;

	g = GPIO(chip.gpioaddr[which.port]);
	g.bsrr = 1 << which.bit;
    }

    proc Tst(which: PortDesc): boolean
    {   var g: GPIO;

	g = GPIO(chip.gpioaddr[which.port]);
	return g.idr & (1 << which.bit) != 0;
    }

    proc Init(which: PortInit)
    {   var g: GPIO;
	var c: PortConf;
	var b: _uint;

	// First, make sure the clock is enabled to the GPIO port
	rcc.ClockEnable(chip.gpios[_uint8(which.port.port)]);
	// Then configure the pin
	g = GPIO(chip.gpioaddr[which.port.port]);
	c = which.conf;
	if c == IN_PULLUP then c = IN_PULLDN;   // special case
	b = which.port.bit;
	if b < 8 then
	    g.crl[b] = c;
	else
	    g.crh[b-8] = c;
	if which.conf
	is IN_PULLUP then g.bsrr = 1 << b;
	is IN_PULLDN then g.brr  = 1 << b;
    }

    // Alternate function control
    type Remap1: (NO, REMAP);
    type Remap2: (NO, PARTIAL, _, REMAP);
    type ExtIReg:
    {   exti: [4] Port: packed;
	_:      0..0xFFFF;
    }: packed, lsb;	    
    
    type AFIORegs:  // 32-bit access only
    {   evcr:								// 00
	{   bit:  0..15;	// .00-03
	    port: 0..7;		// .04-06 not all may be available
	    evoe: boolean;      // .07
	}: packed, lsb, bits(32), out;
	mapr:								// 04
	{   spi1:   Remap1;
	    i2c1:   Remap1;
	    usart1: Remap1;
	    usart2: Remap1;
	    usart3: Remap2;
	    tim1:   Remap2;
	    tim2:   Remap2;
	    tim3:   Remap2;
	    tim4:   Remap1;
	    can1:   Remap2;
	    pd01:   Remap1;
	    tim5ch4:Remap1;
	    _:      0..0b1111;
	    eth:    Remap1;
	    can2:   Remap1;
	    rmii:   boolean;
	    swj:    (FULL, NO_RST, SWONLY, _, NONE, _, _, _);
	    _:      0..1;
	    spi3:   Remap1;
	    tim2it1:Remap1;
	    ptp_pps:boolean;
	    _:      0..1;
	}: packed, lsb, out;
	exticr0: ExtIReg: out;						// 08
	exticr1: ExtIReg: out;						// 0C
	exticr2: ExtIReg: out;						// 10
	exticr3: ExtIReg: out;						// 14
	_:  _uint32;							// 18
	mapr2:								// 1C
	{   _:      0..0b11111; // .00-04
	    tim9:   Remap1;     // 
	    tim10:  Remap1;
	    tim11:  Remap1;
	    tim13:  Remap1;
	    tim14:  Remap1;
	    nadv:   Remap1;
	}: packed, lsb, bits(32), out;
    };
    type AFIO: @AFIORegs;
    const afio: AFIO = chip.afioaddr;

    proc ExtIntr(which: PortDesc)
    {   var af: AFIO;
	af = afio;

	if which.bit
	is 0..3 then
	    af.exticr0.exti[which.bit] = which.port;
	is 4..7 then
	    af.exticr1.exti[which.bit-4] = which.port;
	is 8..11 then
	    af.exticr2.exti[which.bit-8] = which.port;
	is 12..15 then
	    af.exticr3.exti[which.bit-12] = which.port;
    }
}
// vim: ts=8 sw=4 noet nowrap

