/*
 * DMA Controller
 *
 * Copyright (c) 2013, Brian G. Lucas.  See LICENSE file.
 * $Id$
 */

package dma
{


    type IntrPerChan:
    {   gif:   boolean;
    	tcif:  boolean;
    	htif:  boolean;
    	teif:  boolean;
    }: packed, lsb;
    type Width: (B8, B16, B32, _);
    type ConfPerChan:
    {   cr:
	{   en:      boolean;		// .00
    	    tcie:    boolean;		// .01
    	    htie:    boolean;		// .02
    	    teie:    boolean;		// .03
    	    dir:     (tomem, fmmem);	// .04
    	    circ:    boolean;		// .05
    	    pinc:    boolean;		// .06
    	    minc:    boolean;		// .07
    	    psize:   Width;		// .08-09
    	    msize:   Width;		// .10-11
    	    prior:   0..3;		// .12-13: 0 lowest priority
    	    mem2mem: boolean;		// .14
    	    _:       0..0x1_FFFF;	// .15-31
	}: packed, lsb;
	cnt:   _uint32;		// low 16 bits only
	par:   _address;
	mar:   _address;
	_:     _uint32;
    };
    type DmaReg:
    {   isr:  [8] IntrPerChan: packed, lsb, in;			// 00
	ifcr: [8] IntrPerChan: packed, lsb, out;		// 04
	chan: [7] ConfPerChan: out;			// 08,1C,30,...,80
    };
    type Dma: @DmaReg;


    const device: [2] Dma = { 0x40020000, 0x40020400 };
    const vector: [2][8]_uint8 =
    { //    0   1   2   3   4   5   6   7  - channels, there is no chan 0
	 {  0, 11, 12, 13, 14, 15, 16, 17 }, 	// DMA1
	 {  0, 56, 57, 58, 59, 60,  0,  0 }
    };


}

