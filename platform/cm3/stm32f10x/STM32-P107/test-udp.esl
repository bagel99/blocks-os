// TEST: UDP
// Uses port 5683, echos packets starting with '?'

import sys;
import trace;
import debug;
import uart;

package debug
{
    const db_fault   = 1;
    const db_block   = 1;
    const db_timer   = 1;
    const db_eth     = 2;
    const db_ipv4    = 2;
    const db_ipv6    = 2;
    const db_udp     = 5;
}

import fault;
import syscb;
import sysctl;
import nvic;

import mbuf;
import block;

var MyMAC:  [6]_byte;
const TimerID: block.BlockID = 1;
const EthID:   block.BlockID = 15;
const IPv4ID:  block.BlockID = 14;
const IPv6ID:  block.BlockID = 13;
const UDPID:   block.BlockID = 11;
const AppID:   block.BlockID = 10;


// Chip stuff
import chip;	// for GetSerialNumber()
import timer;
import enetsys;

import inet;
var MyIPv4Addr: inet.IPv4Addr = { 192,156,205,18 };
var MyIPv4Mask: inet.IPv4Addr = { 255,255,255,128 };
import ipv6;
import ipv4;
import udp;

alias event.Event as Event;
alias event.pEvent as pEvent;
alias block.Block as Block;
alias block.pBlock as pBlock;
alias block.BlockID as BlockID;

package app
{
    alias mbuf.pMBuf as pMBuf;

    type AppBlock(Block):
    {   lower: BlockID;
    };
    type pAppBlock: @AppBlock;

    proc Run(b: pBlock, e: pEvent)
    {   var mb: pMBuf;
	var pa: inet.pAddrInfo;
	var dp: @[]_byte;
	var ab: pAppBlock;

{debug.str("app.Run ");  debug.uint8(_uint8(e.code));
debug.chr(','); debug.uint8(e.tag); debug.nl();}
	ab = pAppBlock(b);
	if e.code
	is RCVD then
	{
	    mb = pMBuf(e);
	    debug.str("app.Recv: len=");  debug.uint(mb.Size()); debug.nl();
mb.Dump(true);
	    pa = inet.pAddrInfo(mb.Data());
	    dp = mb.Offset(inet.AddrInfo?size);
	    if dp[0] == '?' then
	    {	dp[0] = '!';
debug.str("send to="); debug.uint8(ab.lower); debug.nl();
	    	mb.code = SEND;
	    	ab.lower.Send(mb);
	    }
	    else
	        mbuf.Free(mb);
	}
	is CONNECT then
	{   var ce: event.pConnEvent;
	    ce = event.pConnEvent(e);
	    if ce.type == LOWER then
	    	ab.lower = ce.tag;
	    _delete(ce);
	}
	else
	{
	    _delete(e);
	}
    }

   proc NewBlock(id: BlockID): pBlock
    {   var tb: pAppBlock;

	tb = _new(AppBlock);
	tb.BlockInit(id, Run);
	return tb;
    }
}

var HeapStart: _memory: external("_end");

proc wait()::external;

proc meminit(addr: _address, size: _uint, pool: _uint): : external;

const Connections: []block.ConnectionInfo =
{   {   IPv4ID, EthID,   LOWER,  1, 0 },
    {	EthID,  IPv4ID,  UPPER,  1, _uint16(eth.Proto.IPV4) },
    {	EthID,  IPv4ID,  UPPER,  1+0x80, 0x0806 },
    {   IPv6ID, EthID,   LOWER,  1, 0 },
    {	EthID,  IPv6ID,  UPPER,  1, _uint16(eth.Proto.IPV6) },
    {	IPv4ID, UDPID,   UPPER, 0, _uint16(inet.Proto.UDP) },
    {	IPv6ID, UDPID,   UPPER, 0, _uint16(inet.Proto.UDP) },
    {	UDPID,  AppID,   UPPER, 0, 5683 },
    {	AppID,  UDPID,   LOWER, 0, 0 },
};

proc main(): _int
{   var serialno: _uint32;

    sys.Init();
    sysctl.Init();
    fault.Init();
    debug.Init();
    sys.ledon(0);							// 01
debug.str("Starting test-udp...\n");
    meminit(HeapStart, 0x8000, 0);	// FIXME
/*
    // create MAC from serial number
    serialno = chip.GetSerialNumber();
    MyMAC[0] = 0x02;
    MyMAC[1] = 0x00;
    MyMAC[2] = _byte(serialno >> 24);
    MyMAC[3] = _byte(serialno >> 16);
    MyMAC[4] = _byte(serialno >> 8);
    MyMAC[5] = _byte(serialno);
*/
    MyMAC = { 0x02, 0x12, 0x34, 0x45, 0x67, 0x78 };
    debug.str("MyMAC="); ipv6.MACPrint(MyMAC); debug.nl();

    timer.NewBlock(TimerID);
    eth.NewBlock(EthID);
    ipv4.NewBlock(IPv4ID);
    ipv6.NewBlock(IPv6ID);
    udp.NewBlock(UDPID);
    app.NewBlock(AppID);
    block.InitConnections(Connections, Connections?len);
    {   var e: pEvent;
	e = _new(Event);
	e.code = START;
	IPv4ID.Send(e);
	e = _new(Event);
	e.code = START;
	IPv6ID.Send(e);
    }

    sys.ledon(1);							// 11

    loop
    {
	block.Sched();
    	/* wait(); screws jtag */
    }

    return 0;
}

