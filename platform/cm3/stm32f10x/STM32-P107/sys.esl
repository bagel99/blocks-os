/*
 * All of the board specific stuff should go here, e.g, how pins are used,
 * if pin-outs need to be remapped, external clocks, etc.
 *
 * Copyright (c) 2011, Brian G. Lucas.  See LICENSE file.
 * $Id$
 */

package sys
{
    const CpuXtal   = 25_000_000;	// 25MHz crystal
    const CoreClock = 72_000_000;	// 72MHz required for ethernet
    const HClock = CoreClock;
    const P1Divider = 2;
    const P2Divider = 1;
    const P1Clock = HClock/P1Divider;
    const P2Clock = HClock/P2Divider;
    const TicksPerSecond = 50;

    const TopOfStack = 0x20010000;

    // USART3 is the debug port via RS232 connector on board
    const DebugPort = 3;

    // Parameters for Ethernet PHY
    const phy = "phy_ste101p";
//    var PhyAddr: 0..31 = 0;	// Don't know PHY chip strapped address;
    const PhyAddr = 21;
    const PhyId1 = 0x0006;	// high bits of PHY vendor code
    const PhyId2 = 0x1c50;	// low bits of PHY vendor, model
}

import rcc;
import syscb;
import gpio;
import nvic;

package sys
{
    const LED1:  gpio.PortDesc = {.port=C,.bit= 6 };
    const LED2:  gpio.PortDesc = {.port=C,.bit= 7 };
    const MDINT: gpio.PortDesc = {.port=E,.bit=14 };
    const BUT1:  gpio.PortDesc = {.port=A,.bit= 0 };
    const BUT2:  gpio.PortDesc = {.port=C,.bit=13 };
    const SDCARD:gpio.PortDesc = {.port=A,.bit= 4 };
    const USBPWR:gpio.PortDesc = {.port=D,.bit= 7 };
    const USBVBUS:gpio.PortDesc= {.port=A,.bit= 9 };

    /*
     * Even if the pin is set to the reset default (IN_FLOAT)
     * gpio.Init() should be called (at least once per port)
     * so the clock to the port is enabled.
     */
    const PinOut: [] gpio.PortInit =
    {	// LEDs
	{ LED1,			GP_PP_50 },	// LED green
    	{ LED2,			GP_PP_50 },	// LED yellow
	// buttons
    	{ BUT1,			IN_FLOAT },	// WAKE button
    	{ BUT2,			IN_FLOAT },	// TAMPER button
    	// debug UART
    	{{.port=D,.bit= 8},	AF_PP_50 },	// USART3_Tx
    	{{.port=D,.bit= 9},	IN_FLOAT },	// USART3_Rx
    	{{.port=D,.bit=11},	IN_FLOAT },	// USART3_CTS
    	{{.port=D,.bit=12},	AF_PP_50 },	// USART3_RTS
	// ethernet
    	{ MDINT,		IN_FLOAT },	// ETH_MDINT - EXTI 14
    	{{.port=C,.bit= 1},	AF_PP_50 },	// ETH_MDC
    	{{.port=A,.bit= 2},	AF_PP_50 },	// ETH_MDIO
//    	{{.port=A,.bit= 1},	IN_FLOAT },	// ETH_REF_CLK
//	{{.port=A,.bit= 7},	IN_FLOAT },	// ETH_CRS_DV
    	{{.port=C,.bit= 4},	IN_FLOAT },	// ETH_RX0
    	{{.port=C,.bit= 5},	IN_FLOAT },	// ETH_RX1
    	{{.port=B,.bit=11},	AF_PP_50 },	// ETH_TX_EN
    	{{.port=B,.bit=12},	AF_PP_50 },	// ETH_TX0
    	{{.port=B,.bit=13},	AF_PP_50 },	// ETH_TX1
    	{{.port=B,.bit= 5},	AF_PP_50 },	// ETH_PPS_OUT
    	{{.port=A,.bit= 8},	AF_PP_50 },	// MCO output
    	// sd card
    	{ SDCARD,	        IN_FLOAT },	// MMC_CS
    	{{.port=C,.bit=10},	AF_PP_50 },	// MMC_SPI_CLK (SPI3)
    	{{.port=C,.bit=11},	AF_PP_50 },	// MMC_SPI_MISO (SPI3)
    	{{.port=C,.bit=12},	AF_PP_50 },	// MMC_SPI_MOSI (SPI3)
    	// usb otg fs
    	{{.port=A,.bit=11},	AF_PP_50 },	// USB_DM
    	{{.port=A,.bit=12},	AF_PP_50 },	// USB_DP
    	{ USBVBUS,	        IN_FLOAT },	// USB_OTG_VBUS
    	{{.port=A,.bit=10},	IN_PULLUP},	// USB_OTG_ID
    	{ USBPWR,	        GP_PP_50 },	// USB_VBUS_ON
    	{{.port=E,.bit=15},	IN_FLOAT }	// USB_FAULT - EXTI 15
    };

    const LEDPorts: []gpio.PortDesc = {LED1, LED2};

    proc ledon(which: _uint)
    {
	gpio.Set(LEDPorts[which]);
    }

    proc ledoff(which: _uint)
    {
	gpio.Clr(LEDPorts[which]);
    }

    proc ledtoggle(which: _uint)
    {
	if gpio.Tst(LEDPorts[which]) then
	    gpio.Clr(LEDPorts[which]);
	else
	    gpio.Set(LEDPorts[which]);
    }

    proc usbpower(which: _uint, on: boolean)
    {
	// this board only supports which==0
	if on then
	    gpio.Clr(USBPWR);	// active low
	else
	    gpio.Set(USBPWR);
    }

    proc Delay_uS(usec: _uint)
    {   var k: _uint;
	var n: _uint: in, out;

	k = 120 * usec/7;	// FIXME - calibrate this
	n = 0;
	while n < k do
	    n += 1;
    }

    proc Delay_mS(msec: _uint)
    {
	Delay_uS(msec * 1000);
    }

    proc Init()
    {   var i: _uint;
	var af: gpio.AFIO;

    	// we need to remap pins, so turn on alternate function control clock
    	rcc.ClockEnable(AFIO);
	// configure GPIO pins
	for i from 0 to PinOut?len-1 do
	    gpio.Init(PinOut[i]);
	// remap GPIO pins
	af = gpio.afio;
	af.mapr.usart3 = REMAP;			// remap USART3
	af.mapr.spi3 = REMAP;			// remap SPI3
	af.mapr.rmii = true;			// ETH uses RMII
	// configure external interrupts
	gpio.ExtIntr(MDINT);			// ETH PHY interrupt
    }

    proc Fatal(code: _uint32)
    {
    	nvic.DisableAll();
    	loop {}
    }
}

