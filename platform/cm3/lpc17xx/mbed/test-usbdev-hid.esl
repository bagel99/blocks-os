/*
 * Custom HID demo USB device
 *
 * main routine for MBED platform
 */

// Board specific stuff
import sys;
package debug
{
    const db_block   = 2;
    const db_connect = 1;
    const db_usbdev  = 0x00020000;
    // works with no usbdev output
//    const db_usbdev  = 0x000F0033;
}
import trace;
import debug;
import uart;
var u: uart.Uart;				// for debug print

// Cortex M3 stuff
import fault;
import systick;
import nvic;

// LPC1768 stuff
import sysctl;
//import exti;

import usbdev;
import usb_ledbut;

var button1, button2: boolean: in, out;

/*
proc EINT0_IRQ()
{
    button1 = true;
    exti.ClearIntr(sys.BUT1);
}

proc EINT10_15_IRQ()
{
    if exti.Pending(sys.BUT2) then
    {   button2 = true;
        exti.ClearIntr(sys.BUT2);
    }
}
*/
proc meminit(addr: _address, size: _uint, pool: _uint): : external;
    

proc main()
{
    var c: _byte;				// for debug print

    sys.Init();
    sysctl.Init();
    fault.Init();
    debug.Init();
    sys.ledon(0);
debug.str("Starting test-usbdev-hid...\n");
    meminit(0x2007C400, 0x7C00, 0);	// FIXME - space reserved for usbhost RAM
    sys.ledon(1);
    usbdev.HIDInit();
    sys.ledon(2);
    u = uart.Init(sys.DebugPort);		// for debug print
    loop
    {
    	c = debug.Empty();			// for debug print
    	if c != 0 then				// for debug print
    	    u.Send(c);				// for debug print
	if button1 then
    	{   button1 = false;
    	    usbdev.Button(1);
    	}
    	if button2 then
    	{   button2 = false;
    	    usbdev.Button(2);
    	}
    }
}
// vim: ts=8 sw=4 noet nowrap

