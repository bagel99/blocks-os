import sys;
import trace;	// use trace as debug port
import debug;
import uart;

package debug
{   const db_timer = 3;
    const db_block   = 2;
    const db_connect = 1;
}

import fault;
import syscb;
import sysctl;
import nvic;

import block;

const TimerID: block.BlockID = 1;

import timer;
//import wait;

package app
{
    const db = 1;
    alias event.Event  as Event;
    alias event.pEvent as pEvent;
    alias timer.TimerEvent  as TimerEvent;
    alias timer.pTimerEvent as pTimerEvent;
    alias block.Block  as Block;
    alias block.pBlock as pBlock;

    type AppBlock(Block):
    {   state: 0..7;
    };
    type pAppBlock: @AppBlock;

    type color: (RED, GREEN, BLUE);
    const LEDPorts: [color]gpio.PortDesc = {sys.LED_RED, sys.LED_GREEN, sys.LED_BLUE};
    
    proc ledcoloron(which: color)
    {
	gpio.Clr(LEDPorts[which]);
    }

    proc ledcoloroff(which: color)
    {
	gpio.Set(LEDPorts[which]);
    }

    
    proc (ab: pAppBlock) SetTimer(seconds: _uint16)
    {
//debug.str("app.SetTimer: "); debug.uint16(seconds); debug.nl();
	timer.StartSeconds(0, seconds);
    }

    proc (ab: pAppBlock) CancelTimer()
    {
	timer.Stop(0);
    }


    proc Run(b: pBlock, e: pEvent)
    {   var te: pTimerEvent;
	var ab: pAppBlock;

	ab = pAppBlock(b);
	te = pTimerEvent(e);
// debug.str("app.Timer: ");
	if e.code
	is TSTOPPED then
	{
// debug.str("cancelled");
	    event.Free(te);	
	}
	is TDONE then
	{
// debug.str("done");
	    if ab.state
	    is 0 then ledcoloron(RED);
	    is 1 then ledcoloron(GREEN);
	    is 2 then ledcoloroff(RED);
	    is 3 then ledcoloron(BLUE);
	    is 4 then ledcoloron(RED);
	    is 5 then ledcoloroff(GREEN);
	    is 6 then ledcoloroff(RED);
	    is 7 then ledcoloroff(BLUE);
/*
	    if ab.state
	    is 0 then ledcoloron(RED);
	    is 2 then { ledcoloroff(RED); ledcoloron(GREEN); }
	    is 4 then { ledcoloroff(GREEN); ledcoloron(BLUE); }
	    is 6 then ledcoloroff(BLUE);
*/
	    if ab.state == 7 then ab.state = 0; else ab.state += 1;
	    te.RestartSeconds(0, 2);
	}
	else
	{
// debug.str("unknown event");
	    event.Free(e);
	}	
    }

    proc (ab: pAppBlock) Init()
    { 
if db > 0 then debug.str("app.Init\n");
	block.SetContext(ab.id);
	ab.state = 0;
	ab.SetTimer(2);

    }

    proc NewBlock(id: block.BlockID): pBlock
    {   var ab: pAppBlock;

	ab = _new(AppBlock);
if db > 0 then { debug.str("app.AppBlock ");
debug.uint8(id); debug.chr(' ');
debug.hex(_uint(ab)); debug.nl(); }
	ab.BlockInit(id, Run);
	return ab;
    }
}

proc meminit(addr: _address, size: _uint, pool: _uint): : external;

proc main(): _int
{
    var ab: app.pAppBlock;
    var u: uart.Uart;				// for debug print
    var c: _byte;				// for debug print

    sys.Init();
    sysctl.Init();
    fault.Init();
    debug.Init();
    sys.ledon(0);							// 01
debug.str("Starting test-colorled...\n");
    meminit(0x2007C100, 0x7F00, 0);	// FIXME

    timer.NewBlock(TimerID);
    ab = app.pAppBlock(app.NewBlock(2));

    ab.Init();
    u = uart.Init(sys.DebugPort);		// for debug print
    loop
    {
    	c = debug.Empty();			// for debug print
    	if c != 0 then				// for debug print
    	    u.Send(c);				// for debug print
	block.Sched();
//        wait.Wait();
    }

    return 0;
}

