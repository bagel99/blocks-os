import sys;
import trace;	// use trace as debug port
import debug;
import uart;

package debug
{   const db_timer = 3;
    const db_block   = 2;
    const db_connect = 1;
}

import fault;
import syscb;
import sysctl;
import nvic;

import block;

const TimerID: block.BlockID = 1;

import timer;
//import wait;

package app
{
    const db = 1;
    alias event.Event  as Event;
    alias event.pEvent as pEvent;
    alias timer.TimerEvent  as TimerEvent;
    alias timer.pTimerEvent as pTimerEvent;
    alias block.Block  as Block;
    alias block.pBlock as pBlock;

    var last: _uint8: in, out;

    alias block.Block as AppBlock;
    alias block.pBlock as pAppBlock;

    proc (ab: pAppBlock) SetTimer(seconds: _uint16)
    {
debug.str("app.SetTimer: "); debug.uint16(seconds); debug.nl();
	timer.StartSeconds(ab.id, 0, seconds);
    }

    proc (ab: pAppBlock) CancelTimer()
    {
	timer.Stop(ab.id, 0);
   }


    proc Run(b: pBlock, e: pEvent)
    {   var te: pTimerEvent;
    	var rearm: boolean;

	rearm = false;    
	te = pTimerEvent(e);
	debug.str("app.Timer: ");
	if e.code
	is TSTOPPED then
	{   debug.str("cancelled");
	}
	is TDONE then
	{   debug.str("done");
	    rearm = true;
	}
	else
	    debug.str("unknown event");
	debug.nl();
	if rearm then
	{
	    te.RestartSeconds(b.id, 0,2);   
	}
	else
	    event.Free(e);	
    }

    proc (ab: pAppBlock) Init()
    {
if db > 0 then debug.str("app.Init\n");
	ab.SetTimer(9);
	ab.CancelTimer();		// cancel first in queue
	ab.SetTimer(2);

    }

    proc NewBlock(id: block.BlockID): pBlock
    {   var ab: pAppBlock;

	ab = _new(AppBlock);
if db > 0 then { debug.str("app.AppBlock ");
debug.uint8(id); debug.chr(' ');
debug.hex(_uint(ab)); debug.nl(); }
	ab.BlockInit(id, Run);
	return ab;
    }
}

proc meminit(addr: _address, size: _uint, pool: _uint): : external;

proc main(): _int
{
    var ab: app.pAppBlock;
    var u: uart.Uart;				// for debug print
    var c: _byte;				// for debug print

    sys.Init();
    sysctl.Init();
    fault.Init();
    debug.Init();
    sys.ledon(0);							// 01
debug.str("Starting test-timer...\n");
    meminit(0x2007C100, 0x7F00, 0);	// FIXME

    timer.NewBlock(TimerID);
    ab = app.pAppBlock(app.NewBlock(2));

    timer.Delay_ms(50);
    sys.ledon(3);							// 01

    timer.Delay_ms(500);
    sys.ledon(2);							// 01

    timer.Delay_us(50);
    sys.ledon(1);							// 01


    ab.Init();
    u = uart.Init(sys.DebugPort);		// for debug print
    loop
    {
    	c = debug.Empty();			// for debug print
    	if c != 0 then				// for debug print
    	    u.Send(c);				// for debug print
	block.Sched();
//        wait.Wait();
    }

    return 0;
}

