// TEST: Test lower level internet via ping display address in LCD

import sys;
import trace;
import debug;
import uart;	// use trace as debug port

package debug
{
    const db_fault   = 1;
    const db_block   = 1;
    const db_timer   = 1;
    const db_eth     = 1;
    const db_ipv4    = 1;
    const db_ipv6    = 1;
}

import fault;
import syscb;
import sysctl;
import nvic;

import mbuf;
import block;

var MyMAC:  [6]_byte;
const TimerID: block.BlockID = 1;
const EthID:   block.BlockID = 15;
const IPv4ID:  block.BlockID = 14;
const IPv6ID:  block.BlockID = 13;


// Chip stuff
import chip;	// for GetSerialNumber()
import timer;
import enetsys;

import inet;
const MyIPv4Addr: inet.IPv4Addr = { 0,0,0,0 };	// force DHCP
const MyIPv4Mask: inet.IPv4Addr = { 0,0,0,0 };
import ipv6;
import ipv4;

import lcd;
import font_mono5x8;  alias font_mono5x8 as myfont;
//import font_sans20x27b;  alias font_sans20x27b as myfont;

var ds: lcd.State;	// FIXME - dynamic allocation

alias event.Event as Event;
alias event.pEvent as pEvent;
alias block.Block as Block;
alias block.pBlock as pBlock;
alias block.BlockID as BlockID;

var HeapStart: _memory: external("_end");

proc wait()::external;

proc meminit(addr: _address, size: _uint, pool: _uint): : external;

const Connections: []block.ConnectionInfo =
{   {   IPv4ID, EthID,   LOWER,  1, 0 },
    {	EthID,  IPv4ID,  UPPER,  1, _uint16(eth.Proto.IPV4) },
    {	EthID,  IPv4ID,  UPPER,  1+0x80, 0x0806 },
    {   IPv6ID, EthID,   LOWER,  1, 0 },
    {	EthID,  IPv6ID,  UPPER,  1, _uint16(eth.Proto.IPV6) },
};


proc main(): _int
{   var serialno: _uint32;

    var ip4: ipv4.pIPv4Block;
    var ip6: ipv6.pIPv6Block;
    
    sys.Init();
    sysctl.Init();
    fault.Init();
    debug.Init();
    sys.ledon(0);							// 01
debug.str("Starting test-inet-lcd...\n");
    meminit(0x2007C100, 0x7F00, 0);	// FIXME
    // create MAC from serial number
    serialno = chip.GetSerialNumber();
    MyMAC[0] = 0x02;
    MyMAC[1] = 0x00;
    MyMAC[2] = _byte(serialno >> 24);
    MyMAC[3] = _byte(serialno >> 16);
    MyMAC[4] = _byte(serialno >> 8);
    MyMAC[5] = _byte(serialno);
    debug.str("MyMAC="); ipv6.MACPrint(MyMAC, 6); debug.nl();

    timer.NewBlock(TimerID);
    eth.NewBlock(EthID);
    ip4 = ipv4.pIPv4Block(ipv4.NewBlock(IPv4ID));
    ip6 = ipv6.pIPv6Block(ipv6.NewBlock(IPv6ID));
    block.InitConnections(Connections, Connections?len);
    {   var e: pEvent;
	e = event.New(START);
	IPv4ID.Send(e);
	e = event.New(START);
	IPv6ID.Send(e);
    }

    sys.ledon(1);							// 11
    ds.Init();
    ds.SetFont(myfont.fonttab);
    
    var buf: [40]_byte;
    var addr4: ipv4.IPv4Addr;
    var addr6: ipv6.IPv6Addr;
    var n: _uint;
    var once4: _boolean = false;
    var once6: _boolean = false;
	
    var u: uart.Uart;				// for debug print
    var c: _byte;				// for debug print
    u = uart.Init(sys.DebugPort);		// for debug print
    loop
    {
	if !once4 then
	{   if ip4.GetAddress(1, addr4) != 0 then
	    {	n = ipv4.AddrToText(addr4, buf[0:15]);
		buf[n] = 0;
		ds.SetXY(0,0);
		ds.ShowString(buf);
		ds.Refresh();
		sys.ledon(3);						// 1111
		once4 = true;
	    }
	}
	if !once6 then
	{   if ip6.GetAddress(1, addr6) != 0 then
	    {   n = ipv6.AddrToText(addr6, buf[0:40]);
		buf[n] = 0;
		ds.SetXY(0,10);
		ds.ShowString(buf);
		ds.Refresh();
		sys.ledon(2);						// 111
		once6 = true;
	    }
	}
    	c = debug.Empty();			// for debug print
    	if c != 0 then				// for debug print
    	    u.Send(c);				// for debug print
	block.Sched();
    	/* wait(); screws jtag */
    }

    return 0;
}

