import sys;
package debug
{   const db_timer = 0;
    const db_block   = 2;
    const db_connect = 1;
    const db_usbhost = 3;
    const NoWrap = false;
    const BufSiz = 24576;
}

import trace;	// use trace as debug port
import debug;
import uart;
var u: uart.Uart;				// for debug print

proc Fatal()
{
    var c: _byte;				// for debug print
    loop
    {
    	c = debug.Empty();			// for debug print
    	if c != 0 then				// for debug print
    	    u.Send(c);				// for debug print
    }
    loop {}
}

//import memcheck;    

var button: boolean: in, out;
var once: boolean = false;



import fault;
import syscb;
import sysctl;
import nvic;

import block;

const TimerID:   block.BlockID = 1;
const USBENUMID: block.BlockID = 2;
const USBHOSTMSC:block.BlockID = 3;
const USBHOSTID: block.BlockID = 12;

import timer;

import usb;

import usbevent;
import usbhost;
import usbhost_msc;
import usbhost_enum;

//import wait;


proc meminit(addr: _address, size: _uint, pool: _uint): : external;
    

proc main(): _int
{
    var c: _byte;				// for debug print
    var chan1, chan2: _uint;
    var ok: boolean;

    sys.Init();
    sysctl.Init();
    fault.Init();
    debug.Init();
    sys.ledon(0);
debug.str("Starting test-usbhost-msc...\n");
    meminit(0x2007C400, 0x7C00, 0);	// FIXME - space reserved for usbhost RAM
    sys.ledon(1);

    usbenum.NewBlock(USBENUMID);
    usbhost.NewBlock(USBHOSTID);
    usbhostmsc.NewBlock(USBHOSTMSC);
    sys.ledon(2);

    var e: event.pEvent;
    e = event.Alloc(START);
    USBENUMID.Send(e);
    e = event.Alloc(START);
    USBHOSTMSC.Send(e);

    sys.ledon(3);
    u = uart.Init(sys.DebugPort);		// for debug print
    loop
    {
    	c = debug.Empty();			// for debug print
    	if c != 0 then				// for debug print
    	    u.Send(c);				// for debug print
	block.Sched();
	if button && !once then
	{   once = true;
	    usbhost.DumpAll();
	}
//        wait.Wait();
    }

    return 0;
}

