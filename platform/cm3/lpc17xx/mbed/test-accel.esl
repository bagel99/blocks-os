import sys;
import trace;	// use trace as debug port
import debug;
import uart;

package debug
{   const db_timer = 0;
    const db_block = 0;
    const db_i2c   = 2;
}

import fault;
import syscb;
import sysctl;
import nvic;

import block;

const TimerID: block.BlockID = 1;
const AppID:   block.BlockID = 2;

import timer;
import mma7660;
//import wait;

package app
{
    const db = 1;
    alias event.Event  as Event;
    alias event.pEvent as pEvent;
    alias timer.TimerEvent  as TimerEvent;
    alias timer.pTimerEvent as pTimerEvent;
    alias block.Block  as Block;
    alias block.pBlock as pBlock;
    alias mma7660 as acc;

    type AppBlock(Block):
    {   ics: i2c.State;
	acs: acc.State;
    };
    type pAppBlock: @AppBlock;

    proc (ab: pAppBlock) GetTilt()
    {   var tilt: _int8;

	tilt = ab.acs.ReadTilt();
debug.str("Tilt="); debug.hex8(tilt); debug.chr(' ');
	if tilt & 0b11
	is 0b01 then debug.str("front ");
	is 0b10 then debug.str("back ");
	if (tilt >> 2) & 0b111
	is 0b001 then debug.str("left");
	is 0b010 then debug.str("right");
	is 0b101 then debug.str("down");
	is 0b110 then debug.str("up");
	debug.nl();
    }

    proc (ab: pAppBlock) SetTimer(seconds: _uint16)
    {
//debug.str("app.SetTimer: "); debug.uint16(seconds); debug.nl();
	timer.StartSeconds(0, seconds);
    }

    proc (ab: pAppBlock) CancelTimer()
    {
	timer.Stop(0);
    }


    proc Run(b: pBlock, e: pEvent)
    {   var te: pTimerEvent;
	var ab: pAppBlock;

	ab = pAppBlock(b);
	te = pTimerEvent(e);
// debug.str("app.Timer: ");
	if e.code
	is TSTOPPED then
	{
// debug.str("cancelled");
	    event.Free(e);	
	}
	is TDONE then
	{
// debug.str("done");
	    ab.GetTilt();
	    te.RestartSeconds(0, 5);
	}
	else
	{
// debug.str("unknown event");
	    event.Free(e);
	}	
    }

    proc (ab: pAppBlock) Init()
    { 
if db > 0 then debug.str("app.Init\n");
	block.SetContext(ab.id);
sys.ledon(2);
	ab.ics.Init(2);		// initialize I2C2
	ab.acs.Init(ab.ics);
sys.ledoff(2);

	ab.SetTimer(5);

    }

    proc NewBlock(id: block.BlockID): pBlock
    {   var ab: pAppBlock;

	ab = _new(AppBlock);
if db > 0 then { debug.str("app.AppBlock ");
debug.uint8(id); debug.chr(' ');
debug.hex(_uint(ab)); debug.nl(); }
	ab.BlockInit(id, Run);

	return ab;
    }
}

proc meminit(addr: _address, size: _uint, pool: _uint): : external;

proc main(): _int
{
    var ab: app.pAppBlock;
    var u: uart.Uart;				// for debug print
    var c: _byte;				// for debug print

    sys.Init();
    sysctl.Init();
    fault.Init();
    debug.Init();
    sys.ledon(0);
debug.str("Starting test-accel...\n");
    meminit(0x2007C100, 0x7F00, 0);	// FIXME

    timer.NewBlock(TimerID);
    ab = app.pAppBlock(app.NewBlock(AppID));
    ab.Init();
    sys.ledoff(0);

    u = uart.Init(sys.DebugPort);		// for debug print
    loop
    {
    	c = debug.Empty();			// for debug print
    	if c != 0 then				// for debug print
    	    u.Send(c);				// for debug print
	block.Sched();
//        wait.Wait();
    }

    return 0;
}

