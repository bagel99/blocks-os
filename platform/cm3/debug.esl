/*
 * Routines to print via debug serial port or trace buffer
 *
 * Copyright (c) 2012, Brian G. Lucas.  See LICENSE file.
 * $Id: debug.esl 338 2012-03-01 18:55:50Z bgl $
 */

proc getsp(): @[]_uint32: external;

/*
 * This extends package debug where the following was implemented:
 *   proc PutC(c: _byte);
 */


package debug
{
    const hexdigit: [16]_byte =
	{'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};

    proc nl()
    {
	PutC('\n');
    }

    proc chr(c: _byte)
    {
	PutC(c);
    }

    proc str(s: @[]_byte)
    {   var i: _uint;

	i = 0;
	while s[i] != 0 do
	{   PutC(s[i]);
	    i += 1;
	}
    }

    proc strn(s:@[]_byte, len:_uint)
    {   var i: _uint;

	i = 0;
	while i < len do
	{   PutC(s[i]);
	    i += 1;
	}
    }

    proc hex8(in: _uint8)
    {   var buf: [3]_byte;

	buf[0] = hexdigit[(in>>4)&0xF];
	buf[1] = hexdigit[in&0xF];
	buf[2] = 0;
	str(buf);
    }

    proc hex16(in: _uint16)
    {   var buf: [5]_byte;

	buf[0] = hexdigit[(in>>12)&0xF];
	buf[1] = hexdigit[(in>>8)&0xF];
	buf[2] = hexdigit[(in>>4)&0xF];
	buf[3] = hexdigit[in&0xF];
	buf[4] = 0;
	str(buf);
    }

    proc hex32(in: _uint32)
    {   var buf: [9]_byte;

	buf[0] = hexdigit[(in>>28)&0xF];
	buf[1] = hexdigit[(in>>24)&0xF];
	buf[2] = hexdigit[(in>>20)&0xF];
	buf[3] = hexdigit[(in>>16)&0xF];
	buf[4] = hexdigit[(in>>12)&0xF];
	buf[5] = hexdigit[(in>>8)&0xF];
	buf[6] = hexdigit[(in>>4)&0xF];
	buf[7] = hexdigit[in&0xF];
	buf[8] = 0;
	str(buf);
    }

    proc hex(in: _uint)::inline
    {
    	hex32(_uint(in));
    }

    proc uint32(in: _uint32)
    {   var buf: [11]_byte;
	var tmp: _uint32;
	var i: 0..12;

	i = 11;
	buf[i] = 0;
	if in != 0 then
	{   while in != 0 do
	    {   tmp = in / 10;
		i -= 1;
		buf[i] = in - (tmp * 10) + '0';
		in = tmp;
	    }
	}
	else
	{   i -= 1;
	    buf[i] = '0';
	}
	str(buf[i:12-i]);
    }

    proc uint16(in: _uint16): : inline
    {
	uint32(_uint32(in));
    }

    proc uint8(in: _uint8): : inline
    {
	uint32(_uint32(in));
    }

    proc uint(in: _uint): : inline
    {
	uint32(in);
    }

    proc int32(in: _int32)
    {   var ui: _uint32;

	if in < 0 then
	{   PutC('-');
	    ui = _uint32(-in);
	}
	else
	    ui = _uint32(in);
	uint32(ui);
    }

    proc int16(in: _int16): : inline
    {
	int32(_int32(in));
    }

    proc int8(in: _int16): : inline
    {
	int32(_int32(in));
    }

    proc int(in: _int): : inline
    {
	int32(in);
    }

    proc dumpb(msg: @[]_byte, adr: @_memory, len: _uint32)
    {   var i: _uint32;

	str(msg);
	i = 0;
	while i < len do
	{   if i&0xF == 0 then
	    {   chr('\n');
		hex32(_uint32(adr) + i);
		str(":");
	    }
	    chr(' ');
	    hex8(adr@[i]);
	    i += 1;
	}
	chr('\n');
    }

    proc dumpw(msg: @[]_byte, badr: @_memory, len: _uint32)
    {   var i: _uint32;
	type pwa: @[]_uint32;
	var adr: pwa;

	adr = pwa(badr);
	str(msg);
	i = 0;
	while i < len do
	{   if i&0x3 == 0 then
	    {   chr('\n');
		hex32(_uint32(adr) + 4*i);
		str(":");
	    }
	    chr(' ');
	    hex32(adr@[i]);
	    i += 1;
	}
	chr('\n');
    }

    var StackTop: _address: external("__vectors");
    
    proc dumpstack(msg: @[]_byte)
    {   var i, n: _uint;
    	var adr: @[]_uint32;

	adr = getsp();
	n = (_uint32(StackTop) - _uint32(adr)) / 4;	// FIXME: chip/sys dependent
	str(msg);
	i = 0;
	while i < n do
	{   if i&0x3 == 0 then
	    {   chr('\n');
		hex32(_uint32(adr) + 4*i);
		str(":");
	    }
	    chr(' ');
	    hex32(adr@[i]);
	    i += 1;
	}
	chr('\n');
    }
}

