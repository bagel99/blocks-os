/*
 * Board and System stuff
 *
 * Copyright (c) 2012, Brian G. Lucas.  See LICENSE file.
 * $Id$
 */

package sys
{
    const CpuXtal = 8_000_000;
    const CoreClock = 72_000_000;
    const useHSE: boolean = true;
    const TicksPerSecond = 100;

    const TopOfStack = 0x2000A000;
}

import rcc;
import fpu;
import systick;
import gpio;
import syscfg;
import exti;
import nvic;

package sys
{
   // ST labeled the 8 user LEDs as LED3..LED10.
    const LED3:   gpio.PortDesc = {.port=E,.bit= 9};
    const LED4:   gpio.PortDesc = {.port=E,.bit= 8};
    const LED5:   gpio.PortDesc = {.port=E,.bit=10};
    const LED6:   gpio.PortDesc = {.port=E,.bit=15};
    const LED7:   gpio.PortDesc = {.port=E,.bit=11};
    const LED8:   gpio.PortDesc = {.port=E,.bit=14};
    const LED9:   gpio.PortDesc = {.port=E,.bit=12};
    const LED10:  gpio.PortDesc = {.port=E,.bit=13};
    const BUT1:   gpio.PortDesc = {.port=A,.bit= 0};
    // The USER button controls an external interrupt.
    const BTNIntr: exti.Desc = { INT, .rise=true };
    // The ST Demo program configures port E14 as USB_DISCONNECT,
    // but it is already used for a LED.
    // const USBDiscon: gpio.PortInit = { {14, E} };
    const L18Intr: exti.Desc = { INT, .rise=true };

    const PinOut: [] gpio.PortInit =
    {	// LEDs
	{ LED3,			OUT, PP, S50, UP, 0 },
	{ LED4,			OUT, PP, S50, UP, 0 },
	{ LED5,			OUT, PP, S50, UP, 0 },
	{ LED6,			OUT, PP, S50, UP, 0 },
	{ LED7,			OUT, PP, S50, UP, 0 },
	{ LED8,			OUT, PP, S50, UP, 0 },
	{ LED9,			OUT, PP, S50, UP, 0 },
	{ LED10,		OUT, PP, S50, UP, 0 },
	// buttons
	{ BUT1,			 IN, .pu=NONE },
	// usb
	{{.port=A,.bit=11},	ALT, PP, S50, NONE, 14 }, // alt func 14
	{{.port=A,.bit=12},	ALT, PP, S50, NONE, 14 }, // alt func 14
    };

    const LEDPorts: []gpio.PortDesc =
    {	LED3, LED4, LED5, LED6, LED7, LED8, LED9, LED10
    };

    proc ledon(which: _uint)
    {
	gpio.Set(LEDPorts[which]);
    }

    proc ledoff(which: _uint)
    {
	gpio.Clr(LEDPorts[which]);
    }

    proc ledtoggle(which: _uint)
    {
	if gpio.Tst(LEDPorts[which]) then
	    gpio.Clr(LEDPorts[which]);
	else
	    gpio.Set(LEDPorts[which]);
    }

    var delay: _uint: in, out;

    proc DelaymS(ms: _uint)
    {
	delay = ms / (1000/TicksPerSecond);
	do
	{   while !systick.st.ctrl.cntflg do {}
	    delay -= 1;
	} while delay != 0;
    }
    
    proc Tick(): : global("SYSTICK_IRQ")
    {
    	if delay != 0 then
    	    delay -= 1;
    }


if _defined(UserButtonPressed) then {
    proc Button(): : global("EINT0_IRQ")
    {
	if exti.Pending(BUT1.bit) then
	{   if UserButtonPressed >= 2 then
		UserButtonPressed = 0;
	    else
		UserButtonPressed += 1;
            exti.ClearIntr(BUT1.bit);
	}		
    }
}


    proc Init()
    {   var i: _uint;

    	rcc.Init(useHSE);
    	fpu.Init();
    	systick.Init(rcc.GetAHBFreq(), TicksPerSecond);
//    	systick.EnableIntr(0xF0);
//    	systick.EnableIntr(0);
	// configure GPIO pins
	for i from 0 to PinOut?len-1 do
	    gpio.Init(PinOut[i]);
	exti.GPIOEnable(BUT1, BTNIntr);
	nvic.SetPriority(6, 0b00_000000);
	nvic.Enable(6);
	exti.Enable(18, L18Intr);
    }
}

