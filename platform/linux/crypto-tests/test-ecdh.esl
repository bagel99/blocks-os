/*
 * The NIST CAVS tests for Eliptic Curve Diffie-Hellman
 *
 * Only the first three tests for each curve are implemented.
 */

import debug;
alias debug as err;

proc PrintN(msg: @[]_byte, x: @[]_uint32, n: _uint)
{   var i: _uint;

    err.str(msg); err.chr('=');
    for i from 0 to n-1 do
    {   err.hex32(x[i]);
	if i < n-1 then
	{   if (i&3) == 3 then err.nl(); else err.chr(' ');
	}
    }
    err.nl();
}


var nerr: _uint = 0;

proc Check(test: boolean, msg: @[]_byte, n: _uint): boolean
{
    if !test then
    {   err.str("Test failed: ");
	err.str(msg);
	err.str(" #");
	err.uint(n);
	err.nl();
	nerr += 1;
    }
    return test;
}

type Test:
{   Sx: @[]_byte;	// QCAVSx
    Sy: @[]_byte;	// QCAVSy
    d:  @[]_byte;	// dIUT
    Tx: @[]_byte;	// QIUTx
    Ty: @[]_byte;	// QIUTy
    Z:  @[]_byte;	// ZIUT
};


import secp192r1;
package secp192r1
{
  const tests: []Test =
  {
    {
    "42EA6DD9969DD2A61FEA1AAC7F8E98EDCC896C6E55857CC0",
    "DFBE5D7C61FAC88B11811BDE328E8A0D12BF01A9D204B523",
    "F17D3FEA367B74D340851CA4270DCB24C271F445BED9D527",
    "B15053401F57285637EC324C1CD2139E3A67DE3739234B37",
    "F269C158637482AAD644CD692DD1D3EF2C8A7C49E389F7F6",
    "803D8AB2E5B6E6FCA715737C3A82F7CE3C783124F6D51CD0"
    },{
    "DEB5712FA027AC8D2F22C455CCB73A91E17B6512B5E030E7",
    "7E2690A02CC9B28708431A29FB54B87B1F0C14E011AC2125",
    "56E853349D96FE4C442448DACB7CF92BB7A95DCF574A9BD5",
    "C00D435716FFEA53FD8C162792414C37665187E582716539",
    "AB711C62AA71A5A18E8A3C48F89DC6FA52FAC0108E52A8A0",
    "C208847568B98835D7312CEF1F97F7AA298283152313C29D"
    },{
    "4EDAA8EFC5A0F40F843663EC5815E7762DDDC008E663C20F",
    "0A9F8DC67A3E60EF6D64B522185D03DF1FC0ADFD42478279",
    "C6EF61FE12E80BF56F2D3F7D0BB757394519906D55500949",
    "E184BC182482F3403C8787B83842477467FCD011DB0F6C64",
    "F9D1C14142F40DE8639DB97D51A63D2CCE1007CCF773CDCB",
    "87229107047A3B611920D6E3B2C0C89BEA4F49412260B8DD"
    }
  };

    var pmsecret: [K*8+1]_byte;

    proc TestEcdh()
    {   var priv: Vect;
	var pub: Point;
	var out: Point;
	var i: _uint;
	const which = "secp192r1";

	for i from 0 to tests?len-1 do
	{
	    bignum.ImportHexStr(priv, tests[i].d,  K);
	    bignum.ImportHexStr(pub.x, tests[i].Sx, K);
	    bignum.ImportHexStr(pub.y, tests[i].Sy, K);
	    ECDH(pub, priv, out);
	    bignum.ExportHexStr(pmsecret, out.x, K);
	    if !Check(pmsecret[0:K*8] == tests[i].Z@, which, i+1) then
	    {
		debug.str("Z="); debug.str(pmsecret); debug.nl();
	    }
	}
    }
}

import secp224r1;
package secp224r1
{
  const tests: []Test =
  {
    {
    "AF33CD0629BC7E996320A3F40368F74DE8704FA37B8FAB69ABAAE280",
    "882092CCBBA7930F419A8A4F9BB16978BBC3838729992559A6F2E2D7",
    "8346A60FC6F293CA5A0D2AF68BA71D1DD389E5E40837942DF3E43CBD",
    "8DE2E26ADF72C582D6568EF638C4FD59B18DA171BDF501F1D929E048",
    "4A68A1C2B0FB22930D120555C1ECE50EA98DEA8407F71BE36EFAC0DE",
    "7D96F9A3BD3C05CF5CC37FEB8B9D5209D5C2597464DEC3E9983743E8"
    },{
    "13BFCD4F8E9442393CAB8FB46B9F0566C226B22B37076976F0617A46",
    "EEB2427529B288C63C2F8963C1E473DF2FCA6CAA90D52E2F8DB56DD4",
    "043CB216F4B72CDF7629D63720A54AEE0C99EB32D74477DAC0C2F73D",
    "2F90F5C8EAC9C7DECDBB97B6C2F715AB725E4FE40FE6D746EFBF4E1B",
    "66897351454F927A309B269C5A6D31338BE4C19A5ACFC32CF656F45C",
    "EE93CE06B89FF72009E858C68EB708E7BC79EE0300F73BED69BBCA09"
    },{
    "756DD806B9D9C34D899691ECB45B771AF468EC004486A0FDD283411E",
    "4D02C2CA617BB2C5D9613F25DD72413D229FD2901513AA29504EEEFB",
    "5AD0DD6DBABB4F3C2EA5FE32E561B2CA55081486DF2C7C15C9622B08",
    "005BCA45D793E7FE99A843704ED838315AB14A5F6277507E9BC37531",
    "43E9D421E1486AE5893BFD23C210E5C140D7C6B1ADA59D842C9A98DE",
    "3FCC01E34D4449DA2A974B23FC36F9566754259D39149790CFA1EBD3"
    }
  };

    var pmsecret: [K*8+1]_byte;

    proc TestEcdh()
    {   var priv: Vect;
	var pub: Point;
	var out: Point;
	var i: _uint;
	const which = "secp224r1";

	for i from 0 to tests?len-1 do
	{
	    bignum.ImportHexStr(priv, tests[i].d,  K);
	    bignum.ImportHexStr(pub.x, tests[i].Sx, K);
	    bignum.ImportHexStr(pub.y, tests[i].Sy, K);
	    ECDH(pub, priv, out);
	    bignum.ExportHexStr(pmsecret, out.x, K);
	    if !Check(pmsecret[0:K*8] == tests[i].Z@, which, i+1) then
	    {
		debug.str("Z="); debug.str(pmsecret); debug.nl();
	    }
	}
    }
}

import secp256r1;
package secp256r1
{
  const tests: []Test =
  {
    {
    "700C48F77F56584C5CC632CA65640DB91B6BACCE3A4DF6B42CE7CC838833D287",
    "DB71E509E3FD9B060DDB20BA5C51DCC5948D46FBF640DFE0441782CAB85FA4AC",
    "7D7DC5F71EB29DDAF80D6214632EEAE03D9058AF1FB6D22ED80BADB62BC1A534",
    "EAD218590119E8876B29146FF89CA61770C4EDBBF97D38CE385ED281D8A6B230",
    "28AF61281FD35E2FA7002523ACC85A429CB06EE6648325389F59EDFCE1405141",
    "46FC62106420FF012E54A434FBDD2D25CCC5852060561E68040DD7778997BD7B" },
    {
    "809F04289C64348C01515EB03D5CE7AC1A8CB9498F5CAA50197E58D43A86A7AE",
    "B29D84E811197F25EBA8F5194092CB6FF440E26D4421011372461F579271CDA3",
    "38F65D6DCE47676044D58CE5139582D568F64BB16098D179DBAB07741DD5CAF5",
    "119F2F047902782AB0C9E27A54AFF5EB9B964829CA99C06B02DDBA95B0A3F6D0",
    "8F52B726664CAC366FC98AC7A012B2682CBD962E5ACB544671D41B9445704D1D",
    "057D636096CB80B67A8C038C890E887D1ADFA4195E9B3CE241C8A778C59CDA67" },
    {
    "A2339C12D4A03C33546DE533268B4AD667DEBF458B464D77443636440EE7FEC3",
    "EF48A3AB26E20220BCDA2C1851076839DAE88EAE962869A497BF73CB66FAF536",
    "1ACCFAF1B97712B85A6F54B148985A1BDC4C9BEC0BD258CAD4B3D603F49F32C8",
    "D9F2B79C172845BFDB560BBB01447CA5ECC0470A09513B6126902C6B4F8D1051",
    "F815EF5EC32128D3487834764678702E64E164FF7315185E23AFF5FACD96D7BC",
    "2D457B78B4614132477618A5B077965EC90730A8C81A1C75D6D4EC68005D67EC" },
  };

    var pmsecret: [K*8+1]_byte;

    proc TestEcdh()
    {   var priv: Vect;
	var pub: Point;
	var out: Point;
	var i: _uint;
	const which = "secp256r1";

	for i from 0 to tests?len-1 do
	{
	    bignum.ImportHexStr(priv, tests[i].d,  K);
	    bignum.ImportHexStr(pub.x, tests[i].Sx, K);
	    bignum.ImportHexStr(pub.y, tests[i].Sy, K);
	    ECDH(pub, priv, out);
	    bignum.ExportHexStr(pmsecret, out.x, K);
	    if !Check(pmsecret[0:K*8] == tests[i].Z@, which, i+1) then
	    {
		debug.str("Z="); debug.str(pmsecret); debug.nl();
	    }
	}
    }
}

import secp384r1;
package secp384r1
{
  const tests: []Test =
  {
    {
    "A7C76B970C3B5FE8B05D2838AE04AB47697B9EAF52E764592EFDA27FE7513272"
    "734466B400091ADBF2D68C58E0C50066",
    "AC68F19F2E1CB879AED43A9969B91A0839C4C38A49749B661EFEDF243451915E"
    "D0905A32B060992B468C64766FC8437A",
    "3CC3122A68F0D95027AD38C067916BA0EB8C38894D22E1B15618B6818A661774"
    "AD463B205DA88CF699AB4D43C9CF98A1",
    "9803807F2F6D2FD966CDD0290BD410C0190352FBEC7FF6247DE1302DF86F25D3"
    "4FE4A97BEF60CFF548355C015DBB3E5F",
    "BA26CA69EC2F5B5D9DAD20CC9DA711383A9DBE34EA3FA5A2AF75B46502629AD5"
    "4DD8B7D73A8ABB06A3A3BE47D650CC99",
    "5F9D29DC5E31A163060356213669C8CE132E22F57C9A04F40BA7FCEAD493B457"
    "E5621E766C40A2E3D4D6A04B25E533F1" },
    {
    "30F43FCF2B6B00DE53F624F1543090681839717D53C7C955D1D69EFAF0349B73"
    "63ACB447240101CBB3AF6641CE4B88E0",
    "25E46C0C54F0162A77EFCC27B6EA792002AE2BA82714299C860857A68153AB62"
    "E525EC0530D81B5AA15897981E858757",
    "92860C21BDE06165F8E900C687F8EF0A05D14F290B3F07D8B3A8CC6404366E5D"
    "5119CD6D03FB12DC58E89F13DF9CD783",
    "EA4018F5A307C379180BF6A62FD2CECEEBEEB7D4DF063A66FB838AA352434197"
    "91F7E2C9D4803C9319AA0EB03C416B66",
    "68835A91484F05EF028284DF6436FB88FFEBABCDD69AB0133E6735A1BCFB3720"
    "3D10D340A8328A7B68770CA75878A1A6",
    "A23742A2C267D7425FDA94B93F93BBCC24791AC51CD8FD501A238D40812F4CBF"
    "C59AAC9520D758CF789C76300C69D2FF" },
    {
    "1AEFBFA2C6C8C855A1A216774550B79A24CDA37607BB1F7CC906650EE4B3816D"
    "68F6A9C75DA6E4242CEBFB6652F65180",
    "419D28B723EBADB7658FCEBB9AD9B7ADEA674F1DA3DC6B6397B55DA0F61A3EDD"
    "ACB4ACDB14441CB214B04A0844C02FA3",
    "12CF6A223A72352543830F3F18530D5CB37F26880A0B294482C8A8EF8AFAD09A"
    "A78B7DC2F2789A78C66AF5D1CC553853",
    "FCFCEA085E8CF74D0DCED1620BA8423694F903A219BBF901B0B59D6AC81BAAD3"
    "16A242BA32BDE85CB248119B852FAB66",
    "972E3C68C7AB402C5836F2A16ED451A33120A7750A6039F3FF15388EE622B706"
    "5F7122BF6D51AEFBC29B37B03404581B",
    "3D2E640F350805EED1FF43B40A72B2ABED0A518BCEBE8F2D15B111B6773223DA"
    "3C3489121DB173D414B5BD5AD7153435" },
  };

    var pmsecret: [K*8+1]_byte;

    proc TestEcdh()
    {   var priv: Vect;
	var pub: Point;
	var out: Point;
	var i: _uint;
	const which = "secp384r1";

	for i from 0 to tests?len-1 do
	{
	    bignum.ImportHexStr(priv, tests[i].d,  K);
	    bignum.ImportHexStr(pub.x, tests[i].Sx, K);
	    bignum.ImportHexStr(pub.y, tests[i].Sy, K);
	    ECDH(pub, priv, out);
	    bignum.ExportHexStr(pmsecret, out.x, K);
	    if !Check(pmsecret[0:K*8] == tests[i].Z@, which, i+1) then
	    {
		debug.str("Z="); debug.str(pmsecret); debug.nl();
	    }
	}
    }
}

import secp521r1;
package secp521r1
{
  const tests: []Test =
  {
    {
    "000000685A48E86C79F0F0875F7BC18D25EB5FC8C0B07E5DA4F4370F3A949034"
    "0854334B1E1B87FA395464C60626124A4E70D0F785601D37C09870EBF1766668"
    "77A2046D",
    "000001BA52C56FC8776D9E8F5DB4F0CC27636D0B741BBE05400697942E80B739"
    "884A83BDE99E0F6716939E632BC8986FA18DCCD443A348B6C3E522497955A4F3"
    "C302F676",
    "0000017EECC07AB4B329068FBA65E56A1F8890AA935E57134AE0FFCCE8027351"
    "51F4EAC6564F6EE9974C5E6887A1FEFEE5743AE2241BFEB95D5CE31DDCB6F9ED"
    "B4D6FC47",
    "000000602F9D0CF9E526B29E22381C203C48A886C2B0673033366314F1FFBCBA"
    "240BA42F4EF38A76174635F91E6B4ED34275EB01C8467D05CA80315BF1A7BBD9"
    "45F550A5",
    "000001B7C85F26F5D4B2D7355CF6B02117659943762B6D1DB5AB4F1DBC44CE7B"
    "2946EB6C7DE342962893FD387D1B73D7A8672D1F236961170B7EB3579953EE5C"
    "DC88CD2D",
    "0000005FC70477C3E63BC3954BD0DF3EA0D1F41EE21746ED95FC5E1FDF90930D5E13"
    "6672D72CC770742D1711C3C3A4C334A0AD9759436A4D3C5BF6E74B9578FAC148"
    "C831" },
    {
    "000001DF277C152108349BC34D539EE0CF06B24F5D3500677B4445453CCC2140"
    "9453AAFB8A72A0BE9EBE54D12270AA51B3AB7F316AA5E74A951C5E53F74CD95F"
    "C29AEE7A",
    "0000013D52F33A9F3C14384D1587FA8ABE7AED74BC33749AD9C570B471776422"
    "C7D4505D9B0A96B3BFAC041E4C6A6990AE7F700E5B4A6640229112DEAFA0CD8B"
    "B0D089B0",
    "000000816F19C1FB10EF94D4A1D81C156EC3D1DE08B66761F03F06EE4BB9DCEB"
    "BBFE1EAA1ED49A6A990838D8ED318C14D74CC872F95D05D07AD50F621CEB620C"
    "D905CFB8",
    "000000D45615ED5D37FDE699610A62CD43BA76BEDD8F85ED31005FE00D6450FB"
    "BD101291ABD96D4945A8B57BC73B3FE9F4671105309EC9B6879D0551D930DAC8"
    "BA45D255",
    "000001425332844E592B440C0027972AD1526431C06732DF19CD46A242172D4D"
    "D67C2C8C99DFC22E49949A56CF90C6473635CE82F25B33682FB19BC33BD910ED"
    "8CE3A7FA",
    "0000000B3920AC830ADE812C8F96805DA2236E002ACBBF13596A9AB254D44D0E91B6"
    "255EBF1229F366FB5A05C5884EF46032C26D42189273CA4EFA4C3DB6BD12A685"
    "3759" },
    {
    "00000092DB3142564D27A5F0006F819908FBA1B85038A5BC2509906A497DAAC6"
    "7FD7AEE0FC2DABA4E4334EEAEF0E0019204B471CD88024F82115D8149CC0CF4F"
    "7CE1A4D5",
    "0000016BAD0623F517B158D9881841D2571EFBAD63F85CBE2E581960C5D67060"
    "1A6760272675A548996217E4AB2B8EBCE31D71FCA63FCC3C08E91C1D8EDD91CF"
    "6FE845F8",
    "0000012F2E0C6D9E9D117CEB9723BCED02EB3D4EEBF5FEEAF8EE0113CCD8057B"
    "13DDD416E0B74280C2D0BA8ED291C443BC1B141CAF8AFB3A71F97F57C225C03E"
    "1E4D42B0",
    "000000717FCB3D4A40D103871EDE044DC803DB508AAA4AE74B70B9FB8D8DFD84"
    "BFECFAD17871879698C292D2FD5E17B4F9343636C531A4FAC68A35A93665546B"
    "9A878679",
    "000000F3D96A8637036993AB5D244500FFF9D2772112826F6436603D3EB234A4"
    "4D5C4E5C577234679C4F9DF725EE5B9118F23D8A58D0CC01096DAF70E8DFEC01"
    "28BDC2E8",
    "0000006B380A6E95679277CFEE4E8353BF96EF2A1EBDD060749F2F046FE571053740"
    "BBCC9A0B55790BC9AB56C3208AA05DDF746A10A3AD694DAAE00D980D944AABC6"
    "A08F" },

  };

    var pmsecret: [K*8+1]_byte;

    proc TestEcdh()
    {   var priv: Vect;
	var pub: Point;
	var out: Point;
	var i: _uint;
	const which = "secp521r1";

	for i from 0 to tests?len-1 do
	{
	    bignum.ImportHexStr(priv, tests[i].d,  K);
	    bignum.ImportHexStr(pub.x, tests[i].Sx, K);
	    bignum.ImportHexStr(pub.y, tests[i].Sy, K);
	    ECDH(pub, priv, out);
	    bignum.ExportHexStr(pmsecret, out.x, K);
	    if !Check(pmsecret[0:K*8] == tests[i].Z@, which, i+1) then
	    {
		debug.str("Z="); debug.str(pmsecret); debug.nl();
	    }
	}
    }
}


proc main(): _int
{
    secp192r1.TestEcdh();
    secp224r1.TestEcdh();
    secp256r1.TestEcdh();
    secp384r1.TestEcdh();
    secp521r1.TestEcdh();
    return _int(nerr);
}


