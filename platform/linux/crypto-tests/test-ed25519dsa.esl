import debug;
alias debug as err;

proc PrintWords(s: @[]_byte, x: @[]_uint32)
{   var i: _uint;

    err.str(s);  err.str(" =\n");
    for i from 0 to 7
    do
    {
	err.hex32(x[i]); err.chr(',');
    }
    err.nl();
}

proc PrintHexBytes(s: @[]_byte, x: @[]_uint8, len: _uint)
{   var i: _uint;

    err.str(s);  err.str(" =0x");
    for i from 0 to len-1 do
    {	if i != 0 && i & 31 == 0 then err.nl();
	err.hex8(x[i]);
    }
    err.nl();
}

// Keys are stored little endian, i.e. ls byte first
// Print out big endian
proc PrintKeyBytes(s: @[]_byte, x: @[]_uint8, len: _uint)
{
    err.str(s);  err.str(" = 0x");
    while len > 0 do
    {	len -= 1;
	err.hex8(x[len]);
    }
    err.nl();
}

proc Hex1(x: _byte): _byte
{
    if x
    is '0'..'9' then return x-'0';
    is 'A'..'F' then return x-'A'+10;
    is 'a'..'f' then return x-'a'+10;
    return 0;	// error
}

proc FromHex(x: @[]_byte, n: _uint, b: @[]_byte)
{   var i: _uint;

    if n == 0 then return;
    for i from 0 to n-1 do
    {   b[i] = (Hex1(x[2*i]) << 4) | (Hex1(x[2*i+1]));
    }
}

var nerr: _uint = 0;

import ed25519dsa;

type TestS:
{
    pvtk: @[]_byte;	// private key
    pubk: @[]_byte;	// public key x
    msg:  @[]_byte;	// message
    len:  _uint;	// message length
    sign: @[]_byte;	// signature R,S
};

// Test cases from RFC 8032
const tests: []TestS =
{
/*
    { // TEST 1
	.pvtk = "9d61b19deffd5a60ba844af492ec2cc44449c5697b326919703bac031cae7f60",
	.pubk = "d75a980182b10ab7d54bfed3c964073a0ee172f3daa62325af021a68f707511a",
	.msg =  "",
	.len = 0,
	.sign = "e5564300c360ac729086e2cc806e828a84877f1eb8e5d974d873e06522490155"
		"5fb8821590a33bacc61e39701cf9b46bd25bf5f0595bbe24655141438e7a100b"
    },
*/
    { // TEST 2
	.pvtk = "4ccd089b28ff96da9db6c346ec114e0f5b8a319f35aba624da8cf6ed4fb8a6fb",
	.pubk = "3d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c",
	.msg  = "72",
	.len  = 1,
	.sign = "92a009a9f0d4cab8720e820b5f642540a2b27b5416503f8fb3762223ebdb69da"
		"085ac1e43e15996e458f3613d0f11d8c387b2eaeb4302aeeb00d291612bb0c00"
    },
/*
    { // TEST 3
	.pvtk = "c5aa8df43f9f837bedb7442f31dcb7b166d38535076f094b85ce3a2e0b4458f7",
	.pubk = "fc51cd8e6218a1a38da47ed00230f0580816ed13ba3303ac5deb911548908025",
	.msg  = "af82",
	.len  = 2,
	.sign = "6291d657deec24024827e69c3abe01a30ce548a284743a445e3680d7db5ac3ac"
		"18ff9b538d16f290ae67f760984dc6594a7c15e9716ed28dc027beceea1ec40a"
    },
*/
};

package ed25519
{
    var buf: [1024]_byte;

    proc TestSign()
    {	var i: _uint;
	var pvtk, pubk: Key;
	var asign, tsign: [64]_byte;

	for i from 0 to tests?len-1 do
	{
	    FromHex(tests[i].pvtk, Key?len, pvtk);
	    FromHex(tests[i].pubk, Key?len, pubk);
	    FromHex(tests[i].msg,  tests[i].len, buf);
	    Sign(asign, pvtk, pubk, buf, tests[i].len);
PrintHexBytes("sign", asign, 64);
	}
    }
}

proc main(): _int
{
    ed25519.TestSign();

    return nerr;
}
