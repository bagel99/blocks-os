import debug;
alias debug as err;

proc PrintV(s: @[]_byte, x: @[]_uint32)
{   var i: _uint;

    err.str(s);  err.str(" = 0x");
    i = 8;
    do
    {	i -= 1;
	err.hex32(x[i]);
    } while i != 0;
    err.nl();
}

proc PrintHexBytes(s: @[]_byte, x: @[]_uint8)
{   var i: _uint;

    err.str(s);  err.str(" = 0x");
    for i from 0 to 31 do
	err.hex8(x[i]);
    err.nl();
}

// Keys are stored little endian, i.e. ls byte first
// Print out big endian
proc PrintKeyBytes(s: @[]_byte, x: @[]_uint8)
{   var i: _uint;

    err.str(s);  err.str(" = 0x");
    i = 32;
    while i > 0 do
    {	i -= 1;
	err.hex8(x[i]);
    }
    err.nl();
}

import ed25519;

// Test case from RFC 7748
var A_prv: ed25519.Key = {
	0x77,0x07,0x6d,0x0a,0x73,0x18,0xa5,0x7d,
	0x3c,0x16,0xc1,0x72,0x51,0xb2,0x66,0x45,
	0xdf,0x4c,0x2f,0x87,0xeb,0xc0,0x99,0x2a,
	0xb1,0x77,0xfb,0xa5,0x1d,0xb9,0x2c,0x2a };

var B_prv: ed25519.Key = {
	0x5d,0xab,0x08,0x7e,0x62,0x4a,0x8a,0x4b,
	0x79,0xe1,0x7f,0x8b,0x83,0x80,0x0e,0xe6,
	0x6f,0x3b,0xb1,0x29,0x26,0x18,0xb6,0xfd,
	0x1c,0x2f,0x8b,0x27,0xff,0x88,0xe0,0xeb };


    proc TestDH()
    {   var A_pub, B_pub: ed25519.Key;
	var A_shr, B_shr: ed25519.Key;

PrintKeyBytes("A_prv", A_prv);
PrintKeyBytes("B_prv", B_prv);
	ed25519.GenPubKey(A_prv, A_pub);
PrintKeyBytes("A_pub", A_pub);
	ed25519.GenPubKey(B_prv, B_pub);
PrintKeyBytes("B_pub", B_pub);
	ed25519.GenShrKey(A_shr, B_pub, A_prv);
PrintKeyBytes("A_shr", A_shr);
	ed25519.GenShrKey(B_shr, A_pub, B_prv);
PrintKeyBytes("B_shr", B_shr);
    }

proc main(): _int
{
    TestDH();

    return 0;
}

