// TEST: test aesgcm

import debug;
alias debug as err;

proc print16x(x: @[16]_byte)
{   var i: _uint;

    for i from 0 to 15 do
    {	debug.hex8(x[i]);
    	debug.chr(' ');
    }
    debug.nl();
}

proc printnx(x: @[]_byte, n: _uint)
{   var i: _uint;

    for i from 0 to n-1 do
    {	debug.hex8(x[i]);
    	debug.chr(' ');
    }
    debug.nl();
}

import aesgcm;

type Test:
{   klen:  _uint8;
    nlen:  _uint8;
    alen:  _uint8;
    tlen:  _uint8;
    mlen:  _uint16;
    key:   @[]_byte;
    nonce: @[]_byte;	// aka IV
    adata: @[]_byte;
    plain: @[]_byte;
    cipher:@[]_byte;
    tag:   @[]_byte;	// aka MAC
};

const tests: []Test =
{
  { // NIST GCM-AES128 example 1
    .klen=16, .nlen=12, .alen=0, .mlen=0, .tlen=16,
    .key={
	0xFE,0xFF,0xE9,0x92,0x86,0x65,0x73,0x1C,0x6D,0x6A,0x8F,0x94,0x67,0x30,0x83,0x08
    },
    .nonce={
	0xCA,0xFE,0xBA,0xBE,0xFA,0xCE,0xDB,0xAD,0xDE,0xCA,0xF8,0x88
    },
    .adata=0,
    .plain=0,
    .cipher=0,
    .tag = {
	0x32,0x47,0x18,0x4B,0x3C,0x4F,0x69,0xA4,0x4D,0xBC,0xD2,0x28,0x87,0xBB,0xB4,0x18
    }
  },
  { // NIST GCM-AES128 example 2
    .klen=16, .nlen=12, .alen=0, .mlen=64, .tlen=16,
    .key={
	0xFE,0xFF,0xE9,0x92,0x86,0x65,0x73,0x1C,0x6D,0x6A,0x8F,0x94,0x67,0x30,0x83,0x08
    },
    .nonce={
	0xCA,0xFE,0xBA,0xBE,0xFA,0xCE,0xDB,0xAD,0xDE,0xCA,0xF8,0x88
    },
    .adata=0,
    .plain={
	0xD9,0x31,0x32,0x25,0xF8,0x84,0x06,0xE5,0xA5,0x59,0x09,0xC5,0xAF,0xF5,0x26,0x9A,
	0x86,0xA7,0xA9,0x53,0x15,0x34,0xF7,0xDA,0x2E,0x4C,0x30,0x3D,0x8A,0x31,0x8A,0x72,
	0x1C,0x3C,0x0C,0x95,0x95,0x68,0x09,0x53,0x2F,0xCF,0x0E,0x24,0x49,0xA6,0xB5,0x25,
	0xB1,0x6A,0xED,0xF5,0xAA,0x0D,0xE6,0x57,0xBA,0x63,0x7B,0x39,0x1A,0xAF,0xD2,0x55
    },  
    .cipher={
	0x42,0x83,0x1E,0xC2,0x21,0x77,0x74,0x24,0x4B,0x72,0x21,0xB7,0x84,0xD0,0xD4,0x9C,
	0xE3,0xAA,0x21,0x2F,0x2C,0x02,0xA4,0xE0,0x35,0xC1,0x7E,0x23,0x29,0xAC,0xA1,0x2E,
	0x21,0xD5,0x14,0xB2,0x54,0x66,0x93,0x1C,0x7D,0x8F,0x6A,0x5A,0xAC,0x84,0xAA,0x05,
	0x1B,0xA3,0x0B,0x39,0x6A,0x0A,0xAC,0x97,0x3D,0x58,0xE0,0x91,0x47,0x3F,0x59,0x85
    },
    .tag = {
	0x4D,0x5C,0x2A,0xF3,0x27,0xCD,0x64,0xA6,0x2C,0xF3,0x5A,0xBD,0x2B,0xA6,0xFA,0xB4
    }
  },
  { // NIST GCM-AES128 example 3
    .klen=16, .nlen=12, .alen=64, .mlen=0, .tlen=16,
    .key={
	0xFE,0xFF,0xE9,0x92,0x86,0x65,0x73,0x1C,0x6D,0x6A,0x8F,0x94,0x67,0x30,0x83,0x08
    },
    .nonce={
	0xCA,0xFE,0xBA,0xBE,0xFA,0xCE,0xDB,0xAD,0xDE,0xCA,0xF8,0x88
    },
    .adata={
	0x3A,0xD7,0x7B,0xB4,0x0D,0x7A,0x36,0x60,0xA8,0x9E,0xCA,0xF3,0x24,0x66,0xEF,0x97,
	0xF5,0xD3,0xD5,0x85,0x03,0xB9,0x69,0x9D,0xE7,0x85,0x89,0x5A,0x96,0xFD,0xBA,0xAF,
	0x43,0xB1,0xCD,0x7F,0x59,0x8E,0xCE,0x23,0x88,0x1B,0x00,0xE3,0xED,0x03,0x06,0x88,
	0x7B,0x0C,0x78,0x5E,0x27,0xE8,0xAD,0x3F,0x82,0x23,0x20,0x71,0x04,0x72,0x5D,0xD4
    },
    .plain=0,
    .cipher=0,
    .tag = {
	0x5F,0x91,0xD7,0x71,0x23,0xEF,0x5E,0xB9,0x99,0x79,0x13,0x84,0x9B,0x8D,0xC1,0xE9
    }
  },
  { // NIST GCM-AES128 example 4
    .klen=16, .nlen=12, .alen=64, .mlen=64, .tlen=16,
    .key={
	0xFE,0xFF,0xE9,0x92,0x86,0x65,0x73,0x1C,0x6D,0x6A,0x8F,0x94,0x67,0x30,0x83,0x08
    },
    .nonce={
	0xCA,0xFE,0xBA,0xBE,0xFA,0xCE,0xDB,0xAD,0xDE,0xCA,0xF8,0x88
    },
    .adata={
	0x3A,0xD7,0x7B,0xB4,0x0D,0x7A,0x36,0x60,0xA8,0x9E,0xCA,0xF3,0x24,0x66,0xEF,0x97,
	0xF5,0xD3,0xD5,0x85,0x03,0xB9,0x69,0x9D,0xE7,0x85,0x89,0x5A,0x96,0xFD,0xBA,0xAF,
	0x43,0xB1,0xCD,0x7F,0x59,0x8E,0xCE,0x23,0x88,0x1B,0x00,0xE3,0xED,0x03,0x06,0x88,
	0x7B,0x0C,0x78,0x5E,0x27,0xE8,0xAD,0x3F,0x82,0x23,0x20,0x71,0x04,0x72,0x5D,0xD4
    },
    .plain={
	0xD9,0x31,0x32,0x25,0xF8,0x84,0x06,0xE5,0xA5,0x59,0x09,0xC5,0xAF,0xF5,0x26,0x9A,
	0x86,0xA7,0xA9,0x53,0x15,0x34,0xF7,0xDA,0x2E,0x4C,0x30,0x3D,0x8A,0x31,0x8A,0x72,
	0x1C,0x3C,0x0C,0x95,0x95,0x68,0x09,0x53,0x2F,0xCF,0x0E,0x24,0x49,0xA6,0xB5,0x25,
	0xB1,0x6A,0xED,0xF5,0xAA,0x0D,0xE6,0x57,0xBA,0x63,0x7B,0x39,0x1A,0xAF,0xD2,0x55
    },
    .cipher={
	0x42,0x83,0x1E,0xC2,0x21,0x77,0x74,0x24,0x4B,0x72,0x21,0xB7,0x84,0xD0,0xD4,0x9C,
	0xE3,0xAA,0x21,0x2F,0x2C,0x02,0xA4,0xE0,0x35,0xC1,0x7E,0x23,0x29,0xAC,0xA1,0x2E,
	0x21,0xD5,0x14,0xB2,0x54,0x66,0x93,0x1C,0x7D,0x8F,0x6A,0x5A,0xAC,0x84,0xAA,0x05,
	0x1B,0xA3,0x0B,0x39,0x6A,0x0A,0xAC,0x97,0x3D,0x58,0xE0,0x91,0x47,0x3F,0x59,0x85
    },
    .tag = {
	0x64,0xC0,0x23,0x29,0x04,0xAF,0x39,0x8A,0x5B,0x67,0xC1,0x0B,0x53,0xA5,0x02,0x4D
    }
  },
  { // NIST GCM-AES128 example 5
    .klen=16, .nlen=12, .alen=20, .mlen=60, .tlen=16,
    .key={
	0xFE,0xFF,0xE9,0x92,0x86,0x65,0x73,0x1C,0x6D,0x6A,0x8F,0x94,0x67,0x30,0x83,0x08
    },
    .nonce={
	0xCA,0xFE,0xBA,0xBE,0xFA,0xCE,0xDB,0xAD,0xDE,0xCA,0xF8,0x88
    },
    .adata={
	0x3A,0xD7,0x7B,0xB4,0x0D,0x7A,0x36,0x60,0xA8,0x9E,0xCA,0xF3,0x24,0x66,0xEF,0x97,
	0xF5,0xD3,0xD5,0x85
    },
    .plain={
	0xD9,0x31,0x32,0x25,0xF8,0x84,0x06,0xE5,0xA5,0x59,0x09,0xC5,0xAF,0xF5,0x26,0x9A,
	0x86,0xA7,0xA9,0x53,0x15,0x34,0xF7,0xDA,0x2E,0x4C,0x30,0x3D,0x8A,0x31,0x8A,0x72,
	0x1C,0x3C,0x0C,0x95,0x95,0x68,0x09,0x53,0x2F,0xCF,0x0E,0x24,0x49,0xA6,0xB5,0x25,
	0xB1,0x6A,0xED,0xF5,0xAA,0x0D,0xE6,0x57,0xBA,0x63,0x7B,0x39
    },
    .cipher={
	0x42,0x83,0x1E,0xC2,0x21,0x77,0x74,0x24,0x4B,0x72,0x21,0xB7,0x84,0xD0,0xD4,0x9C,
	0xE3,0xAA,0x21,0x2F,0x2C,0x02,0xA4,0xE0,0x35,0xC1,0x7E,0x23,0x29,0xAC,0xA1,0x2E,
	0x21,0xD5,0x14,0xB2,0x54,0x66,0x93,0x1C,0x7D,0x8F,0x6A,0x5A,0xAC,0x84,0xAA,0x05,
	0x1B,0xA3,0x0B,0x39,0x6A,0x0A,0xAC,0x97,0x3D,0x58,0xE0,0x91
    },
    .tag = {
	0xF0,0x7C,0x25,0x28,0xEE,0xA2,0xFC,0xA1,0x21,0x1F,0x90,0x5E,0x1B,0x6A,0x88,0x1B
    }
  },
  { // NIST GCM-AES128 example 6
    .klen=16, .nlen=12, .alen=20, .mlen=60, .tlen=12,
    .key={
	0xFE,0xFF,0xE9,0x92,0x86,0x65,0x73,0x1C,0x6D,0x6A,0x8F,0x94,0x67,0x30,0x83,0x08
    },
    .nonce={
	0xCA,0xFE,0xBA,0xBE,0xFA,0xCE,0xDB,0xAD,0xDE,0xCA,0xF8,0x88
    },
    .adata={
	0x3A,0xD7,0x7B,0xB4,0x0D,0x7A,0x36,0x60,0xA8,0x9E,0xCA,0xF3,0x24,0x66,0xEF,0x97,
	0xF5,0xD3,0xD5,0x85
    },
    .plain={
	0xD9,0x31,0x32,0x25,0xF8,0x84,0x06,0xE5,0xA5,0x59,0x09,0xC5,0xAF,0xF5,0x26,0x9A,
	0x86,0xA7,0xA9,0x53,0x15,0x34,0xF7,0xDA,0x2E,0x4C,0x30,0x3D,0x8A,0x31,0x8A,0x72,
	0x1C,0x3C,0x0C,0x95,0x95,0x68,0x09,0x53,0x2F,0xCF,0x0E,0x24,0x49,0xA6,0xB5,0x25,
	0xB1,0x6A,0xED,0xF5,0xAA,0x0D,0xE6,0x57,0xBA,0x63,0x7B,0x39
    },
    .cipher={
	0x42,0x83,0x1E,0xC2,0x21,0x77,0x74,0x24,0x4B,0x72,0x21,0xB7,0x84,0xD0,0xD4,0x9C,
	0xE3,0xAA,0x21,0x2F,0x2C,0x02,0xA4,0xE0,0x35,0xC1,0x7E,0x23,0x29,0xAC,0xA1,0x2E,
	0x21,0xD5,0x14,0xB2,0x54,0x66,0x93,0x1C,0x7D,0x8F,0x6A,0x5A,0xAC,0x84,0xAA,0x05,
	0x1B,0xA3,0x0B,0x39,0x6A,0x0A,0xAC,0x97,0x3D,0x58,0xE0,0x91
    },
    .tag = {
	0xF0,0x7C,0x25,0x28,0xEE,0xA2,0xFC,0xA1,0x21,0x1F,0x90,0x5E
    }
  },
};

var nerr: _uint = 0;

proc Check(test: boolean, msg: @[]_byte, n: _uint)
{
    if !test then
    {   err.str("Test "); err.uint(n); err.str(" failed: ");
	err.str(msg);
	err.nl();
	nerr += 1;
    }
}

var ciphertext: [1024]_byte;
var plaintext:  [1024]_byte;
var tag: [16]_byte;

var ctx: aesgcm.State;

proc main(): _int
{   var len, alen, nlen, tlen: _uint;
    var i: _uint;

    for i from 0 to tests?len-1 do
    {
	// FIXME - handle klen != 16
	len = tests[i].mlen;
	alen = tests[i].alen;
	nlen = tests[i].nlen;
	tlen = tests[i].tlen;

	// Encrypt
	ctx.SetKey(tests[i].key, KEY128);
	ctx.Start(tests[i].nonce, nlen, tests[i].adata, alen);
	ctx.Payload(tests[i].plain, ciphertext, len, false);
	ctx.Finish(tag, tlen);
	if len != 0 then
	    Check(ciphertext[0:len] == tests[i].cipher[0:len], "encrypt", i+1);
	if tlen != 0 then
	    Check(tag[0:tlen] == tests[i].tag[0:tlen], "encrypt tag", i+1);

	// Decrypt
	ctx.SetKey(tests[i].key, KEY128);
	ctx.Start(tests[i].nonce, nlen, tests[i].adata, alen);
	ctx.Payload(ciphertext, plaintext, len, true);
	ctx.Finish(tag, tlen);
	if len != 0 then
	    Check(plaintext[0:len] == tests[i].plain[0:len], "decrypt", i+1);
	if tlen != 0 then
	    Check(tag[0:tlen] == tests[i].tag[0:tlen], "decrypt tag", i+1);
    }
    return _int(nerr);
}

