import debug;
alias debug as err;

import chacha;

type Test:
{   klen:  _uint8;
    nlen: _uint8;
    mlen:  _uint16;
    ibc:   _uint32;	// initial block counter
    key:   @[]_byte;
    nonce: @[]_byte;	// aka IV
    plain: @[]_byte;
    cipher:@[]_byte;
};

const tests: []Test =
{ // RFC 7539 Appendix A.1 test 1
  { .klen=32, .nlen=12, .mlen=64, .ibc=0,
    .key={ 
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    },
    .nonce={
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    },
    .plain={
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    },
    .cipher={
      0x76,0xB8,0xE0,0xAD,0xA0,0xF1,0x3D,0x90,0x40,0x5D,0x6A,0xE5,0x53,0x86,0xBD,0x28,
      0xBD,0xD2,0x19,0xB8,0xA0,0x8D,0xED,0x1A,0xA8,0x36,0xEF,0xCC,0x8B,0x77,0x0D,0xC7,
      0xDA,0x41,0x59,0x7C,0x51,0x57,0x48,0x8D,0x77,0x24,0xE0,0x3F,0xB8,0xD8,0x4A,0x37,
      0x6A,0x43,0xB8,0xF4,0x15,0x18,0xA1,0x1C,0xC3,0x87,0xB6,0x69,0xB2,0xEE,0x65,0x86 
   }
  },
  // RFC 7539 Appendix A.1 test 2
  { .klen=32, .nlen=12, .mlen=64, .ibc=1,
    .key={ 
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    },
    .nonce={
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    },
    .plain={
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    },
    .cipher={
      0x9F,0x07,0xE7,0xBE,0x55,0x51,0x38,0x7A,0x98,0xBA,0x97,0x7C,0x73,0x2D,0x08,0x0D,
      0xCB,0x0F,0x29,0xA0,0x48,0xE3,0x65,0x69,0x12,0xC6,0x53,0x3E,0x32,0xEE,0x7A,0xED,
      0x29,0xB7,0x21,0x76,0x9C,0xE6,0x4E,0x43,0xD5,0x71,0x33,0xB0,0x74,0xD8,0x39,0xD5,
      0x31,0xED,0x1F,0x28,0x51,0x0A,0xFB,0x45,0xAC,0xE1,0x0A,0x1F,0x4B,0x79,0x4D,0x6F 
   }
  },
  // RFC 7539 Appendix A.1 test 3
  { .klen=32, .nlen=12, .mlen=64, .ibc=1,
    .key={ 
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01
    },
    .nonce={
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    },
    .plain={
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    },
    .cipher={
      0x3A,0xEB,0x52,0x24,0xEC,0xF8,0x49,0x92,0x9B,0x9D,0x82,0x8D,0xB1,0xCE,0xD4,0xDD,
      0x83,0x20,0x25,0xE8,0x01,0x8B,0x81,0x60,0xB8,0x22,0x84,0xF3,0xC9,0x49,0xAA,0x5A,
      0x8E,0xCA,0x00,0xBB,0xB4,0xA7,0x3B,0xDA,0xD1,0x92,0xB5,0xC4,0x2F,0x73,0xF2,0xFD,
      0x4E,0x27,0x36,0x44,0xC8,0xB3,0x61,0x25,0xA6,0x4A,0xDD,0xEB,0x00,0x6C,0x13,0xA0
   }
  },
  // RFC 7539 Appendix A.1 test 4
  { .klen=32, .nlen=12, .mlen=64, .ibc=2,
    .key={ 
      0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    },
    .nonce={
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    },
    .plain={
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    },
    .cipher={
      0x72,0xD5,0x4D,0xFB,0xF1,0x2E,0xC4,0x4B,0x36,0x26,0x92,0xDF,0x94,0x13,0x7F,0x32,
      0x8F,0xEA,0x8D,0xA7,0x39,0x90,0x26,0x5E,0xC1,0xBB,0xBE,0xA1,0xAE,0x9A,0xF0,0xCA,
      0x13,0xB2,0x5A,0xA2,0x6C,0xB4,0xA6,0x48,0xCB,0x9B,0x9D,0x1B,0xE6,0x5B,0x2C,0x09,
      0x24,0xA6,0x6C,0x54,0xD5,0x45,0xEC,0x1B,0x73,0x74,0xF4,0x87,0x2E,0x99,0xF0,0x96
   }
  },
  // RFC 7539 Appendix A.1 test 5
  { .klen=32, .nlen=12, .mlen=64, .ibc=0,
    .key={ 
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    },
    .nonce={
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02
    },
    .plain={
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    },
    .cipher={
      0xC2,0xC6,0x4D,0x37,0x8C,0xD5,0x36,0x37,0x4A,0xE2,0x04,0xB9,0xEF,0x93,0x3F,0xCD,
      0x1A,0x8B,0x22,0x88,0xB3,0xDF,0xA4,0x96,0x72,0xAB,0x76,0x5B,0x54,0xEE,0x27,0xC7,
      0x8A,0x97,0x0E,0x0E,0x95,0x5C,0x14,0xF3,0xA8,0x8E,0x74,0x1B,0x97,0xC2,0x86,0xF7,
      0x5F,0x8F,0xC2,0x99,0xE8,0x14,0x83,0x62,0xFA,0x19,0x8A,0x39,0x53,0x1B,0xED,0x6D 
    }
  },
  // RFC 7539 Appendix A.2 test 2
  { .klen=32, .nlen=12, .mlen=375, .ibc=1,
    .key={ 
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01
    },
    .nonce={
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02
    },
    .plain=
    "Any submission to the IETF intended by the Contributor for publi"
    "cation as all or part of an IETF Internet-Draft or RFC and any s"
    "tatement made within the context of an IETF activity is consider"
    "ed an \"IETF Contribution\". Such statements include oral statemen"
    "ts in IETF sessions, as well as written and electronic communica"
    "tions made at any time or place, which are addressed to",
    .cipher={
      0xA3,0xFB,0xF0,0x7D,0xF3,0xFA,0x2F,0xDE,0x4F,0x37,0x6C,0xA2,0x3E,0x82,0x73,0x70,
      0x41,0x60,0x5D,0x9F,0x4F,0x4F,0x57,0xBD,0x8C,0xFF,0x2C,0x1D,0x4B,0x79,0x55,0xEC,
      0x2A,0x97,0x94,0x8B,0xD3,0x72,0x29,0x15,0xC8,0xF3,0xD3,0x37,0xF7,0xD3,0x70,0x05,
      0x0E,0x9E,0x96,0xD6,0x47,0xB7,0xC3,0x9F,0x56,0xE0,0x31,0xCA,0x5E,0xB6,0x25,0x0D,
      0x40,0x42,0xE0,0x27,0x85,0xEC,0xEC,0xFA,0x4B,0x4B,0xB5,0xE8,0xEA,0xD0,0x44,0x0E,
      0x20,0xB6,0xE8,0xDB,0x09,0xD8,0x81,0xA7,0xC6,0x13,0x2F,0x42,0x0E,0x52,0x79,0x50,
      0x42,0xBD,0xFA,0x77,0x73,0xD8,0xA9,0x05,0x14,0x47,0xB3,0x29,0x1C,0xE1,0x41,0x1C,
      0x68,0x04,0x65,0x55,0x2A,0xA6,0xC4,0x05,0xB7,0x76,0x4D,0x5E,0x87,0xBE,0xA8,0x5A,
      0xD0,0x0F,0x84,0x49,0xED,0x8F,0x72,0xD0,0xD6,0x62,0xAB,0x05,0x26,0x91,0xCA,0x66,
      0x42,0x4B,0xC8,0x6D,0x2D,0xF8,0x0E,0xA4,0x1F,0x43,0xAB,0xF9,0x37,0xD3,0x25,0x9D,
      0xC4,0xB2,0xD0,0xDF,0xB4,0x8A,0x6C,0x91,0x39,0xDD,0xD7,0xF7,0x69,0x66,0xE9,0x28,
      0xE6,0x35,0x55,0x3B,0xA7,0x6C,0x5C,0x87,0x9D,0x7B,0x35,0xD4,0x9E,0xB2,0xE6,0x2B,
      0x08,0x71,0xCD,0xAC,0x63,0x89,0x39,0xE2,0x5E,0x8A,0x1E,0x0E,0xF9,0xD5,0x28,0x0F,
      0xA8,0xCA,0x32,0x8B,0x35,0x1C,0x3C,0x76,0x59,0x89,0xCB,0xCF,0x3D,0xAA,0x8B,0x6C,
      0xCC,0x3A,0xAF,0x9F,0x39,0x79,0xC9,0x2B,0x37,0x20,0xFC,0x88,0xDC,0x95,0xED,0x84,
      0xA1,0xBE,0x05,0x9C,0x64,0x99,0xB9,0xFD,0xA2,0x36,0xE7,0xE8,0x18,0xB0,0x4B,0x0B,
      0xC3,0x9C,0x1E,0x87,0x6B,0x19,0x3B,0xFE,0x55,0x69,0x75,0x3F,0x88,0x12,0x8C,0xC0,
      0x8A,0xAA,0x9B,0x63,0xD1,0xA1,0x6F,0x80,0xEF,0x25,0x54,0xD7,0x18,0x9C,0x41,0x1F,
      0x58,0x69,0xCA,0x52,0xC5,0xB8,0x3F,0xA3,0x6F,0xF2,0x16,0xB9,0xC1,0xD3,0x00,0x62,
      0xBE,0xBC,0xFD,0x2D,0xC5,0xBC,0xE0,0x91,0x19,0x34,0xFD,0xA7,0x9A,0x86,0xF6,0xE6,
      0x98,0xCE,0xD7,0x59,0xC3,0xFF,0x9B,0x64,0x77,0x33,0x8F,0x3D,0xA4,0xF9,0xCD,0x85,
      0x14,0xEA,0x99,0x82,0xCC,0xAF,0xB3,0x41,0xB2,0x38,0x4D,0xD9,0x02,0xF3,0xD1,0xAB,
      0x7A,0xC6,0x1D,0xD2,0x9C,0x6F,0x21,0xBA,0x5B,0x86,0x2F,0x37,0x30,0xE3,0x7C,0xFD,
      0xC4,0xFD,0x80,0x6C,0x22,0xF2,0x21 
    }
  },
  // RFC 7539 Appendix A.2 test 3
  { .klen=32, .nlen=12, .mlen=127, .ibc=42,
    .key={ 
      0x1c,0x92,0x40,0xa5,0xeb,0x55,0xd3,0x8a,0xf3,0x33,0x88,0x86,0x04,0xf6,0xb5,0xf0,
      0x47,0x39,0x17,0xc1,0x40,0x2b,0x80,0x09,0x9d,0xca,0x5c,0xbc,0x20,0x70,0x75,0xc0
    },
    .nonce={
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02
    },
    .plain=
    "'Twas brillig, and the slithy toves\n"
    "Did gyre and gimble in the wabe:\n"
    "All mimsy were the borogoves,\n"
    "And the mome raths outgrabe.",
    .cipher={
      0x62,0xE6,0x34,0x7F,0x95,0xED,0x87,0xA4,0x5F,0xFA,0xE7,0x42,0x6F,0x27,0xA1,0xDF,
      0x5F,0xB6,0x91,0x10,0x04,0x4C,0x0D,0x73,0x11,0x8E,0xFF,0xA9,0x5B,0x01,0xE5,0xCF,
      0x16,0x6D,0x3D,0xF2,0xD7,0x21,0xCA,0xF9,0xB2,0x1E,0x5F,0xB1,0x4C,0x61,0x68,0x71,
      0xFD,0x84,0xC5,0x4F,0x9D,0x65,0xB2,0x83,0x19,0x6C,0x7F,0xE4,0xF6,0x05,0x53,0xEB,
      0xF3,0x9C,0x64,0x02,0xC4,0x22,0x34,0xE3,0x2A,0x35,0x6B,0x3E,0x76,0x43,0x12,0xA6,
      0x1A,0x55,0x32,0x05,0x57,0x16,0xEA,0xD6,0x96,0x25,0x68,0xF8,0x7D,0x3F,0x3F,0x77,
      0x04,0xC6,0xA8,0xD1,0xBC,0xD1,0xBF,0x4D,0x50,0xD6,0x15,0x4B,0x6D,0xA7,0x31,0xB1,
      0x87,0xB5,0x8D,0xFD,0x72,0x8A,0xFA,0x36,0x75,0x7A,0x79,0x7A,0xC1,0x88,0xD1 
    }
  }
};

var nerr: _uint = 0;

proc Check(test: boolean, msg: @[]_byte, n: _uint)
{
    if !test then
    {   err.str("Test "); err.uint(n); err.str(" failed: ");
	err.str(msg);
	err.nl();
	nerr += 1;
    }
}

var ciphertext: [1024]_byte;
var plaintext:  [1024]_byte;

var ctx: chacha.Context;

proc main(): _int
{   var i: _uint;
    var len: _uint;

    for i from 0 to tests?len-1 do
    {   len = tests[i].mlen;
	ctx.SetKey(tests[i].key, tests[i].klen);
	ctx.SetIV(tests[i].nonce);
	ctx.SetCounter(tests[i].ibc);
	ctx.Encrypt(tests[i].plain, ciphertext, len);
	Check(ciphertext[0:len] == tests[i].cipher[0:len], "encrypt", i+1);
    }

    return _int(nerr);
}
