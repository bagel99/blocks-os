/*
 * USB Open Host Controller Interface (OHCI)
 *
 * Copyright (c) 2013,2014, Brian G. Lucas.  See LICENSE file.
 * $Id$
 */

import usb_hub;

package usb_ohci
{
    type ErrorCode:
    (	NoError,       CRC,                 BitStuffing,     DataToggleMismatch,
	Stall,         DeviceNotResponding, PIDCheckFailure, UnexpectedPID,
	DataOverrun,   DataUnderrun,        Bad10,           Bad11,
	BufferOverrun, BufferUnderrun,      NotAccessed0,    NotAccessed1
    );

    /*
     * Transfer Descriptor (TD)
     */
    type TDInfo:
    {	sw:     _uint16;		// .00-17 - SW use, HW doesn't touch
	sw2:    0..0b11;		// .16-17 - HW doesn't touch
	r:      boolean;		// .18    - Buffer Rounding
	dp:     (SETUP, OUT, IN, _);	// .19-20 - Direction/PID
	di:     0..0b111;		// .21-23 - Delay Interrupt
	t:      (USEED,_,DATA0,DATA1);	// .24-25 - Data Toggle
        ec:     0..3;			// .26-27 - Error Count
	cc:     ErrorCode;		// .28-31 - Condition Code
    }: packed, lsb;
    type TD:
    {   info:     TDInfo;		// 0
	cbp:      _address;		// 4 - Current Buffer Pointer
	nextTD:   @TD;			// 8 - Next TD
	be:       _address;		// C - Buffer End
    }: align(16);

    /*
     * Endpoint Descriptor (ED)
     */
    type EDInfo:
    {	fa:     0..0b1111111;		// .00-06 - Function Address
	en:     0..0b1111;		// .07-10 - Endpoint Number
	d:      (USE_TD, OUT, IN, _);	// .11-12 - Direction
	s:      (FULL, LOW);		// .13    - Speed
	k:      boolean;		// .14    - Skip
	f:      (NORMAL, ISOCH);	// .15    - Format
	mps:    0..2047;		// .16-26 - Maximum Packet Size
	sw:     0..0b11111;		// .27-31 - SW use, HW doesn't touch
    }: packed, lsb;
    type ED:
    {   info:       EDInfo;		// 0
	tailp:      @TD;		// 4 - TD Queue Tail Pointer
	headp:      @TD;		// 8 - TD Queue Head Pointer
	nextED:     @ED;		// C - Next Endpoint Descripton
    }: align(16);
    // Hardware Kludge Alert - HeadP address has low order status bits
    type EDHead:
    {   H:   boolean;			// .00 - Halted
	C:   0..1;			// .01 - Toggle carry
	_:   0..1;			// .02
	ADR: 0..0x1FFF_FFFF;		// .03-31 - Memory address
    }: packed, lsb;

    /*
     * Layout of the Host Controller Communications Area (HCCA)
     */
    const NIntr = 32;
    type IntrHead: @ED: out;
    type HCCA:
    {   IntrList:     [NIntr] IntrHead;
	FrameNumber:  0..0xFFFF;
	Pad1:         0..0xFFFF;
	DoneHead:     @TD: in;
	reserved:     [120] _byte;		// Reserved for use by HC
    }: align(256);

    const NDP = 2;

    /*
     * Bits in the various interrupt registers
     */
    type IntrT:
    {   so:	boolean;	// .00 - schedule overrun
	wdh:	boolean;	// .01 - done head writeback
	sf:	boolean;	// .02 - start of frame
	rd:	boolean;	// .03 - resume detect
	ue:	boolean;	// .04 - unrecoverable error
	fno:	boolean;	// .05 - frame number overflow
	rhsc:	boolean;	// .06 - root hub status change
	_:	0..0x7F_FFFF;	// .07-29
	oc:	boolean;	// .30 - ownership change
	mie:	boolean;	// .31 - master interrupt enable
    }: packed, lsb;

    /*
     * The bits in the root hub status register are a superset of those
     * returned by the GetHubStatus command for reading.
     * We defined a new type to include the additional bits.
     */
    type RHStatusT:
    {   localpower:  boolean;	// .00
	overcurrent: boolean;	// .01
	_:           0..0x1FFF;	// .02-14
	drwe:        boolean;	// .15 - device remote wakeup enable
	Clocalpower: boolean;	// .16 - change in localpower status
	Covercurrent:boolean;	// .17 - change in overcurrent status
	_:           0..0x1FFF;	// .18-30
	crwe:        boolean;	// .31 - clear remote wakeup enable
    }: packed, lsb, in, out;

    /*
     * The bits in the port status registers are the same as those returned
     * by the GetPortStatus command for reading.
     * Writing a 0 to any of these bits is ignored.
     * Writing a 1 to some bits clears that bit, but for some bits it clears
     * a different bit.  See the helper methods below.
     */
    type PortStatusT: usb.hub.PortStatus: in, out;

    // The Host Controller Registers
    type HC:
    {   Revision:							// 0x00
	{   rev:    0..0xFF;
	    _:      0..0xFF_FFFF;
        }: packed, lsb, ro;
	Control:							// 0x04
	{   cbsr:   (R1, R2, R3, R4);	// .00-01
	    ple:    boolean;	// .02 - Periodic List Enable
	    ie:     boolean;	// .03 - Isochronous Enable
	    cle:    boolean;	// .04 - Control List Enable
	    ble:    boolean;	// .05 - Bulk List Enable
	    hcfs:   (Reset, Resume, Operational, Suspend); //.06-07
	    ir:     (Normal, SMI);	// .08
	    rwc:    boolean;	// .09 - Remote Wakeup Connected
	    rwe:    boolean;	// .10 - Remote Wakeup Enable
	    _:      0..0x1F_FFFF;
	}: packed, lsb, in, out;
	CommandStatus:							// 0x08
	{   hcr:    boolean;	// .00 - host ctlr reset
	    clf:    boolean;	// .01 - Control List Filled
	    blf:    boolean;	// .02 - Bulk List Filled	
	    ocr:    boolean;	// .03 - owner change request
	    _:      0..0xFFF;	// .04-15
	    soc:    0..0b11;	// .16-17 - sched overrun count	
	    _:      0..0x3FFF;
	}: packed, lsb, in, out;
	InterruptStatus:    IntrT: in, out;	// w1: clear bit	// 0x0C
	InterruptEnable:    IntrT: out;		// w1: set enable bit	// 0x10
	InterruptDisable:   IntrT: out;		// w1: clear enable bit	// 0x14
	HCCA:		    @HCCA: out;	// low 8 bits should be 0	// 0x18
	PeriodCurrentED:    @ED: ro, in;				// 0x1C
	ControlHeadED:	    @ED: out;					// 0x20
	ControlCurrentED:   @ED: in;					// 0x24
	BulkHeadED:	    @ED: out;					// 0x28
	BulkCurrentED:	    @ED: in;					// 0x2C
	DoneHead:	    @TD: ro, in;				// 0x30
	FmInterval:							// 0x34
	{   fi:      0..0xFFFF;			// low 14 bits
	    fsmps:   0..0x7FFF;
	    fit:     0..1;
	}: packed, lsb, out;
	FmRemaining:	    0..0xFFFF_FFFF;		// low 14 bits	// 0x38
	FmNumber:	    0..0xFFFF_FFFF: ro;		// low 16 bits	// 0x3C
	PeriodicStart:	    0..0xFFFF_FFFF;		// low 14 bits	// 0x40
	LSThreshold:	    0..0xFFFF_FFFF;		// low 11 bits	// 0x44
	RhDescriptorA:							// 0x48
	{   ndp:    0..0xFF;		// .00-07 number data ports
	    char:   usb.hub.HubCharacter; // .08-15 hub characteristics
	    rsvd:   0..0xFF;		// .16-23
	    potpgt: 0..0xFF;		// .24-31 power on delay
	}: packed, lsb, ro;
	RhDescriptorB:							// 0x4C
	{   dr:     [16] boolean: packed, lsb;
	    ppcm:   [16] boolean: packed, lsb;
	}: packed, lsb, ro;
	RhStatus:	RHStatusT: in, out;				// 0x50
	RhPortStatus:	[NDP] PortStatusT: in, out;			// 0x54
    };


    /*
     * Methods on the root hub status register
     * Handy because some bits have quirky meanings.
     */
    proc (rhs: @RHStatusT) SetGlobalPower(): : inline
    {
	rhs@ = {.Clocalpower=true};	// quirky
    }
    proc (rhs: @RHStatusT) ClearGlobalPower(): : inline
    {
	rhs@ = {.localpower=true};	// quirky
    }
    proc (rhs: @RHStatusT) ClearOvercurrentChange(): : inline
    {
	rhs@ = {.Covercurrent=true};
    }

    /*
     * Methods on the port status register
     * Handy because some bits have quirky meanings.
     * Also, writing a 0-bit has no effect, so it is not necessary
     * to do a read-modify-write.
     */
    proc (ps: @PortStatusT) SetPortEnable(): : inline
    {
    	ps@ = {.enable=true};
    }
    proc (ps: @PortStatusT) ClearPortEnable(): : inline
    {
    	ps@ = {.connect=true};	// quirky
    }
    proc (ps: @PortStatusT) SetPortSuspend(): : inline
    {
    	ps@ = {.suspend=true};
    }
    proc (ps: @PortStatusT) ClearPortSuspend(): : inline
    {
    	ps@ = {.overcurrent=true};	// quirky
    }
    proc (ps: @PortStatusT) SetPortReset(): : inline
    {
    	ps@ = {.reset=true};
    }
    proc (ps: @PortStatusT) SetPortPower(): : inline
    {
    	ps@ = {.power=true};
    }
    proc (ps: @PortStatusT) ClearPortPower(): : inline
    {
    	ps@ = {.lospeed=true};	// quirky
    }
    proc (ps: @PortStatusT) ClearConnectChange(): : inline
    {
    	ps@ = {.Cconnect=true};
    }
    proc (ps: @PortStatusT) ClearEnableChange(): : inline
    {
    	ps@ = {.Cenable=true};
    }
    proc (ps: @PortStatusT) ClearSuspendChange(): : inline
    {
    	ps@ = {.Csuspend=true};
    }
    proc (ps: @PortStatusT) ClearOvercurrentChange(): : inline
    {
    	ps@ = {.Covercurrent=true};
    }
    proc (ps: @PortStatusT) ClearResetChange(): : inline
    {
    	ps@ = {.Creset=true};
    }
    proc (ps: @PortStatusT) ClearStatusChange(): : inline
    {
	ps@ = {.Cconnect=true, .Cenable=true, .Csuspend=true,
		.Covercurrent=true, .Creset=true};
    }

if _defined(debug) then {

    proc (td: @TD) TDError()
    {
	const ErrorString: [ErrorCode]@[]_byte =
	{   [NoError] =		"None",
	    [CRC] =			"CRC",
	    [BitStuffing] =		"BitStuffing",
	    [DataToggleMismatch] =	"DataToggleMismatch",
	    [Stall] =			"Stall",
	    [DeviceNotResponding] =	"DeviceNotResponding",
	    [PIDCheckFailure] =		"PIDCheckFailure",
	    [UnexpectedPID] =		"UnexpectedPID",
	    [DataOverrun] =		"DataOverrun",
	    [DataUnderrun] =		"DataUnderrun",
	    [Bad10] =			"Bad10",
	    [Bad11] =			"Bad11",
	    [BufferOverrun] =		"BufferOverrun",
	    [BufferUnderrun] =		"BufferUnderrun",
	    [NotAccessed0] =		"NotAccessed0",
	    [NotAccessed1] =		"NotAccessed1"
	};

	debug.str("TD Error: ");
	debug.str(ErrorString[td.info.cc]);
	debug.nl();
    }

    proc (td: @TD) Dump()
    {
	debug.str("TD @"); debug.hex32(_uint32(td)); debug.str(": ");
	debug.hex32(_uint32(td.info));  //debug.chr(' ');
	    debug.str(" CC="); debug.uint8(_uint8(td.info.cc));
	    debug.str(" EC="); debug.uint8(td.info.ec);
	    debug.str(" DI="); debug.uint8(td.info.di);
	    debug.str(" R="); debug.uint8(_uint8(td.info.r));
	    debug.str(" T="); debug.uint8(_uint8(td.info.t));
	    debug.str(" DP="); debug.uint8(_uint8(td.info.dp));
	    debug.str("\n\t");
	debug.hex32(_uint32(td.cbp));  debug.chr(' ');
	debug.hex32(_uint32(td.nextTD));  debug.chr(' ');
	debug.hex32(_uint32(td.be));  debug.nl();
    }
		
    proc (ed: @ED) Dump(tds: boolean)
    {   var tdh, tdt: @TD;
 
	tdh = ed.headp;
	tdt = ed.tailp;
	debug.str("ED @"); debug.hex32(_uint32(ed)); debug.str(": ");
	debug.hex32(_uint32(ed.info));  //debug.chr(' ');
	    debug.str(" FA="); debug.uint8(ed.info.fa);
	    debug.str(" EN="); debug.uint8(ed.info.en);
	    debug.str(" D="); debug.uint8(_uint8(ed.info.d));
	    debug.str(" S="); debug.uint8(_uint8(ed.info.s));
	    debug.str(" K="); debug.uint8(_uint8(ed.info.k));
	    debug.str(" F="); debug.uint8(_uint8(ed.info.f));
	    debug.str(" MPS="); debug.uint16(ed.info.mps);
	    debug.str("\n\t");
	debug.hex32(_uint32(tdt));  debug.chr(' ');
	debug.hex32(_uint32(tdh));  debug.chr(' ');
	debug.hex32(_uint32(ed.nextED));
	if _uint32(tdh) & 1 != 0 then
	    debug.str(" HALTED");
	debug.nl();
	if tds then
	{   type pTD: @TD;
	    tdh = pTD(_uintptr(tdh) & 0xFFFF_FFF0);	// clear lower bits
	    while tdh != 0 && tdh != tdt do
	    {   tdh.Dump();
		tdh = tdh.nextTD;
	    }
	}
    }

    proc (hcca:@HCCA) DumpIntrList(tds: boolean)
    {	var i: _uint;

	debug.str("IntrList\n");
	for i from 0 to NIntr-1 do
	{   if hcca.IntrList[i] != 0 then
	    {	debug.uint(i); debug.chr(':');
		hcca.IntrList[i].Dump(tds);
	    }
	}
    }
}

}

