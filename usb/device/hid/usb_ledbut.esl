// HID device with up to 8 LEDs and 2 buttons

import usb_hid;

package usbdev		// extends package
{
    const db_hidother= 0x00080000;
    const db_hiddata = 0x00020000;
    const db_hidsu =   0x00010000;

    const EP1RxSize = 2;
    const EP1TxSize = 8;
    const ManufactString = 1;
    const ProductString = 2;
    const SerialNoString = 3;
    const DevDesc: usb.DeviceDesc: align(4) = 
    {	usb.DeviceDesc?size,		// desc. length
    	{ DEVICE, STANDARD },
    	0x0200,				// version 2.0
    	0,				// class
    	0,				// subclass
    	0,				// protocol
    	64,				// EP0 max packet size
    	0x0483,				// vendor
    	0x5711,				// product
    	0x0200,				// release
    	ManufactString,			// manufacturer string
    	ProductString,			// product string
    	SerialNoString,			// serial number string
    	1				// number of configurations
    };

    const ReportDesc: []_byte =
    {
	0x06, 0x31, 0xFF,	// USAGE_PAGE (Vendor Page: 0xFF31)                   
	0x09, 0x01,		// USAGE (Demo Kit)
	0xA1, 0x01,		// COLLECTION (Application)
				//   LEDS, 8 packed into 1 byte
	    0x95, 0x08,		//     REPORT_COUNT (8)
	    0x75, 0x01,		//     REPORT_SIZE (1)
	    0x05, 0x08,		//     USAGE PAGE (LEDs)
	    0x19, 0x01,		//     USAGE MINIMUM (1)
	    0x29, 0x08,		//     USAGE MAXIMUM (8)
	    0x91, 0x02,		//     OUTPUT (Data,Var,Abs)
				//   BUTTONS, 8 bytes with button number
	    0x95, 0x08,		//     REPORT_COUNT (8)
	    0x75, 0x08,		//     REPORT_SIZE (8)
	    0x15, 0x00,		//     LOGICAL_MINIMUM (0)
	    0x25, 0x08,		//     LOGICAL_MAXIMUM (8)
	    0x05, 0x09,		//     USAGE PAGE (Buttons)
	    0x19, 0x00,		//     USAGE MINIMUM (0)
	    0x29, 0x08,		//     USAGE MAXIMUM (8)
	    0x81, 0x00,		//     INPUT (Data,Array)
	0xC0			// END_COLLECTION
    };

    type SuperDesc:
    {	conf: usb.ConfigDesc;
    	intf: usb.InterfaceDesc: align(1);
    	hid:  usb.hid.HIDDesc: align(1);
    	endp1:usb.EndpointDesc: align(1);
    	endp2:usb.EndpointDesc: align(1);
    }: nopad;
    const SuperConfDesc: SuperDesc: align(4) =
    {
	{   usb.ConfigDesc?size,		// desc. length
	    { CONFIG, STANDARD },
	    41,				// total length
	    1,				// number of interfaces
	    1,				// configuration value
	    0,				// configuration index
	    { .BusPower=1, .SelfPower=1 },	// attributes
	    0x32				// max power 100mA
	},
	{   usb.InterfaceDesc?size,
    	    { INTERFACE, STANDARD },
    	    0,				// interface number
    	    0,				// alternate setting
    	    2,				// number of endpoints
    	    HID,			// class
    	    0,				// subclass = boot
    	    0,				// protocol = mouse
    	    0				// string
	},
	{   usb.hid.HIDDesc?size,
	    { usb.hid.ClassDescNumber.HID, CLASS },
	    0x0101,			// spec release (BCD)
	    0,				// country code
	    1,				// num class descriptors
	    0x22,			// descriptor type
	    ReportDesc?size
	},
	{   usb.EndpointDesc?size,
    	    { ENDPOINT, STANDARD },
    	    { .Dir=IN, .Num=1 },
    	    { .Type=INTR },
    	    EP1TxSize,			// max packet size
    	    32				// polling inverval 32mS
	},
	{   usb.EndpointDesc?size,
    	    { ENDPOINT, STANDARD },
    	    { .Dir=OUT, .Num=1 },
    	    { .Type=INTR },
    	    EP1RxSize,			// max packet size
    	    32				// polling inverval 32mS
	}
    };

    const S0: usb.StringDesc =		// Language array
    {	4,
 	{ STRING, STANDARD },
 	{ 0x0409 }			// US English
    };
    const S1: usb.StringDesc =
    {   8,
    	{ STRING, STANDARD },
    	{ 'T', 'L', 'A' }
    };    	
    const S2: usb.StringDesc =		// Product
    {   26,
    	{ STRING, STANDARD },
	{'L','E','D','S','+','B','U','T','T','O','N','S'}
    };
    const S3: usb.StringDesc =		// Serial
    {   16,
    	{ STRING, STANDARD },
	{'0','0','0','0','0','0','1'}
    };

    type State:
    {
	CurrentConfig: _uint8;
	busy:   boolean: in, out;    // data ready for host
	epin:   usbdev.eps;
	epout:  usbdev.eps;
	datain: [EP1TxSize]_byte: align(4);   // to host
	dataout:[EP1RxSize]_byte: align(4);   // from host
    };
    var hs: State;


    proc DoSetConfiguration(n: _uint)
    {
	if n == 1 then      // only implement configuration 1
	{
	    hs.epin.Activate();
	    hs.epout.Activate();
	    hs.epout.StartOut(hs.dataout, hs.dataout?len);
	}
    }

    proc SetupOut(rqst: @usb.SetupPkt): _address, _uint
    {
	if rqst.type
	is {.dir=OUT, .stype=Standard, .recip=Device} then
	{
	    if usb.StandardRequests(rqst.request)
	    // SetAddress already handled
	    is SetConfiguration then
	    {
if db & db_hidsu != 0 then {debug.str("DSC\n");}
		DoSetConfiguration(rqst.value&0xFF);
	    }
	    is ClearFeature then
	    {
if db & db_hidother != 0 then {debug.str("DCF\n");}
	    }
	    is SetFeature then
	    {
if db & db_hidother != 0 then {debug.str("DSF\n");}
	    }
	    is SetDescriptor then
	    {
if db & db_hidother != 0 then {debug.str("DSD\n");}
	    }
	}
	is {.dir=OUT, .stype=Standard, .recip=Interface} then
	{
	    if usb.StandardRequests(rqst.request)
	    is ClearFeature then
	    {
if db & db_hidother != 0 then {debug.str("ICF\n");}
	    }
	    is SetFeature then
	    {
if db & db_hidother != 0 then {debug.str("ISF\n");}
	    }
	}
	is {.dir=OUT, .stype=Standard, .recip=EndPoint} then
	{
	    if usb.StandardRequests(rqst.request)
	    is ClearFeature then
	    {
if db & db_hidother != 0 then {debug.str("ECF\n");}
	    }
	    is SetFeature then
	    {
if db & db_hidother != 0 then {debug.str("ESF\n");}
	    }
	}
	is {.dir=OUT, .stype=Class, .recip=Interface} then
	{   if usb.hid.HIDRequest(_uint8(rqst.request))
	    is SetReport then
	    {
if db & db_hidother != 0 then {debug.str("CSR\n");}
	    }
	    is GetIdle then
	    {
if db & db_hidother != 0 then {debug.str("CSI\n");}
	    }
	    is GetProtocol then
	    {
if db & db_hidother != 0 then {debug.str("CSP\n");}
	    }
	}
	return 0, 0;
    }

    proc SetupIn(rqst: @usb.SetupPkt): _address, _uint
    {

	if rqst.type
	is {.dir=IN, .stype=Standard, .recip=Device} then
	{
	    if usb.StandardRequests(rqst.request)
	    is GetDescriptor then
	    {
if db & db_hidsu != 0 then {
debug.str("DGD "); debug.hex8(_uint8(rqst.type));
debug.hex8(rqst.value>>8); debug.hex8(rqst.value&0xFF); debug.nl();
}
	        if usb.DescType(_uint8(rqst.value>>8))
		is usb.DescDevice then
		    return DevDesc, DevDesc?size;
		is usb.DescConfig then
		    return SuperConfDesc, SuperConfDesc?size;
		is usb.DescString then
		{   if rqst.value&0xFF
		    is 0 then return S0, S0.Length;
		    is 1 then return S1, S1.Length;
		    is 2 then return S2, S2.Length;
		    is 3 then return S3, S3.Length;
		    else return 0, 0;	// FIXME?
		}
		is usb.DescSpeed then
		    return 0, 0; 	// only high-speed devices reply
	    }
	    is GetStatus then
	    {
if db & db_hidother != 0 then {debug.str("DGS\n");}
	    }
	    is GetConfiguration then
	    {
if db & db_hidother != 0 then {debug.str("DGI\n");}
	    }
	}
	is {.dir=IN, .stype=Standard, .recip=Interface} then
	{
	    if usb.StandardRequests(rqst.request)
	    is GetDescriptor then
	    {
if db & db_hidsu != 0 then {
debug.str("IGD "); debug.hex8(_uint8(rqst.type));
debug.hex8(rqst.value>>8); debug.hex8(rqst.value&0xFF); debug.nl();
}
	        if usb.DescType(_uint8(rqst.value>>8))
		is usb.hid.DescHID then
		    return SuperConfDesc.hid, usb.hid.HIDDesc?size;
		is usb.hid.DescReport then
		    return ReportDesc, ReportDesc?size;
	    }
	    is GetStatus then
	    {
if db & db_hidother != 0 then {debug.str("IGS\n");}
	    }
	    is GetInterface then
	    {
if db & db_hidother != 0 then {debug.str("IGI\n");}
	    }
	}    
	is {.dir=IN, .stype=Standard, .recip=EndPoint} then
	{
	    if usb.StandardRequests(rqst.request)
	    is GetStatus then
	    {
if db & db_hidother != 0 then {debug.str("EGS\n");}
	    }
	}    
	is {.dir=IN, .stype=Class, .recip=Interface} then
	{   if usb.hid.HIDRequest(_uint8(rqst.request))
	    is GetReport then
	    {
if db & db_hiddata != 0 then {debug.str("CGR\n");}
		if rqst.value>>8
		is 1 then   // input
		{
		    hs.datain[0] = rqst.value&0xFF;  // report ID
		    hs.datain[1] = 0;    // FIXME
		    return hs.datain, 2;
		}
		is 2 then   // output
		{
		    hs.datain[0] = rqst.value&0xFF;  // report ID
		    hs.datain[1] = 0;    // FIXME
		    return hs.datain, 2;
		}
		is 3 then   // feature
		{
		    hs.datain[0] = rqst.value&0xFF;  // report ID
		    hs.datain[1] = 1;    // FIXME: what are we supposed to report
		    return hs.datain, 2;
		}
	    }
	    is GetIdle then
	    {
if db & db_hidother != 0 then {debug.str("CGI\n");}
	    }
	    is GetProtocol then
	    {
if db & db_hidother != 0 then {debug.str("CGP\n");}
	    }
	}
	return 0, 0;
    }
    
    proc ReportRcvd()
    {   var n: _uint8;
	var i: _uint;
	
	n = hs.dataout[0];
if db & db_hiddata != 0 then {debug.str("RPT "); debug.hex8(n); debug.nl();}
	for i from 0 to 7 do
	{   if n & (1 << i) != 0 then
		sys.ledon(i);
	    else
		sys.ledoff(i);
	}
    }

    proc DataRcvd(ep: usbdev.eps)
    {
if db & db_hiddata != 0 then {debug.str("DR\n");}
	if ep.num == 1 then
	    ReportRcvd();
    	ep.StartOut(hs.dataout, hs.dataout?len);
    }

    proc DataSent(ep: usbdev.eps)
    {
if db & db_hiddata != 0 then {debug.str("DS\n");}
	hs.busy = false;
    }

    proc Button(n: _uint)
    {
	if n > 0 && n <= 8 && !hs.busy then
	{   _zero(hs.datain);
	    hs.datain[n-1] = 1;
	    hs.busy = true;
	    hs.epin.StartIn(hs.datain, 8);
	}
    }

    proc HIDInit()
    {
	// Get Serial Number
    	hs.CurrentConfig = 0;
    	DeviceInit();
    	hs.epout = EPAllocate({0x01, INTR, EP1RxSize});
    	hs.epin  = EPAllocate({0x81, INTR, EP1TxSize});
    	DeviceStart();
    }
}

