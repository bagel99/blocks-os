/*
 * Font data. Version 2.
 * Copyright (c) 2014, Brian G. Lucas.  See LICENSE file.
 */

package font
{
    type Glyph:
    {	width:  _uint8;
	height: _uint8;
	xsize:  _uint8;
	ysize:  _uint8;
	xoffs:  _uint8;
	yoffs:  _uint8;
	bitmap: _uint16;	// index into bitmap array for this glyph
    };

    type Range:
    {   first:  _uint16;	// first 16-bit code point
        last  : _uint16;	// last 16-bit code point 
        offset: _uint32;	// index into glyph table of first code point
    };

    type Font:
    {   version: _uint8;	// version number
	nranges: _uint8;	// number of ranges
	rsvd:    _uint16;
	width:   _uint8;	// maximum width in pixels
	height:  _uint8;	// maximum height in pixels
	space:   _uint8;	// width of space
	base:    _uint8;	// offset to baseline
	glyphs:  @[]Glyph;
	bitmaps: @[]_uint8;
	range:   []Range;
    };
    type FP: @Font;

    proc (fp: FP) GetGlyph(c: _uint16): @Glyph
    {   var i, j: _uint;

	for i from 0 to fp.nranges-1 do
	{   if c >= fp.range[i].first && c <= fp.range[i].last then
	    {   j = fp.range[i].offset + (c - fp.range[i].first);
		return fp.glyphs[j];
	    }
	}
	return 0;   
    }
}

