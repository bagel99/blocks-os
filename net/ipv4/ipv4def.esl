/*
 * IPv4 definitions
 *
 * Copyright (c) 2009-2012, Brian G. Lucas.  See LICENSE file.
 * $Id$
 */

import inet;

package ipv4
{
    alias net.EUI64 as EUI64;
    alias net.pEUI64 as pEUI64;
    alias inet.Net32 as Net32;
    alias inet.Net16 as Net16;
    alias inet.IPv4AddrLen as IPv4AddrLen;
    alias inet.IPv4Addr as IPv4Addr;
    alias inet.Proto as Proto;
    alias inet.ULHeader4 as ULHeader;
    alias inet.pULHeader4 as pULHeader;

    if _defined(sys.NIPv4Lower) then
	alias sys.NIPv4Lower as NIPv4Lower;
    else
	const NIPv4Lower = 2;

    const IPv4Type = 0x0800;
    const ArpType  = 0x0806;
    const NullAddr: IPv4Addr = { 0, 0, 0, 0 };
    const BcastAddr:IPv4Addr = { 255, 255, 255, 255 };

    type Header:
    {   vl:
	{   version: 0..15;
	    hdrlen:  0..15;
	}: packed, msb;
	tos:
	{   precedence:  0..7;
	    delay:       0..1;
	    thruput:     0..1;
	    reliability: 0..1;
	    _:		 0..3;
	}: packed, msb;
	length:	Net16;
	ident:	Net16;
	fo:
	{   _:	boolean;	// the evil bit
	    df:	boolean;
	    mf: boolean;
	    offs: 0..0x1FFF;
	}: packed, msb, be;
	ttl:	_byte;
	proto:	Proto;
	chksum:	_uint16;
	srcaddr:IPv4Addr;
	dstaddr:IPv4Addr;
    } : align(4);
    type pHeader: @Header;

    if Header?size < inet.ULHeader4?size then
	error "IPv4 Header?size < ULHeader4?size";

    const zeros: [12]_byte = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };


    proc ToDec(x: _byte, t: @[3]_byte): _uint
    {   var i: _uint;
	var n, k: _uint;

	i = 0;
	n = 100;
	do
	{   k,x = x/n, x%n;
	    n = n/10;
	    if k != 0 || i > 0 || n == 0 then
	    {   t[i] = k + '0';
	        i += 1;
	    }
	} while n != 0;
	return i;
    }
    
    proc AddrToText(a: @IPv4Addr, t: @[15]_byte): _uint
    {   var i, j: _uint;

	j = 0;
	i = 0;
	loop
	{   j += ToDec(a[i], t[j:]);
	  exit i == 3;
	    t[j] = '.';
	    j += 1;
	    i += 1;
	}
	return j;
    }

    proc FmDec(s: @[]_byte): _uint, _uint
    {   var i: _uint;
	var v: _uint;

	v = 0;
	i = 0;
	loop
	{   if s[i]
	    is '0'..'9' then v = v * 10 + (s[i] - '0');
	    else
	        return v, i;
	    i += 1;
	}
    }

    proc TextToAddr(t: @[]_byte, n: _uint, a: @IPv4Addr): _boolean
    {   var i, j, k: _uint;
	var v: _uint;

	i = 0;
	j = 0;
	loop
	{   v, k = FmDec(t[j:]);
	    if k == 0 || v > 255 then return false;
	    a[i] = v;
	    i += 1;
	  exit i == IPv4AddrLen;
	    j += k;
	    if t[j] != '.' then return false;
	    j += 1;
	}
	return true;
    }
    
    // BEGIN DEBUG
    proc PrintAddr(addr: @IPv4Addr)
    {   var i: _uint;

	i = 0;
	loop
	{   debug.uint8(addr@[i]);
	    i += 1;
	  exit i > 3;
	    debug.chr('.');
	}
    }

    proc PrintLink(linkaddr: @net.MAC)
    {   var i: _uint;

	i = 0;
	while i < 6 do
	{   debug.hex8(linkaddr@[i]);
	    i += 1;
	}
    }
    // END DEBUG

}
// vim: ts=8 sw=4 noet nowrap
	
