/*
 * IEEE 802.15.4 MAC Layer
 *
 * Copyright (c) 2014-2016, Brian G. Lucas.  See LICENSE file.
 *
 * From IEEE 802.15.4-2011:
 * [T]he leftmost bit is transmitted first in time. Bits within each
 * field are numbered from 0 (leftmost and least significant) to k â€“ 1
 * (rightmost and most significant), where the length of the field is k bits.
 * Fields that are longer than a single octet are sent ... in the order
 * from the octet containing the lowest numbered bits to the octet
 * containing the highest numbered bits.
 * [A]ll reserved bits shall be set to zero upon transmission and may be
 * ignored upon receipt.
 * A deviceâ€™s extended address shall be a 64-bit universal address,
 * as defined by the IEEE Registration Authority.
 */

if !_defined(EnableEncryption) then
    const EnableEncryption: boolean = false;

import crc_itut16;

if EnableEncryption then import aesccm;

import ieee802154def;

package ieee802154
{
    if _defined(debug.db_802154) then
	alias debug.db_802154 as db;
    else
	const db = 0;
    alias crc_itut16 as crc;

    /*
     * IEEE 802.15.4 addresses and pan ids are little-endian in the frame.
     * The upper level stuff all assumes big-endian (internet network order).
     * This makes address parsing and generation more complicated.
     */
    proc RevAddrLong(to: @AddrLong, fm: @AddrLong)
    {   var i: _uint;

	i = 8;
	do
	{   i -= 1;
	    to[7-i] = fm[i];
	} while i != 0;
    }

    proc AddrLongFromShort(to: @AddrLong, fm: @[2]_uint8)
    {
	to[0:6] = ShortUUID[0:6];
	to[6] = fm[1];
	to[7] = fm[0];
    }

    proc AddrShortFromLong(to: @[2]_uint8, fm: @AddrLong)
    {
	to[0] = fm[7];
	to[1] = fm[6];
    }


    // MAC Header
    type FrameType: ( Beacon, Data, Ack, Comd ): bits(3);
    type AddrMode:  ( None, _, Short, Long );
    type FrameCF0:	// 1st octet of FCF
    {	ft:	FrameType;	// .00-02
	se:	boolean;	// .03 security enabled
	fp:	boolean;	// .04 frame pending
	ar:	boolean;	// .05 ACK request
	ip:	boolean;	// .06 Intra-PAN
	_:	0..1;		// .07 reserved
    }: packed, lsb;
    type FrameCF1:	// 2nd octet of FCF
    {	_:	0..3;		// .00-01 reserved
	dm:	AddrMode;	// .02-03 destination address mode
	vers:	0..3;		// .04-05 frame version
	sm:	AddrMode;	// .06-07
    }: packed, lsb;
    type FrameCF:
    {	f0:	FrameCF0;
	f1:	FrameCF1;
    };
    type  Header:
    {	f0:	FrameCF0;
	f1:	FrameCF1;
	seqno:  0..255;
	addr:   []_uint8;
    };
    type pHeader: @Header;

    type CryptoAlg:    (NONE, CBC, CTR, CCM);
    const Algorithm:   [SecLevel]CryptoAlg =
	{ NONE,CBC, CBC, CBC, CTR, CCM, CCM, CCM };
    const MICLength:   [SecLevel]_uint8 =
	{ 0,   4,   8,   16,  0,   4,   8,   16 };

    const HasKeyIndex: [KeyMode]boolean = { false, true, true, true };
    const KeyIDLength: [KeyMode]_uint8  = { 0, 0, 4, 8 };
    // Total size of auxiliary security header
    const SecuritySize:[KeyMode]_uint8  = { 5, 6,10,14 };

    /*
     * Type Intra Dst  Src | Dst Dst Src Src  Tot
     *       PAN Mode Mode | Pan Adr Pan Adr  Hdr
     *  1,3   x    0    0                            Invalid?
     *  1,3   x    0    2     0   0   2   2    7     To PAN coordinator
     *  1,3   x    0    3     0   0   2   8   13     To PAN coordinator
     *  1,3   x    2    0     2   2   0   0    7     From PAN coordinator
     *  1,3   x    3    0     2   8   0   0   13     From PAN coordinator
     *  1,3   0    2    2     2   2   2   2   11
     *  1,3   1    2    2     2   2   0   2    9     SrcPan=DstPan
     *  1,3   0    2    3     2   2   2   8   17
     *  1,3   1    2    3     2   2   0   8   17     SrcPan=DstPan
     *  1,3   0    3    2     2   8   2   2   17
     *  1,3   1    3    2     2   8   0   2   15     SrcPan=DstPan
     *  1,3   0    3    3     2   8   2   8   23
     *  1,3   1    3    3     2   8   0   8   21     SrcPan=DstPan
     *   0    x    0    2     0   0   2   2    7     Beacon
     *   0    x    0    8     0   0   2   8   13     Beacon
     *   2    x    0    0     0   0   0   0    3     Ack, no addresses allowed
     */


    proc MakeNonce(adr: @[8]_uint8, ctr: _uint32, lvl: _uint8, nonce: @[13]_uint8)
    {
	nonce[0:8] = adr@;
	_packbe(nonce[8:4], ctr);
	nonce[12] = lvl;
    }

if EnableEncryption then
{
    proc Decrypt(frame: @[]_byte, info: @FrameInfo)
    {
	var h: pHeader;
	var sh: SecurityControl;
	var n, len, miclen: _uint;
	var frmctr: _uint32;
	var key: @[16]_uint8;
	var srcadr: @[8]_uint8;
	var mic: [16]_uint8;	// maximum size
	var nonce: [13]_uint8;
	var ctx: aesccm.State;

	n = info.datoff;
	len = info.datlen;
	sh = frame[n];
	frmctr = _unpkle(frame[n+1:4]);
if db > 1 then {
debug.str("secure lvl="); debug.uint8(_uint8(sh.level));
debug.str(" keymode="); debug.uint8(_uint8(sh.keymode));
debug.str(" frmctr="); debug.uint32(frmctr); debug.nl(); }
	n += 5;		// size of fixed part of security stuff
	if sh.level < ENC then
	{
if db > 0 then { debug.str("Unimplemented security level\n"); }
	    return;
	}
	srcadr = 0;	// check this later
	if sh.keymode
	is IMPLICIT then
	{   key = GetMacKeyImplicit(info.srcadr);
	}
	is KEY0 then
	{   key = GetMacKeyIndex(frame[n]);
	    n += 1;	// index only
	}
	is KEY4 then
	{   key,srcadr = GetMacKeyId(frame[n], _uint64(_unpkbe(frame[n+1:4])));
	    n += 5;	// index plus 4 byte
	}
	is KEY8 then
	{   key,srcadr = GetMacKeyId(frame[n], _uint64(_unpkbe(frame[n+1:8])));
	    n += 9;	// index plus 8 byte
	}
	len -= n - info.datoff;		// datoff increased by this
	miclen = MICLength[sh.level];
	len -= miclen;
	// At this point we know the offset and size of the payload
	info.datoff = n;
	info.datlen = len;
	/*
	 * In order to decrypt, we need the laddr of the source.
	 * If the frame only had a saddr, then we need to look it up.
	 */
	if srcadr == 0 then
	    srcadr = info.srcadr;
	MakeNonce(srcadr, frmctr, _uint8(sh.level), nonce);
if db > 1 then
{ debug.dumpb("nonce: ", nonce, 13);
  debug.dumpb("key: ", key, 16);
}
	/*
	 *  Command frames with frame version < 2 do not encrypt
	 *  the first payload byte but use it as last byte of header.
	 */
	h = pHeader(frame);
	if h.f0.ft == Comd && h.f1.vers < 2 then
	{   n += 1;		// temporarily expand header
	    len -= 1;		// and contract payload
	}
if db > 1 then {
debug.str("alen="); debug.uint(n);
debug.str(" plen="); debug.uint(len);
debug.str(" mlen="); debug.uint(miclen);
debug.dumpb("\nencrypted data\n", frame[n:], len);
}
	ctx.SetKey(key, KEY128);
	ctx.Start(n, len, miclen, nonce, 13);
	ctx.Header(frame[0:], n);
	ctx.Decrypt(frame[n:], frame[n:], len);
	ctx.Finish(mic, miclen);
if db > 1 then {
debug.dumpb("\ndecrypted data\n", frame[n:], len);
}
	if miclen > 0 && mic[0:miclen] != frame[n+len:miclen] then
	{
if db > 0 then {
debug.str("message integrity check failed\n");
debug.dumpb("computed mic: ", mic, miclen);
debug.dumpb("actual mic:   ", frame[n+len:], miclen); }
	    info.datlen = 0;
	}
    }

    proc Encrypt(frame: @[]_byte, info: @FrameInfo): _uint
    {   var k, n, miclen: _uint;
	var nonce: [13]_uint8;
	var sh: SecurityControl;
	var ctx: aesccm.State;
	var key: @[16]_byte;
	var mic: [16]_uint8;	// maximum size

if db > 1 then {
debug.str("ieee820154.Encrypt off="); debug.uint8(info.datoff);
debug.str(" len="); debug.uint8(info.datlen); debug.nl(); }
	sh = info.flags.secctl;
	n = info.datlen;
	k = info.datoff;
if db > 2 then debug.dumpb("plain\n", frame[n:], info.datlen);
	k -= SecuritySize[sh.keymode];
	// build the security header
	frame[k] = _uint8(sh);
	_packle(frame[k+1:4], info.frmctr);
	k += 5;
	if sh.keymode
	is IMPLICIT then
	{   // FIXME
debug.str("ieee820154.Encrypt: key mode 0 not implemented\n");
	}
	is KEY0 then
	{   key = GetMacKeyIndex(info.index);
	    frame[k] = info.index;
	    k += 1;	// index only
	}
	is KEY4 then
	{   key = GetMacKeyId(info.index, _uint64(info.misc));
	    frame[k] = info.index;
	    _packbe(frame[k+1:4], info.misc);
	    k += 5;	// index plus 4 byte
	}
	is KEY8 then
	{   //key = GetMacKeyId(frame[n], _uint64(_unpkbe(frame[n+1:8])));
	    frame[k] = info.index;
debug.str("ieee820154.Encrypt: key mode 3 not implemented\n");
	    k += 9;	// index plus 8 byte
	}

	miclen = MICLength[sh.level];
if db > 1 then {
debug.str(" alen="); debug.uint(k);
debug.str(" plen="); debug.uint(n);
debug.str(" mlen="); debug.uint(miclen); debug.nl();
}
	MakeNonce(info.srcadr, info.frmctr, _uint8(sh.level), nonce);
if db > 1 then
{ debug.dumpb("nonce: ", nonce, 13);
  debug.dumpb("key: ", key, 16);
}
	ctx.SetKey(key, KEY128);
	ctx.Start(k, n, miclen, nonce, 13);
//debug.dumpb("header:\n", frame[0:], k);
	ctx.Header(frame[0:], k);
	ctx.Encrypt(frame[k:], frame[k:], n);
	ctx.Finish(mic, miclen);
	if miclen > 0 then
	{   frame[k+n:miclen] = mic[0:miclen];
	    k += miclen;
	}
	return k+n;
    }


}	// end if EnableEncryption

    var ackframe: [5]_uint8;

    proc SendAck(info: @FrameInfo)
    {

	ackframe[0] = _uint8(FrameCF0{.ft=Ack});
	ackframe[1] = 0;
	ackframe[2] = info.seqno;
	RadioSend(ackframe, 3);
    }

    proc Recv(frame: @[]_uint8, len: _uint, info: @FrameInfo)
    {
	var n: _uint;
	var h: pHeader;
	var srcpan, dstpan: _uint16;

	info.datlen = 0;	// default for errors
	info.flags = {};
	if !radio.autofcs then
        {   var fcs: _uint16;
            fcs = crc.calc(frame, len);
            if fcs != 0 then
            {
debug.str("fcs error="); debug.hex16(fcs); debug.nl();
		info.flags = {.fcserr = true};
		return;
	    }
	    len -= 2;	// snip fcs
	}
	h = pHeader(frame);
if db > 1 then {
debug.str("ft="); debug.uint8(_uint8(h.f0.ft));
debug.str(" ar="); debug.uint8(_uint8(h.f0.ar));
debug.str(" se="); debug.uint8(_uint8(h.f0.se));
debug.str(" ip="); debug.uint8(_uint8(h.f0.ip));
debug.str(" dm="); debug.uint8(_uint8(h.f1.dm));
debug.str(" sm="); debug.uint8(_uint8(h.f1.sm));
debug.str(" ver="); debug.uint8(_uint8(h.f1.vers));
debug.str(" seqno="); debug.uint8(h.seqno);
debug.str(" len="); debug.uint(len);
debug.nl(); }
	info.seqno = h.seqno;
	info.flags = {};
	if h.f0.ft == Ack then
	{   info.flags = {.rack = true};
	    return;
	}
	if h.f0.ar && !radio.autoack then
	{   info.flags = {.sack = true};
	    SendAck(info);
	}
	n = 0;		// offset to data from start of address fields
	if h.f1.dm != None then
	{   dstpan = _unpkle(h.addr[n:2]);
	    n += 2;
	    if h.f1.dm == AddrMode.Short then
	    {   AddrLongFromShort(info.dstadr, h.addr[n:2]);
		n += 2;
	    } else	// assume Long
	    {   RevAddrLong(info.dstadr, h.addr[n:8]);
		n += 8;
	    }
	}
	if h.f1.sm == None then
	{   // assert h.f1.dm != None
	    srcpan = dstpan;		// From PAN coordinator
	}
	else
	{   if h.f0.ip then
	    {   // assert h.f1.dm != None
		srcpan = dstpan;
	    }
	    else
	    {   srcpan = _unpkle(h.addr[n:2]);
		n += 2;
	    }
	    if h.f1.sm == AddrMode.Short then
	    {   AddrLongFromShort(info.srcadr, h.addr[n:2]);
	        n += 2;
	    } else	// assume Long
	    {   RevAddrLong(info.srcadr, h.addr[n:8]);
		n += 8;
	    }
	    if h.f1.dm == None then
	    	dstpan = srcpan;	// To PAN coordinator
	}
	n += 3;		// basic header
	info.datoff = n;
	info.datlen = len - n;
	info.dstpan = dstpan;
	info.srcpan = srcpan;
	if h.f0.se then
	{   if EnableEncryption then
		Decrypt(frame, info);
	    else
	    {
if db > 0 then debug.str("ieee820154 cannot decrypt\n");
		info.datlen = 0;
	    }
	}
	if h.f0.ft
	is Beacon then
	{
if db > 0 then debug.dumpb("ieee820154 beacon received\n",
frame[info.datoff:], info.datlen);
	    info.datlen = 0;
	}
	is Comd then
	{
if db > 0 then debug.dumpb("ieee820154 command received\n",
frame[info.datoff:], info.datlen);
	    info.datlen = 0;
	}
    }

    proc Xmit(data: @[]_uint8, len: _uint, info: @FrameInfo)
    {   var h0: FrameCF0;
	var h1: FrameCF1;
	var frame: [128]_uint8;
	var n: _uint;

	h0 = {.ft=Data, .ar=info.flags.wack};
	if info.flags.secctl != {.level=NONE} then
	    h0.se = true;
	h1 = {.vers=1};
	n = 3;
	if info.dstpan != 0 then
	{   _packle(frame[n:2], info.dstpan);
	    n += 2;
	    if info.srcpan == info.dstpan then
		h0.ip = true;
	    else
	    {	_packle(frame[n:2], info.srcpan);
		n += 2;
	    }
	}
	if info.dstadr[3:2] == ShortUUID[3:2] then
	{   h1.dm = Short;
	    AddrShortFromLong(frame[n:2], info.dstadr);
	    n += 2;
	}
	else
	{   h1.dm = Long;
	    RevAddrLong(frame[n:8], info.dstadr);
	    n += 8;
	}
	if info.srcpan != 0 && !h0.ip then
	{   _packle(frame[n:2], info.srcpan);
	    n += 2;
	}
	if info.srcadr[3:2] == ShortUUID[3:2]  then
	{   h1.sm = Short;
	    AddrShortFromLong(frame[n:2], info.srcadr);
	    n += 2;
	}
	else
	{   h1.sm = Long;
	    RevAddrLong(frame[n:8], info.srcadr);
	    n += 8;
	}
	frame[0] = _uint8(h0);
	frame[1] = _uint8(h1);
	frame[2] = info.seqno;
	if EnableEncryption && info.flags.secctl != {.level=NONE} then
	{   n += SecuritySize[info.flags.secctl.keymode]; // security header
	    info.datoff = n;
	    info.datlen = len;
	}
	frame[n:len] = data[0:len];
	n += len;
	if EnableEncryption && info.flags.secctl != {.level=NONE} then
	    n = Encrypt(frame, info);
	RadioSend(frame, n);
    }

    proc HeaderLength(fcf: FrameCF): _uint
    {   var n: _uint;
	const AddrLen: [boolean][AddrMode]_uint8  =
	    {{ 0, 0, 4,10 },{ 0, 0, 2, 8 }};

	n = 3 + AddrLen[false][fcf.f1.dm] + AddrLen[fcf.f0.ip][fcf.f1.sm];
	if fcf.f0.se then n += 1;
	return n;
    }


    proc MaxPayload(fcf: FrameCF, secctl: SecurityControl): _uint
    {   var max: _uint;

	max = MTU - FCS - HeaderLength(fcf);
	if secctl != {.level=NONE} then
	    max -= SecuritySize[secctl.keymode];
	return max;
    }


    proc SendBeacon(payload: @[]_uint8, info: @FrameInfo)
    {   var frame: [128]_uint8;


    }


    /*
     * Command Frame Identifiers
     */
    type ComdId:
    (	AssocRequest	=0x01,	AssocResponse	=0x02,
	DisAssocNotify	=0x03,	DataRequest	=0x04,
	PANIDBadNotify	=0x05,	OrphanNotify	=0x06,
	BeaconRequest	=0x07,	CoordRealign	=0x08,
	GTSRequest	=0x09,
	EndReserved	=0xFF
    );

    type CapabilityInfo:
    {	_: 0..1;		// .00 reserved
	devtype:  (RFD, FFD);	// .01 device type
	pwrsrc:   (BATT, MAINS);// .02 power source
	rcvron:   boolean;	// .03 receiver on when idle
	_:        0..0b11;	// .04-05 reserved
	seccap:   boolean;	// .06 security capabilty
	allocadr: boolean;	// .07 allocate address
    }: packed, lsb, bits(8);


    proc SendBeaconRequest(seqno: _uint8)
    {   var frame: [8]_uint8;

	frame[0] = _uint8(FrameCF0{.ft=Comd, .fp=false});
	frame[1] = _uint8(FrameCF1{.dm=Short, .sm=None, .vers=1});
	frame[2] = seqno;
	_packle(frame[3:2], BroadcastPAN);
	_packle(frame[5:2], BroadcastAddr);
	frame[7] = _uint8(ComdId.BeaconRequest);
	RadioSend(frame, 8);
    }

    type  ScanTypes: (ED, Active, Passive, Orphan);
    const NumChannels = 32;
    type  ChannelRange: 0..NumChannels-1;
    type  ChannelMap: [NumChannels] boolean;
    type  ScanDuration: 0..14;

    var   SupportedChannels: ChannelMap;

    // MLME-SCAN.request
    proc Scan(ScanType: ScanTypes,
	    RequestedChannels: ChannelMap,
	    Duration: ScanDuration)
    {
	if ScanType
	is ScanTypes.ED then
	{
//	  for chan in ChannelRange
//	  {   if SupportedChannels[chan] and RequestedChannels[chan]
//	      then
//	      {   PHYSetChannel(chan);
//
//	      }
//	  }
	}
	is ScanTypes.Orphan then
	{
	}
	is ScanTypes.Active then
	{
	}
	is ScanTypes.Passive then
	{
	}
    }
}
