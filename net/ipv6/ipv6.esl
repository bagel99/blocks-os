/*
 * IPv6
 * Needs more work.
 *
 * Copyright (c) 2009-2014, Brian G. Lucas.  See LICENSE file.
 * $Id$
 */

import ipv6def;
import timer;

package ipv6	// continue with implementation
{
    alias event.Event as Event;
    alias event.pEvent as pEvent;
    alias mbuf.pMBuf as pMBuf;
    alias block.Block as Block;
    alias block.pBlock as pBlock;
    alias block.BlockID as BlockID;

    if !_defined(db) then
    {   if _defined(debug.db_ipv6) then
	    alias debug.db_ipv6 as db;
	else
	    const db = 0;
    }
    if _defined(config.ipv6_promiscuous) then
	alias config.ipv6_promiscuous as promiscuous;
    else
	const promiscuous: boolean = false;

    type Upper:
    {   next:    @Upper;
	bid:     BlockID;
	tag:     _uint8;
	proto:   Proto;
    };
    type pUpper: @Upper;
    

    if _defined(sys.NIPv6Lower) then
	alias sys.NIPv6Lower as NIPv6Lower;
    else
	const NIPv6Lower = 2;

    // PREFIX CACHE
    type AddrState: (DOWN, TENTATIVE, WAITDAD, DEPRECATED, PREFERRED);
    type IntfAddrEntry:
    {   addr:   IPv6Addr;
	next:   @IntfAddrEntry;
	vlifet: _uint32;	// lifetime in seconds
	len:    _uint8;		// prefix length
	state:  AddrState;
	kind:   AddrKind;
    }: align(8);
    type pIntfAddrEntry: @IntfAddrEntry;

    // INTERFACE STATE
    // For the interfaces we are interested in, namely ethernet and PPP,
    // interface ids are 8 bytes long.
    const iidlen = 8;
    type Lower:
    {   iid:       [iidlen]_byte;       // interface ID, may be smaller
	ifn:       _uint8;
	bid:       BlockID;		// of lower block
	type:      comm.LinkType;
        state:     AddrState;		// state of DAD for link local addr
	rsage:     _uint16;		// router solicitation aging
	mtu:       _uint16;		// e.g, 1500 for ethernet
	hdr:       _uint8;		// space for link level header(s)
	trl:       _uint8;
	iftimer:   (NONE, RUN);		// interface timer state
	block:     @IPv6Block;		// my block
	prefixes:  @IntfAddrEntry;
	multicast: @IntfAddrEntry;
	neighbors: @NCacheEntry;	// forward
    }: align(8);
    type pLower: @Lower;

    type IPv6Block(Block):
    {   upper:     pUpper;			// upper level protocols
	lower:     [NIPv6Lower]pLower;		// interfaces
	fraghead:  @FragEntry;			// forward
	hdr:       _uint8;			// max over all interfaces
	trl:       _uint8;			// max over all interfaces
	ifcount:   _uint8;			// number of ready interfaces
	IsRouter:  boolean;
    };
    type pIPv6Block: @IPv6Block;

    // The lower level is an IPv6 'interface'.
    const LinkAddrLen: [comm.LinkType]_uint8 =
	{   [UNKN]=0,  [ENET]=6,  [PPP]=8,   [WPAN]=8  };
    const EnetMulticast: [2]_byte = { 0x33, 0x33 };


// BEGIN DEBUG
    proc DumpIntfID(intf: pLower)
    {   var i: _uint;

	i = 0;
	while (i < iidlen) do
	{   debug.hex8(intf.iid[i]);
	    i += 1;
	}
    }

    proc (intf: pLower) DumpAllAddr()
    {   var pa: pIntfAddrEntry;

	debug.str("Interface: "); debug.uint(intf.ifn); 
	debug.str("\nUnicast:\n");
	pa = intf.prefixes;
	while pa != 0 do
	{   AddrPrint(pa.addr); debug.nl();
	    pa = pa.next;
	}
	debug.str("Multicast:\n");   
	pa = intf.multicast;
	while pa != 0 do
	{   AddrPrint(pa.addr); debug.nl();
	    pa = pa.next;
	}
    }

    proc DumpPacket(msg: @[]_byte, mb: pMBuf, ip: pHeader, la: pEUI64)
    {
	debug.str(msg);
	debug.str(": ifn="); debug.uint8(mb.tag);
	debug.str(" size="); debug.uint32(_uint32(mb.Size()));
	debug.str(" length="); debug.uint32(ip.length);
	debug.str(" proto="); debug.hex8(_uint8(ip.proto));
	if la != 0 then
	{   debug.str("\n\tla="); MACPrint(la, 8);
	}
	debug.str("\n\tfm="); AddrPrint(ip.srcaddr);
	debug.str("\n\tto="); AddrPrint(ip.dstaddr);
	debug.nl();
if db > 4 then debug.dumpb("data", mb.Data(), mb.Size());
    }
//END DEBUG

    // forwards
    proc (intf: pLower) ISend(mb: pMBuf, ip: pHeader);
    proc (intf: pLower) SendNS(src: @IPv6Addr, dst: @IPv6Addr, tgt: @IPv6Addr);
    proc (intf: pLower) SendRS(dst: @IPv6Addr);
    proc (intf: pLower) SendICMP(mb: pMBuf, ip: pHeader, ic: pICMPHeader);
    proc (ib: pIPv6Block) Route(mb: pMBuf);

    // Interface numbers (ifn) are 1-based
    proc (ib: pIPv6Block) GetInterface(ifn: _uint): pLower: inline
    {
	ifn -= 1;
	if ifn < NIPv6Lower then
	    return ib.lower[ifn];
	return 0;
    }

    proc (intf: pLower) GetLinkLocalAddress(addr: @IPv6Addr)
    {
	addr[0:8] = LinkLocalPrefix;
	addr[8:8] = intf.iid;
    }

    // Returns first global address found
    proc (intf: pLower) GetGlobalAddress(addr: @IPv6Addr): boolean
    {   var pa: pIntfAddrEntry;

	pa = intf.prefixes;
	while pa != 0 && pa.kind.scope != Global do
	    pa = pa.next;
	if pa == 0 then return false;
	addr@ = pa.addr;
	return true;
    }

    // This is only used to get an address to display to a user
    proc (ib: pIPv6Block) GetAddress(ifn: _uint, addr: @IPv6Addr): _uint
    {   var intf: pLower;

       intf = ib.GetInterface(ifn);
       if intf != 0 && intf.state == PREFERRED then
       {   intf.GetLinkLocalAddress(addr);
           return 1;
       }
       return 0;
    }



    /*
     * NEIGHBOR CACHE SUPPORT
     */

    type NCState: (INCOMPLETE, REACHABLE, STALE, DELAY, PROBE);
    type NCacheEntry:
    {   addr:	IPv6Addr;
	next:	@NCacheEntry;
	queue:	pMBuf;
	laddr:	[8]_byte;   // e.g., 6 for ENET, 8 for WPAN
	state:	NCState;
	age:	_uint8;
    }: align(8);
    type pNCacheEntry: @NCacheEntry;
    const ReachableTO = 60;
    const IncompleteTO = 5;

    proc (intf: pLower) NCacheDump()
    {   var pnc: pNCacheEntry;
	var adrlen: _uint;

	adrlen = LinkAddrLen[intf.type];
	debug.str("Neighbor Cache:\n");
	pnc = intf.neighbors;
	while pnc != 0 do
	{   debug.hex32(_uint32(pnc));
	    debug.str(": ");
	    AddrPrint(pnc.addr);
	    debug.str("\n\tstate=");
	    debug.uint8(_uint8(pnc.state));
	    debug.str(" age=");
	    debug.uint8(pnc.age);
	    debug.str(" laddr=");
	    MACPrint(pnc.laddr, adrlen);
	    debug.nl();
	    pnc = pnc.next;
	}
    }

    proc (intf: pLower) NCacheFind(ipaddr: @IPv6Addr): pNCacheEntry
    {   var pnc: pNCacheEntry;

	pnc = intf.neighbors;
	while pnc != 0 && !AddrSame(ipaddr, pnc.addr) do
	    pnc = pnc.next;
if db > 3 then {debug.str("ipv6.NCacheFind: "); AddrPrint(ipaddr);
if pnc == 0 then debug.str(" not");
debug.str(" found\n"); }
	return pnc;
    }

    proc (intf: pLower) DeleteQueue(pnc: pNCacheEntry)
    {   var mb, nb: pMBuf;

	mb = pnc.queue;
	while mb != 0 do
	{   nb = mb.GetNext();
	    mbuf.Free(mb);
	    mb = nb;
	}
    }

    proc (intf: pLower) SendQueue(pnc: pNCacheEntry)
    {   var mb, nb: pMBuf;

	mb = pnc.queue;
	while mb != 0 do
	{   nb = mb.GetNext();
if db > 2 then {debug.str("ipv6.SendQueue\n");}
	    intf.ISend(mb, pHeader(mb.Data()));
	    mb = nb;
	}
	pnc.queue = 0;
    }

    proc (intf: pLower) NCacheAdd(ipaddr: @IPv6Addr, linkaddr: @[]_byte): pNCacheEntry
    {   var pnc: pNCacheEntry;
	var toaddr, myaddr: IPv6Addr;
	var adrlen: _uint;

if db > 3 then {debug.str("ipv6.NCacheAdd: "); AddrPrint(ipaddr); debug.nl();}
	// First check if already in cache
	pnc = intf.neighbors;
	while pnc != 0 && !AddrSame(ipaddr, pnc.addr) do
	    pnc = pnc.next;
	if pnc == 0 then
	{
if db > 3 then {debug.str("\tnew entry\n");}
	    pnc = _new(NCacheEntry);
	    pnc.addr = ipaddr@;
	    pnc.queue = 0;
	    pnc.next = intf.neighbors;
	    intf.neighbors = pnc;
	}
	if intf.type
	is PPP then
	{   pnc.age = 0;    // infinite
	    pnc.state = REACHABLE;
	}
	is WPAN then
	{   pnc.age = 0;    // FIXME
	    pnc.state = REACHABLE;
	}
	is ENET then
	{   if linkaddr != 0 then
	    {   adrlen = LinkAddrLen[intf.type];
		pnc.laddr[0:adrlen] = linkaddr[0:adrlen];
		pnc.age = ReachableTO;
		pnc.state = REACHABLE;
if db > 3 then {debug.str("\tlinkaddr="); MACPrint(linkaddr, adrlen); debug.nl();}
		if pnc.queue != 0 then intf.SendQueue(pnc);
	    }
	    else
	    {   pnc.age = IncompleteTO;
		pnc.state = INCOMPLETE;
		toaddr[0:13] = SolicitedPrefix;
		toaddr[13:3] = ipaddr[13:3];
		myaddr[0:8] = LinkLocalPrefix;
		myaddr[8:8] = intf.iid;
		intf.SendNS(myaddr, toaddr, ipaddr);
	    }
	}
if db > 5 then {intf.NCacheDump();}	
	return pnc;
    }

    /*
     * Neighbor cache entries are timed out here.
     * The approach is very simple compared to RFC4861.
     * We don't implement the states STALE, DELAY, and PROBE;
     * and we don't take hints from upper levels.
     * This will result in more NS packets being sent.
     */
    proc (intf: pLower) NCacheTimer()
    {   var pnc, pnp, pnn: pNCacheEntry;

	pnp = 0;
	pnc = intf.neighbors;
	while pnc != 0 do
	{   pnn = pnc.next;
	    if pnc.age != 0 then    // 0 => infinite
	    {   pnc.age -=  1;
		if pnc.age == 0 then
		{   // send error upward for every item in queue
		    // FIXME: for now just discard
		    intf.DeleteQueue(pnc);
		    // then discard entry
if db > 3 then {debug.str("ipv6.NCacheTimer discard state=");
debug.uint8(_uint8(pnc.state));
debug.str(" queue="); debug.hex(_uint(pnc.queue)); debug.nl(); }
		    if pnp == 0 then
			intf.neighbors = pnn;
		    else
			pnp.next = pnn;
		    _delete(pnc);
		}
		else if pnc.state == INCOMPLETE then
		{   // intf.SendNS
if db > 3 then {debug.str("ipv6.NCacheTimer should send NS\n");}
	        }
	    }
	    pnp = pnc;
	    pnc = pnn;
	}
    }

    /*
     * Per interface timers
     */
    type TimerID:
    (   NC,     // neighbor cache aging, initially used for DAD
	RS,     // router solicitation
    );

    proc GetTimerID(tag: _uint8): TimerID: inline
    {
	return TimerID(tag >> 4);
    }

    // if te is 0 need new event, otherwise reuse te
    proc (intf: pLower) TimerSeconds(te: timer.pTimerEvent,
		tid: TimerID, sec: _uint)
    {   var tag: _uint8;

	if te == 0 then
	    te = timer.Alloc();
	tag = _uint8(tid) << 4 | intf.ifn;
	te.RestartSeconds(tag, sec);
    }

    // if te is 0 need new event, otherwise reuse te
    proc (intf: pLower) TimerMilliSeconds(te: timer.pTimerEvent,
		tid: TimerID, msec: _uint)
    {   var tag: _uint8;

	if te == 0 then
	    te = timer.Alloc();
	tag = _uint8(tid) << 4 | intf.ifn;
	te.RestartMilliSeconds(tag, msec);
    }

    // Per interface timer, returns next timeout in seconds
    proc (intf: pLower) Timer(te: timer.pTimerEvent)
    {   var nexttime: _uint;
	var toaddr, myaddr: IPv6Addr;

if db > 4 then { debug.str("ipv6.IntfTimer "); debug.uint8(intf.ifn);
debug.str(" state="); debug.uint8(_uint8(intf.state)); debug.nl(); }
	nexttime = 1;   // default
	if intf.state
	is DOWN then
	    nexttime = 0;
	is TENTATIVE then
	{   intf.state = WAITDAD;
	    toaddr[0:13] = SolicitedPrefix;
	    toaddr[13:3] = intf.iid[5:3];
	    myaddr[0:8] = LinkLocalPrefix;
	    myaddr[8:8] = intf.iid;
	    intf.SendNS(myaddr, toaddr, myaddr);
	    nexttime = 2;   // FIXME: what is the correct timeout?
	}
	is WAITDAD then
	{   intf.state = PREFERRED;
	    intf.rsage = 1;
	}
	is PREFERRED then
	{   intf.rsage -= 1;
	    if intf.rsage == 0 then
	    {   intf.SendRS(AllRoutersAddr);
		intf.rsage = RSTimeout;
	    }
	    intf.NCacheTimer();
	}
	if nexttime != 0 then
	    te.RestartSeconds(intf.ifn, nexttime);
	else
	{
if db > 3 then {debug.str("ipv6.Timer deleted\n");}
	    event.Free(te);
	}
    }


    /*
     * PREFIX CACHE SUPPORT
     */

    proc (intf: pLower) PfxCacheFind(prefix: @IPv6Addr, len: _uint): pIntfAddrEntry
    {   var pp: pIntfAddrEntry;

if db > 3 then {debug.str("ipv6.PfxCacheFind: "); PrefixPrint(prefix, len);
debug.nl();}
	pp = intf.prefixes;
	while pp != 0 && !Match(prefix, pp.addr, len) do
	    pp = pp.next;
	return pp;
    }

    proc (intf: pLower) PfxCacheAdd(prefix: @IPv6Addr, len: _uint, vlifet: _uint32)
    {   var pp: pIntfAddrEntry;
	var n: _uint;

if db > 3 then {debug.str("ipv6.PfxCacheAdd: "); PrefixPrint(prefix, len);
debug.nl();}
	pp = _new(IntfAddrEntry);
	n = len/8;   // FIXME: what if len is not a multiple of 8?
	pp.addr[0:n] = prefix[0:n];
	if len < 128 then   // not a complete address
	{   // FIXME: what if len is not 64
	    pp.addr[8:8] = intf.iid;
	}
	// FIXME: should be sorted by length, longest first
	pp.len = _uint8(len);
	pp.vlifet = vlifet;
	pp.state = TENTATIVE;
	pp.kind = GetAddrKind(prefix);
	pp.next = intf.prefixes;
	intf.prefixes = pp;
if db > 5 then { intf.DumpAllAddr();}
    }

    proc (intf: pLower) PfxCacheDelete(pp: pIntfAddrEntry)
    {   var pn: pIntfAddrEntry;

	pn = intf.prefixes;
	if pn == pp then	// first on list
	    intf.prefixes = pp.next;
	else
	{   while pn != 0 && pn.next != pp do
		pn = pn.next;
	    pn.next = pp.next;
	}
	_delete(pp);
    }

    proc (intf: pLower) AddrAddMulticast(a: @IPv6Addr)
    {   var pa: pIntfAddrEntry;

if db > 3 then {debug.str("ipv6.AddrAddMulticast: "); AddrPrint(a);
debug.nl();}
	pa = _new(IntfAddrEntry);
	pa.addr = a@;		// array copy
	pa.next = intf.multicast;
	intf.multicast = pa;
    }

    proc (intf: pLower) OurIID(iid: @[8]_byte): boolean
    {   var i: _uint;

	i = 0;
	while i < 8 do
	{   if intf.iid[i] != iid[i] then return false;
	    i += 1;
	}
	return true;
    }

    proc (intf: pLower) ToUs(dst: @IPv6Addr): boolean
    {   var akind: AddrKind;
	var pa: pIntfAddrEntry;

	akind = GetAddrKind(dst);
	// FIXME - need a better way to match builtin multicast addresses
	// so we don't neet to allocate space for each entry
	if akind.type
	is UNICAST then pa = intf.prefixes;
	is MULTICAST then pa = intf.multicast;
	while pa != 0 do
	{   if AddrSame(dst, pa.addr) then return true;
	    pa = pa.next;
	}
	return false;
    }

    // Routines that already have an IPv6 header attached use this
    proc (intf: pLower) ISend(mb: pMBuf, ip: pHeader)
    {   var pnc: pNCacheEntry;
	var la: pEUI64;

	if intf.type != PPP then
	{   // Build link destination header
	    la = pEUI64(mb.GrowHead(EUI64?size));
	    if IsMulticast(ip.dstaddr) then
	    {   la@[0:2] = EnetMulticast;
		la@[2:4] = ip.dstaddr[12:4];
	    }
	    else
	    {   pnc = intf.NCacheFind(ip.dstaddr);
		if pnc == 0 then
		{   pnc = intf.NCacheAdd(ip.dstaddr, 0);
		    if pnc != 0 then
		    {   mb.ShrinkHead(EUI64?size);
			mb.SetNext(pnc.queue);
			pnc.queue = mb;
		    }
		    return;     // queued until address resolution
		}
		la@[0:6] = pnc.laddr[0:6];
		// FIXME
	    }
	}
if db > 2 then DumpPacket("ipv6.ISend", mb, ip, 0);
	mb.info = IPv6Type;
	mb.code = SEND;
	mb.tag  = intf.ifn;       // tag event with interface number
	intf.bid.Send(mb);
    }

    // Select a source address based on destination address
    // Uses a subset of rules from RFC3484
    proc (ib: pIPv6Block) SourceAddress(ifn: _uint8, dst: @IPv6Addr,
	/*returned*/ src: @IPv6Addr): _uint8
    {   var intf: pLower;
	var dstkind, srckind: AddrKind;

	dstkind = GetAddrKind(dst);
if db > 3 then { debug.str("SourceAddress: ifn="); debug.uint8(ifn);
debug.str(" dst="); AddrPrint(dst);
debug.str(" kind="); debug.hex8(_uint8(dstkind)); debug.nl();}
	if ifn == 0 then ifn = 1;   // FIXME - should have a default interface?
	intf = ib.lower[ifn-1];
	if dstkind.type
	is UNICAST then
        {   var pa, pg: pIntfAddrEntry;
	    var good, maxgood: _uint;
	    // FIXME - if dstkind.scope is global then should search all interfaces
	    pg = 0;
	    maxgood = 0;
	    // Examine list of prefixes for goodness
	    pa = intf.prefixes;
	    while pa != 0 do
	    {   srckind = pa.kind;
//if db > 3 then { debug.str("\tpfx="); AddrPrint(pa.addr);
//debug.str(" kind="); debug.hex8(_uint8(srckind)); debug.nl();}
		good = 0;
		if srckind.scope >= dstkind.scope then
		{   good = 2;
		    if srckind.scope == dstkind.scope then
		    {   // FIXME - check if prefix matches dst
			good += 2;
		    }
		}
		if good > maxgood then
		{   maxgood = good;
		    pg = pa;
		}
		pa = pa.next;
	    }
	    if pg != 0 then
	    {
if db > 3 then { debug.str("Selected src addr="); AddrPrint(pg.addr); debug.nl(); }
		src[0:16] = pg.addr;
	    }
	    else
	    {
if db > 0 then { debug.str("No matching prefix for src addr\n"); }
	    }
	}
	else
	{   // FIXME - temporary - assume link local
	    src[0:8] = LinkLocalPrefix[0:8];
	    src[8:8] = intf.iid;
	}
	return intf.ifn;
    }

    proc (ib: pIPv6Block) Route(mb: pMBuf)
    {   var ip: pHeader;
	var intf: pLower;

	ip = pHeader(mb.Data());
if db > 2 then {debug.str("ipv6.Route: ifn="); debug.uint8(mb.tag); debug.nl();}
	intf = ib.GetInterface(mb.tag);
	if intf != 0 then
	    intf.ISend(mb, ip);
	else
	    mbuf.Free(mb);	// no route found, discard
    }
}

import ipv6icmp;		// ICMP

package ipv6
{
     // Calculate the upper layer checksum for TCP or UDP.
    proc UChecksum(mb: pMBuf, offset: _uint)
    {   type puint16: @[]_uint16;
	var hp: puint16;

	offset = offset / 2;    // bytes to halfwords
	hp = puint16(mb.Data());
	hp[offset] = 0;
	hp[offset] = inet.Checksum(hp, mb.Size());
    }

    // Handle data from upper protocols
    proc (ib: pIPv6Block) USend(mb: pMBuf)
    {   var ip: pHeader;
	var uh: pULHeader;
	var proto: Proto;
	var ifn: _uint8;

	uh = pULHeader(mb.Data());
	ifn = uh.info.ifn;
	ifn = ib.SourceAddress(ifn, uh.dstaddr, uh.srcaddr);
if db > 2 then {debug.str("ipv6.USend: ifn="); debug.uint8(ifn);
debug.str("\n\tfm="); AddrPrint(uh.srcaddr);
debug.str("\n\tto="); AddrPrint(uh.dstaddr); debug.nl();}
	proto = uh.proto;
	/*
	 * The IP layer and TCP/UDP are joined at the hip through the
	 * "psuedo-header" influence on the checksum.  Since this includes
	 * the source address, which is determined in this layer,
	 * the TCP/UCP checksums can't be calculated until after that.
	 */
	uh.info = inet.InfoZero;    // zero for checksum
	if proto
	is TCP then UChecksum(mb, ULHeader?size + 16);
	is UDP then UChecksum(mb, ULHeader?size + 6);
	// Now discard upper layer header and build IPv6 header,
	// src/dst addresses already in place
	ip = pHeader(mb.GrowHead(Header?size - ULHeader?size));
	ip.length = _uint16(mb.Size() - Header?size);
	ip.proto = proto;
	ip.vtf = {.version=6};
	ip.hops = 255;
	mb.info = IPv6Type;
	mb.tag = ifn;
	ib.Route(mb);
    }

    proc (ib: pIPv6Block) RecvFrag(mb: pMBuf, ip: pHeader): Proto;  // forward

    // Hop-by-Hop Header Support
    proc (ib: pIPv6Block) RecvHbH(mb: pMBuf): _uint, Proto
    {   var bp: @_memory;
	var proto: Proto;
	var nbytes, optlen, i: _uint;
	var opttype: HBHOptions;

	bp = mb.Data();
	proto = Proto(bp[0]);
	nbytes = (bp[1] + 1) * 8;
if db > 2 then {debug.str("ipv6.RecvHbH: len="); debug.uint(nbytes);
debug.str(" next="); debug.hex8(_uint8(proto)); debug.nl();}
	i = 2;		// proto, nbytes already seen
	while i < nbytes do
	{   opttype = HBHOptions(bp[i]);
if db > 3 then {debug.str("\topttype="); debug.hex8(_uint8(opttype)); debug.nl();}
	    if opttype == Pad1 then
		i += 1;
	    else
	    {   optlen = bp[i+1] + 2;
		i += optlen;
	    }
	}
	return nbytes, proto;
    }

    proc SkipHeader(mb: pMBuf): _uint, Proto
    {   var oh: pOptionHeader;
	var proto: Proto;
	var nbytes: _uint;

	oh = pOptionHeader(mb.Data());
	proto = oh.proto;
	nbytes = (oh.len + 1) * 8;
	return nbytes, proto;
    }

    proc (ib: pIPv6Block) Forward(mb: pMBuf, ip: pHeader)
    {
	ip.hops -= 1;
	if ip.hops > 0 then
	    ib.Route(mb);
	else
	{
	    // FIXME - send ICMP message
	    mbuf.Free(mb);      // FIXME
	}
    }

    proc (ib: pIPv6Block) Deliver(mb: pMBuf, ip: pHeader)
    {   var up: pUpper;
	var proto: Proto;
	var len: _uint16;
	var hops: _uint8;
	var gap, n: _uint;
	var uh: pULHeader;
	var src, dst: IPv6Addr;
	var uhb: ULHeader;

	proto = ip.proto;
	len = ip.length;
if db > 2 then {debug.str("ipv6.Deliver: size="); debug.uint32(mb.Size());
debug.str(" length="); debug.uint16(len);
debug.str(" proto="); debug.hex8(_uint8(proto));
debug.nl();}
	hops = ip.hops;     // just for ICMP
	// save info for upper header
	src = ip.srcaddr;
	dst = ip.dstaddr;
	// process headers
	mb.ShrinkHead(Header?size);
	gap = 0;
	while proto != NONEv6 do
	{   n = 0;
	    if proto
	    is HOPv6 then    n, proto = ib.RecvHbH(mb);
	    is DSTOPTv6 then n, proto = SkipHeader(mb);	// FIXME: not handled
	    is ROUTEv6 then  n, proto = SkipHeader(mb);	// FIXME: not handled
	    is FRAGv6 then   { ib.RecvFrag(mb, ip); return; }
	    is CRYPTv6 then  proto = NONEv6;		// FIXME: not handled
	    is AUTHv6 then   proto = NONEv6;		// FIXME: not handled
	    else	// some higher protocol
	    {   uh = pULHeader(mb.GrowHead(ULHeader?size));
	        uh.info = { .isipv6=true, .ifn=mb.tag };
		uh.proto = proto;
		uh.len = len - gap;
	        uh.zeros = 0;
	        uh.srcaddr = src;
	        uh.dstaddr = dst;
		up = ib.upper;
		if proto == ICMPv6 then
		    ib.ICMPRecv(mb, hops);
		else
		{   while up != 0 && up.proto != proto do
			up = up.next;
		    if up != 0 then
			up.bid.Send(mb);
		    else
			mbuf.Free(mb);	// ignore
		}
		return;
	    }
	    gap += n;
	    mb.ShrinkHead(n);
	}
	mbuf.Free(mb);	// ignore
    }
}

import ipv6frag;		// Fragmentation support

package ipv6
{
    // Handle data from lower endpoints
    proc (ib: pIPv6Block) Recv(mb: pMBuf)
    {   var ip: pHeader;
	var intf: pLower;

	ip = pHeader(mb.Data());
	if mb.Size() >= Header?size && ip.vtf.version == 6 then
	{
if db > 1 then DumpPacket("ipv6.Recv", mb, ip, 0);
	    intf = ib.GetInterface(mb.tag);
	    if intf != 0 then   // valid interface
	    {   if promiscuous || intf.ToUs(ip.dstaddr) then
		{   ib.Deliver(mb, ip);
		    return;
		}
if db > 3 then { debug.str("ipv6.ToUs fail\n"); }
		if ib.IsRouter then
		{   ib.Forward(mb, ip);
		    return;
		}
	    }
	}
	mbuf.Free(mb);		// Defective, or not willing/able to route.
    }

    proc (ib: pIPv6Block) NewInterface(ifn: _uint, to: BlockID)
    {   var intf: pLower;

if db > 1 then {debug.str("ipv6.NewInterface: "); debug.uint(ifn);
debug.nl();}
	ifn -= 1;
	if ifn < NIPv6Lower then
	{   intf = _new(Lower);  _zero(intf);
	    ib.lower[ifn] = intf;
	    intf.ifn = ifn+1;
	    intf.bid = to;
	    intf.AddrAddMulticast(AllNodesAddr);	// multicast all nodes
	    intf.AddrAddMulticast(AllRoutersAddr);      // FIXME - configurable?
	}
	else
	{
debug.str("ipv6: Interface number out of range\n");
	}
    }

    proc (ib: pIPv6Block) InterfaceUp(li: comm.pLinkInfo)
    {   var intf: pLower;
	var addr: IPv6Addr;

	intf = ib.GetInterface(li.tag);
	if intf == 0 then return;
	intf.block = ib;
if db > 0 then {debug.str("ipv6.InterfaceUp: ifn=");
debug.uint8(li.tag); debug.chr(':');
debug.uint8(li.hdr); debug.chr(',');
debug.uint8(li.trl); debug.chr(',');
debug.uint16(li.mtu); debug.nl(); }
	intf.hdr = _max(li.hdr, EUI64?size);  // at least the EUI64 header
	ib.hdr   = _max(ib.hdr, intf.hdr);
	intf.trl = li.trl;
	ib.trl   = _max(ib.trl, intf.trl);
	intf.type = li.type;
	if intf.type
	is ENET then
	{   net.FromMAC(li.id, intf.iid);
	    intf.state = TENTATIVE;
	}
	is PPP, WPAN then
	{   intf.iid = li.id[0:8];
	    intf.state = PREFERRED;
	}
if db > 0 then {
addr[0:8] = LinkLocalPrefix[0:8]; addr[8:8] = intf.iid;
debug.str( "\tlla="); AddrPrint(addr); debug.nl();}
	intf.PfxCacheAdd(LinkLocalPrefix, 64, _uint32?max);
	addr[0:13] = SolicitedPrefix;
	addr[13:3] = intf.iid[5:3];		// FIXME
	intf.AddrAddMulticast(addr);		// multicast solicited-node
	intf.TimerSeconds(0, NC, 5);   // really DAD timer
	ib.ifcount += 1;
    }

    proc (ib: pIPv6Block) InterfaceDown(e: pEvent)
    {   var intf: pLower;

	intf = ib.GetInterface(e.tag);
	if intf == 0 then return;
if db > 0 then {debug.str("ipv6.InterfaceDown: ifn=");
debug.uint8(e.tag); debug.nl(); }
	if intf.neighbors != 0 then intf.DeleteQueue(intf.neighbors);
	intf.state = DOWN;
	ib.ifcount -= 1;
    }

    proc (ib: pIPv6Block) AddPrefix(ifn: _uint, pfx: @[]_byte, len: _uint)
    {   var intf: pLower;

	intf = ib.GetInterface(ifn);
	if intf == 0 then return;
	intf.PfxCacheAdd(pfx, len, _uint32?max);
    }

    proc (ib: pIPv6Block) InformUpper(isup: boolean)
    {   var up: pUpper;
	var li: comm.pLinkInfo;
	var e: pEvent;

if db > 3 then {debug.str("ipv6.InformUpper ");  debug.uint8(_uint8(isup));
debug.nl();}
	up = ib.upper;
	while up != 0 do
	{   if isup then
	    {   li = _new(comm.LinkInfo);
		li.code = UP;
		li.tag = up.tag;	// IPv4 vs IPv6
		li.hdr = ib.hdr + Header?size;
		li.trl = ib.trl;
		li.mtu = 1500 - Header?size;    // FIXME
		up.bid.Send(li);
	    }
	    else
	    {   e = event.New(DOWN);
		e.tag = up.tag;
		up.bid.Send(e);
	    }
	    up = up.next;
	}
    }

    proc (ib: pIPv6Block) Timer(te: timer.pTimerEvent)
    {   var intf: pLower;

	intf = ib.GetInterface(te.tag);
	if intf != 0 then
	    intf.Timer(te);
	else
	    event.Free(te);
    }
    
    proc Run(b: pBlock, e: pEvent)
    {   var ib: pIPv6Block;

        ib = pIPv6Block(b);
        if e.code
        is RCVD then    // packet received from interface
	    ib.Recv(pMBuf(e));
	is SEND then    // packed received from upper protocol
	    ib.USend(pMBuf(e));
	is TDONE then   // timer event
	    ib.Timer(timer.pTimerEvent(e));
	is UP then      // interface has come up
        {   var li: comm.pLinkInfo;
	    li = comm.pLinkInfo(e);
	    ib.InterfaceUp(li);
	    _delete(li);
	    if ib.ifcount == 1 then // first interface came up
	    {   ib.InformUpper(true);
	    }
	}
	is DOWN then    // interface has gone down
	{   ib.InterfaceDown(e);
	    _delete(e);
	    if ib.ifcount == 0 then // last interface went down
		ib.InformUpper(false);
	}
	is OPEN then    // upper protocol wants to start
	{
	}
	is CLOSE then   // upper protocol wants to stop
	{
	}
	is CONNECT then
	{   var ce: event.pConnEvent;
	    ce = event.pConnEvent(e);
	    if ce.type == LOWER then
	    {
if db > 0 then {debug.str("ipv6.Connect lower: intf="); debug.uint8(ce.chan); debug.nl();}
		ib.NewInterface(ce.chan, ce.tag);
	    }
	    else
	    {   var up: pUpper;
if db > 0 then {debug.str("ipv6.Connect upper: intf="); debug.uint8(ce.chan); debug.nl();}
		up = _new(Upper);
		up.proto = Proto(ce.info);
		up.tag   = ce.chan;
		up.bid   = ce.tag;
		up.next = ib.upper;
		ib.upper = up;
	    }
	    _delete(ce);
	}
	is START then   // start things going
	{   // for each connected interface, send an OPEN
	    var oe: pEvent;
	    var ifn: _uint;
	    for ifn from 0 to NIPv6Lower-1 do
	    {   if ib.lower[ifn] != 0 then
		{   oe = event.New(OPEN);
		    oe.tag  = ifn;
		    ib.lower[ifn].bid.Send(oe);
		}
	    }
	    _delete(e);
	}
	    
    }


    proc NewBlock(id: BlockID): pBlock
    {   var ib: pIPv6Block;

	ib = _new(IPv6Block);  _zero(ib);
if db > 0 then {debug.str("ipv6.NewBlock ");
debug.uint8(id); debug.chr(' ');
debug.hex(_uint(ib)); debug.nl(); }
	ib.BlockInit(id, Run);
	return ib;
    }
}
// vim: ts=8 sw=4 noet nowrap

