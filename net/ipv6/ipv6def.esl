/*
 * IPv6 definitions
 *
 * Copyright (c) 2009-2014, Brian G. Lucas.  See LICENSE file.
 * $Id$
 */

import inet;
import comm;

package ipv6
{
    alias net.EUI64 as EUI64;
    alias net.pEUI64 as pEUI64;
    alias inet.Net32 as Net32;
    alias inet.Net16 as Net16;
    alias inet.IPv6AddrLen as IPv6AddrLen;
    alias inet.IPv6Addr as IPv6Addr;
    alias inet.Proto as Proto;
    alias inet.ULHeader6 as ULHeader;
    alias inet.pULHeader6 as pULHeader;

    const IPv6Type = 0x86DD;

    const IsRouter: boolean = false;
    // Timeout constants
    const DupAddrDetectTransmits = 1;
//    const RSTimeout = 600;  // 4..1800 default 600 seconds
    const RSTimeout = 60;  // FIXME test
    const RetransTimer = 1; // default 1 second 

    const UnspecAddr: [16]_byte: align(8) =
	{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const AllNodesAddr: [16]_byte: align(8) =
	{ 0xFF,0x02,0x00,0x00,0x00,0x00,0x00,0x00,
	  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01 };
    const AllRoutersAddr: [16]_byte: align(8) =
	{ 0xFF,0x02,0x00,0x00,0x00,0x00,0x00,0x00,
	  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02 };
    const LinkLocalPrefix: [16]_byte: align(8) =
	{ 0xFE,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
	  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    const SolicitedPrefix: [13]_byte: align(8) =
	{ 0xFF,0x02,0x00,0x00,0x00,0x00,0x00,0x00,
	  0x00,0x00,0x00,0x01,0xFF };

    type Header:
    {	vtf:
	{   version: 0..15;		// 4-bit version, must be 6
	    dscp:    0..0x3F;		// 6-bit diff. services code point
	    ecn:     0..3;		// 2-bit explicit congestion notif.
	    flow:    0..0xFFFFF;	// 20-bit flow label
	}: packed, msb, be;
	length:  Net16;			// 16-bit payload length
	proto:    Proto;		// 8-bit next header type
	hops:    _uint8;		// 8-bit hop limit
	srcaddr: IPv6Addr;		// 128-bit source address
	dstaddr: IPv6Addr;		// 128-bit destination address
    };
    type pHeader: @Header;

    if Header?size < inet.ULHeader6?size then
	error "IPv6 Header?size < ULHeader6?size";

    type OptionHeader:
    {   proto:    Proto;		// 8-bit next header type
	len:    _uint8;			// 8-bit length of this option
    };
    type pOptionHeader: @OptionHeader;

    type ICMPProtocols:
    (   DestinationUnreachable=1,
	PacketTooBig=2,
	TimeExceeded=3,
	ParameterProblem=4,
	EchoRequest=128,
	EchoReply=129,
	MulticastListenerQuery=130,
	MulticastListenerReport=131,
	MulticastListenerDone=132,
	RouterSolicitation=133,
	RouterAdvertisement=134,
	NeighborSolicitation=135,
	NeighborAdvertisement=136,
	RedirectMessage=137,
	RouterRenumbering=138,
	NodeInformationQuery=139,
	NodeInformationResponse=140,
	InverseNeighborDiscoverySolicitation=141,
	InverseNeighborDiscoveryAdvertisement=142,
	Version2MulticastListenerReport=143,
	HomeAgentAddressDiscoveryRequest=144,
	HomeAgentAddressDiscoveryReply=145,
	MobilePrefixSolicitation=146,
	MobilePrefixAdvertisement=147,
	CertificationPathSolicitation=148,
	CertificationPathAdvertisement=149,
	MulticastRouterAdvertisement=151,
	MulticastRouterSolicitation=152,
	MulticastRouterTermination=153,
	RPLControlMessage=155,
	Expansion=255
    );
    type ICMPHeader:
    {   type:	ICMPProtocols;
	code:	_byte;
	chksum:	_uint16;
    };
    type pICMPHeader: @ICMPHeader;

    /*
     * Options used in Hop-by-hop header and Destination header
     * High two bits indicate action to take if the option is
     * not recoqnized:
     *  00 - skip (ignore option)
     *  01 - discard packet
     *  10 - discard and send ICMP problem
     *  11 - discard and if dst not multicast, send ICMP problem
     * The third highest bit indicates if option can change in route:
     *  0  - no
     *  1  - yes
     */
    type HBHOptions:
    (   Pad1	    = 0b00_0_00000,
	PadN	    = 0b00_0_00001,
	Jumbo       = 0b11_0_00010,
	RPL	    = 0b01_1_00011,
	// FIXME - more to come
    );


    type AddrType: (UNSPEC, LOOPBACK, UNICAST, MULTICAST);
    type AddrScope:
    (   InterfaceLocal=1, LinkLocal=2, AdminLocal=4, SiteLocal=5,
	OrganizationLocal=8, Global=14
    );
    type AddrKind:
    {   scope:  AddrScope;
        type:   AddrType;
    }: packed, lsb, bits(8);


    const Hex: [16]_byte =
	{'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};

    proc ToHex(b: _byte, t: @[2]_byte, n: _uint): _uint
    {   var v: _uint;

	v = b >> 4;
	if n != 0 || v != 0 then
	{   t[n] = Hex[v];
	    n += 1;
	}
	v = b & 0xF;
	if n != 0 || v != 0 then
	{   t[n] = Hex[v];
	    n += 1;
	}
	return n;
    }

    /*
     * Rules for short IPv6 addresses:
     * 1. Units of 16-bits separated by a colon.
     * 2. Use hexadecimal digits expressed as lower-case letters.
     * 2. Leading zeros in each 16-bit field are supressed.
     * 3. The longest sequence of consecutive zero fields is replaced by "::".
     *    A run must be greater than 1 to be compressed.
     *    If there are multiple longest runs of all-zero fields,
     *    the leftmost is compressed.
     * References: RFC 5952, RFC 4291.
     */
    proc AddrToText(a: @IPv6Addr, t: @[39]_byte): _uint
    {   var i, j, li, lj: _uint;
	var k: _uint;
	var b: _boolean;

	li = 0;
	lj = 0;
	for i from 0 to IPv6AddrLen-2 by 2 do	// Find longest run of zero fields
	{   j = i;
	    while j < IPv6AddrLen-1 && a[j] == 0 && a[j+1] == 0 do
		j += 2;
	    if j > i && j-i > lj-li then
	    {   li = i;
		lj = j;
	    }
	}
	if lj-li <= 2 then			// don't shorten a single field
	    li = IPv6AddrLen;
	k = 0;
	i = 0;
	while i < IPv6AddrLen do
	{   if i == li then			// reached the run
	    {   t[k:2] = "::";
		k += 2;
		i = lj;
	    }
	    elif i > 0 then			// normal separator
	    {   t[k] = ':';
		k += 1;
	    }
	    if i < IPv6AddrLen then		// normal field
	    {   j = ToHex(a[i], t[k:], 0);
	 	j = ToHex(a[i+1], t[k:], j);
		k += j;
		if j == 0 then			// zero field
		{   t[k] = '0';
		    k += 1;
       		}
	    }
	    i += 2;
	}
	return k;
    }    	   

    proc FmHex(s: @[]_byte): _uint, _uint
    {   var i: _uint;
	var v: _uint;

	v = 0;
	i = 0;
	loop
	{   if s[i]
	    is '0'..'9' then v = (v << 4) | (s[i] - '0');
	    is 'a'..'f' then v = (v << 4) | (s[i] - 'a' + 10);
	    is 'A'..'F' then v = (v << 4) | (s[i] - 'A' + 10);
	    else
		return v, i;
	    i += 1;
	}
    }

    proc TextToAddr(t: @[]_byte, n: _uint, a: @IPv6Addr): _boolean
    {   var i, j, k, m, lj: _uint;
	var v: _uint;
	var b: [IPv6AddrLen]_byte;

	// initialize address to all zeros
	a[0:16] = UnspecAddr;
	i = 0;
	lj = IPv6AddrLen;	// no run found
	if n > 2 && t[0] == ':' && t[1] == ':' then	// leading run found
	{   lj = 0;
	    i = 2;
	    if n == 2 then				// just "::"
		return true;
	}
	j = 0;
	while j < IPv6AddrLen do
	{   v, k = FmHex(t[i:]);
	  exit k == 0;
	    // FIXME - check for trailing IPv4 dotted address
	    b[j] = _uint8(v >> 8);
	    b[j+1] = _uint8(v&0xFF);
	    j += 2;
	    i += k;
	  exit i >= n;			// end of text
	    if t[i] != ':' || i == n-1 then
	        return false;		// ill formed
	    i += 1;
	    if t[i] == ':' then		// run found
	    {   if lj < IPv6AddrLen then// already have one
	    	    return false;	// ill formed, two runs
	        lj = j;
	        i += 1;
	        if i == n then		// end of text
		    j = IPv6AddrLen;	// done parsing, cause loop to end
	    }
	}
	if i != n then			// some text left
	    return false;		// ill formed
	a[0:lj] = b[0:lj];		// copy stuff before the run
	if j < IPv6AddrLen then		// must of had a run
	{   if lj == IPv6AddrLen then	// but we didn't
		return false;		// ill formed
	    k = IPv6AddrLen - j;	// length of the run
	    a[lj:k] = UnspecAddr[0:k];	// now fill in run of zeros
	    m = j - lj;			// length of good data after the run
	    if m > 0 then
		a[IPv6AddrLen-m:m] = b[lj:m];// now the stuff after the run, if any		
	}
	return true;
    }

if _defined(debug) then {
    //BEGIN DEBUG
    proc AddrPrint(a: @IPv6Addr)
    {   var n: _uint;
	var buf: [39]_byte;

	n = AddrToText(a, buf);
	debug.strn(buf, n);
    }

    proc PrefixPrint(a: @[]_byte, n: _uint)
    {   var i: _uint;
	var nb: _uint;

	// FIXME - assumes prefix is even number of bytes
	nb = n/8;
	if nb < 2 then return;
	i = 0;
	loop
	{   debug.hex8(a[i]);
	    debug.hex8(a[i+1]);
	    i += 2;
	  exit i >= nb;
	    debug.chr(':');
	}
	debug.chr('/');
	debug.uint(n);
    }

    proc MACPrint(a: @[]_byte, n: _uint)
    {   var i: _uint;

	i = 0;
	loop
	{   debug.hex8(a[i]);
	    i += 1;
	  exit i == n;
	    debug.chr(':'); 
	}
    }
    //END DEBUG
}

    // Replace with simple array compare when compiler handles it.
    proc AddrSame(a1: @IPv6Addr, a2: @IPv6Addr): boolean: inline
    {
	return a1@ == a2@;
    }

    proc IsMulticast(a: @IPv6Addr): boolean: inline
    {
	return a[0] == 0xFF;
    }

    proc IsLinkLocal(a: @IPv6Addr): boolean: inline
    {
	return a[0:2] == LinkLocalPrefix[0:2];
    }

    proc GetAddrKind(a: @IPv6Addr): AddrKind
    {

	if a[0]
	is 0xFF then
	    return {.type=MULTICAST, .scope=AddrScope(a[1]&0xF)};
	is 0xFE then
	{
	    if a[2:6] != UnspecAddr[2:6] then
	        return {.type=UNICAST, .scope=Global};
	    if a[1] // FIXME - there are others
	    is 0xC0 then return {.type=UNICAST, .scope=SiteLocal}; // deprecated
	    is 0x80 then return {.type=UNICAST, .scope=LinkLocal};
	}
	is 0x00 then
	{
	    if a[1:14] != UnspecAddr[1:14] then
		return {.type=UNICAST, .scope=Global};
	    if a[15]
	    is 0x00 then return {.type=UNSPEC, .scope=AddrScope(0)};
	    is 0x01 then return {.type=LOOPBACK, .scope=InterfaceLocal};
	}
	return {.type=UNICAST, .scope=Global};
    }

    // Are prefixes always multiples of bytes in practice?
    // If so, these can be simplified.
    proc Match(a1: @[]_byte, a2: @[]_byte, nbits: _uint): boolean
    {   var i, nbytes: _uint;

	nbytes = nbits / 8;	// number of complete bytes
	i = 0;
	while i < nbytes do
	{   if a1[i] != a2[i] then return false;
	    i += 1;
	}
	nbits = nbits % 8;	// leftover bits
	if nbits != 0 && (a1[i] ^ a2[i]) & (0xFF << (8-nbits)) != 0 then
	    return false;
	return true;
    }

    proc Prefix(a1: @[]_byte, a2: @[]_byte): _uint
    {   var i, n: _uint;
	var bits: _uint8;

	i = 0;
	while i < 16 && a1[i] == a2[i] do
	    i += 1;
	n = i * 8;
	if i < 16 then
	{   // n += _ctlz_(a1[i] ^ a2[i]);
	    bits = ~(a1[i] ^ a2[i]) & 0xFF;
	    while bits != 0 do
	    {   n += 1;
		bits = (bits << 1) & 0xFF;
	    }
	}
	return n;
    }
}
// vim: ts=8 sw=4 noet nowrap

