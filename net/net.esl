/*
 * Some generic networking definitions.
 *
 * Copyright (c) 2009-2011, Brian G. Lucas.  See LICENSE file.
 * $Id$
 */

package net
{
    const MACLen = 6;
    type MAC:   [MACLen]_byte;	// e.g. Ethernet link address
    const BcastMAC: MAC = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
    const NullMAC:  MAC = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    type EUI64: [8]_byte;	// generic link address
    type pEUI64: @EUI64;

    proc FromMAC(mac: @MAC, eui64: @EUI64)
    {
	eui64[0] = mac[0] ^ 0x02;
	eui64[1] = mac[1];
	eui64[2] = mac[2];
	eui64[3] = 0xFF;
	eui64[4] = 0xFE;
	eui64[5] = mac[3];
	eui64[6] = mac[4];
	eui64[7] = mac[5];
    }

    proc ToMAC(eui64: @EUI64, mac: @MAC)
    {
	mac[0] = eui64[0] ^ 0x02;
	mac[1] = eui64[1];
	mac[2] = eui64[2];
	mac[3] = eui64[5];
	mac[4] = eui64[6];
	mac[5] = eui64[7];
    }

if _defined(_unpkle) then {
    alias _unpkle as unpkle16;
    alias _unpkle as unpkle32;
    alias _unpkle as unpkle64;
    alias _unpkbe as unpkbe16;
    alias _unpkbe as unpkbe32;
    alias _unpkbe as unpkbe64;
} else {
    // FIXME - these should be built-in or library
    proc unpkle16(s: @[2]_byte): _uint16
    {
 	return (s[1] << 8) | s[0];
    }

    proc unpkle32(s: @[4]_byte): _uint32
    {   var rv: _uint32;
	var i: _uint;

	rv = 0;
	// FIXME - for downto
	i = 4;
	do
	{   i -= 1;
	    rv = rv << 8;
	    rv = rv | s[i];
	} while i != 0;
	return rv;
    }

    proc unpkle64(s: @[8]_byte): _uint64
    {   var rv: _uint64;
	var i: _uint;

	rv = 0;
	// FIXME - for downto
	i = 8;
	do
	{   i -= 1;
	    rv = rv << 8;
	    rv = rv | s[i];
	} while i != 0;
	return rv;
    }

    proc unpkbe16(s: @[2]_byte): _uint16
    {
 	return (s[0] << 8) | s[1];
    }

    proc unpkbe64(s: @[8]_byte): _uint64
    {   var i: _uint;
	var v: _uint64;

	v = 0;
	for i from 0 to 7 do
	{   v = v << 8;
	    s[i] = _byte(v);
	}
	return v;
    }	
}

if _defined(_packle) then {
    alias _packle as packle16;
    alias _packle as packle32;
    alias _packle as packle64;
    alias _packbe as packbe64;
} else {
    proc packle64(s: @[8]_byte, v: _uint64)
    {   var i: _uint;

	for i from 0 to 7 do
	{   s[i] = _byte(v);
	    v = v >> 8;
	}
    }	

    proc packbe64(s: @[8]_byte, v: _uint64)
    {   var i: _uint;

	
	// FIXME - for downto
	i = 8;
	do
	{   i -= 1;
	    s[i] = _byte(v);
	    v = v >> 8;
	} while i != 0;
    }	
}


    // FIXME: This can go away when the compiler does vector compares
    proc VEqual(a: @[]_byte, b: @[]_byte, n: _uint): boolean
    {   var i: _uint;

	i = 0;
	while i < n do
	{   if a[i] != b[i] then return false;
	    i += 1;
	}
	return true;
    }

if _defined(debug) then {
    proc VPrint(a: @[]_byte, n: _uint)
    {   var i: _uint;

	i = 0;
	loop
	{   debug.hex8(a[i]);
	    i += 1;
	  exit i == n;
	    debug.chr(':'); 
	}
    }
}
}

