/*
 * DTLS - Datagram Transport Layer Security
 * Client side only.
 *
 * References:
 *   1. RFC 6347 - DTLS v1.2
 *   2. RFC 5246 - TLS v1.2
 *      RFC 8446 - TLS v1.3 (obsoletes 5246)
 *   3. RFC 4492 - ECC for TLS
 *   4. tinydtls - Copyright Olaf Bergmann and others
 *   5. RFC 5288 - AES-GCM for TLS
 *
 * Copyright (c) 2016-2022, Brian G. Lucas.  See LICENSE file.
 */

import sha256;		// used for Message Authetication
import asn1;

import dtlsdef;

package dtls
{
    if _defined(debug.db_dtls) then
	alias debug.db_dtls as db;
    else
	const db = 0;

    var CipherSuites: @[]@CipherSuite;

    /*
     **** ChangeCipher messages ****
     */
    type ChangeCipherMsgT:
    {	which: _uint8;
    };
    type ChangeCipherMsg: @ChangeCipherMsgT;

    /*
     **** Alert messages ****
     */
    type AlertCode:
    (	CLOSE_NOTIFY =		   0,
	UNEXPECTED_MESSAGE =	  10,
	BAD_RECORD_MAC =	  20,
	RECORD_OVERFLOW =	  22,
	DECOMPRESSION_FAILURE =	  30,
	HANDSHAKE_FAILURE =	  40,
	BAD_CERTIFICATE =	  42,
	UNSUPPORTED_CERTIFICATE = 43,
	CERTIFICATE_REVOKED =	  44,
	CERTIFICATE_EXPIRED =	  45,
	CERTIFICATE_UNKNOWN =	  46,
	ILLEGAL_PARAMETER =	  47,
	UNKNOWN_CA =		  48,
	ACCESS_DENIED =		  49,
	DECODE_ERROR =		  50,
	DECRYPT_ERROR =		  51,
	PROTOCOL_VERSION =	  70,
	INSUFFICIENT_SECURITY =	  71,
	INTERNAL_ERROR =	  80,
	USER_CANCELED =		  90,
	NO_RENEGOTIATION =	 100,
	UNSUPPORTED_EXTENSION =  110
    );

    type AlertMsgT:
    {   level:    (WARNING=1, FATAL=2);
	code:     AlertCode;
    };
    type AlertMsg: @AlertMsgT;

    /*
     **** Handshake messages ****
     */
    const MaxCookieLen = 32;	// WARNING: standard says 255 future!
    const FinishLength = 12;    // size of final "hash"

    // first 4 bytes is unix time GMT seconds
    type Random: [32]_byte;

    type HandshakeT:
    (   HelloRequest,		// 0x00
	ClientHello,		// 0x01
	ServerHello,		// 0x02
	HelloVerifyRequest,	// 0x03
   	Certificate=11,		// 0x0B
   	ServerKeyExchange,	// 0x0C
   	CertificateRequest,	// 0x0D
   	ServerHelloDone,	// 0x0E
   	CertificateVerify,	// 0x0F
   	ClientKeyExchange,	// 0x10
   	Finished=20		// 0x14
    );

    type HandshakeMsgT:
    {   type: HandshakeT: bits(8);
	length:  [3]_byte;
	seqno:   [2]_byte;
	fragoff: [3]_byte;
	fraglen: [3]_byte;
    }: nopad;
    type HandshakeMsg: @HandshakeMsgT;

    type ClientHelloMsgT(HandshakeMsgT):
    {   version: [2]_byte;
	random:  [32]_byte;
	bytes:   []_byte;
	// variable length stuff follows:
	// session_id length, {session_id[0]....},
	// cookie length, {cookie[0]....},
	// cypher suites
	// compression methods
	// extensions
    };
    type ClientHelloMsg: @ClientHelloMsgT;

    type HelloVerifyRequestT(HandshakeMsgT):
    {   version:  [2]_byte;
	cookielen: _byte;
	cookie:   []_byte;
    };
    type HelloVerifyRequestMsg: @HelloVerifyRequestT;

    type ServerHelloMsgT(HandshakeMsgT):
    {   version: [2]_byte;
	random:  [32]_byte;
	bytes:   []_byte;
	// variable length stuff follows:
	// session_id length, {session_id[0]....},
	// cipher suite len=2
	// compression method len=1
	// extensions
    };
    type ServerHelloMsg: @ServerHelloMsgT;

    type CertificateMsgT(HandshakeMsgT):
    {   len:    [3]_byte;
	bytes:  []_byte;
	// asn1 certificate header
	// public key
	// public key
    };
    type CertificateMsg: @CertificateMsgT;

    type ServerKeyMsgT(HandshakeMsgT):
    {	// FIXME - define fixed fields, if any
	bytes:  []_byte;
    };
    type ServerKeyMsg: @ServerKeyMsgT;

    type ClientKeyMsgT(HandshakeMsgT):
    {	// FIXME - define fixed fields
	bytes:  []_byte;
    };
    type ClientKeyMsg: @ClientKeyMsgT;

    type CertVerifyMsgT(HandshakeMsgT):
    {	// FIXME - define fixed fields
	bytes:  []_byte;
    };
    type CertVerifyMsg: @CertVerifyMsgT;

    type FinishedMsgT(HandshakeMsgT):
    {	// FIXME - define fixed fields
	bytes:  []_byte;
    };
    type FinishedMsg: @FinishedMsgT;

    // Labels used in Pseudo-Random Function (PRF)
    // The length does NOT include nul termination
    const LabelMaster:   [13]_byte = 'master secret';
    const LabelKey:      [13]_byte = 'key expansion';
    const LabelClient:   [15]_byte = 'client finished';
    const LabelServer:   [15]_byte = 'server finished';

    type State:
    {   peer:   NetworkConnection;	// define this type
	cipher:    @CipherSuite;
	mdone:   boolean;		// we sent finished
	pdone:	 boolean;		// we rcvd finished
	xsecure: boolean;		// true => encrypt xmit payload
	rsecure: boolean;		// true => recv payload encrypted
	epoch:  _uint16;
	seqno:  _uint64;		// only low 48 bits used
	ourkey: [16]_byte;	// FIXME - should be cipher suite dependent
	rmtkey: [16]_byte;
	ouriv:  [4]_byte;
	rmtiv:  [4]_byte;
    };

    type HState:		// state during handshake
    {	seqno:     _uint16;
	sendcert:  boolean;     // do we send our certificate
	sendvrfy:  boolean;
	hctx:	   sha256.Context;
	rmt:				// keys from the other (server) side
	{   pubkeyx:   [48]_byte;	// static
	    pubkeyy:   [48]_byte;
	    epubkeyx:  [32]_byte;	// ephemeral
	    epubkeyy:  [32]_byte;
	    random:    Random;
	};
	our:				// keys belonging to us (client)
	{   eprivkey:  [32]_byte;	// ephemeral keys
	    epubkeyx:  [32]_byte;
	    epubkeyy:  [32]_byte;
	    random:    Random;
	};
	msecret:   [48]_byte;	// FIXME
	buf:       [4096]_byte;	// FIXME - large enough? Change to dynamic?
    };


    var state: State;
    var hstate: HState;	// FIXME - allocate and free?

    import prf256;
    alias prf256.pHash as prf;

    proc Init(peer: NetworkConnection)
    {
	state.peer = peer;
	state.epoch = 0;
	state.seqno = 0;
    }

    /*
     * Handshake hash routines
     */
    proc HashInit()
    {
	hstate.hctx.Start();
    }

    proc HashUpdate(data: @[]_byte, len: _uint)
    {
	hstate.hctx.Update(data, len);
    }

    proc HashSnapshot(out: @[]_byte)
    {
	hstate.hctx.Snapshot(out);
    }

    proc HashFinish(out: @[]_byte)
    {
	hstate.hctx.Finish(out);
    }

    proc IncEpoch()
    {
	state.epoch += 1;
	state.seqno = 0;
    }

    proc InitRandom()
    {
	Rand(hstate.our.random, 32);
    }

    proc Send(msg: @[]_byte, len: _uint, what: ContentT)
    {	var ph: Header;

	ph = Header(msg[0:HeaderT?size]);
	ph.content = what;
	ph.version = Version;
	_packbe(ph.seqno[0:2], state.epoch);
	_packbe(ph.seqno[2:6], state.seqno);	// low 48 bits
	state.seqno += 1;
	if state.xsecure then
	    len = state.cipher.encrypt@(ph, msg, len);
	_packbe(ph.length, len);
	len += HeaderT?size;
if db > 0 then { debug.str("\n====\nSend seqno="); debug.uint16(state.epoch);
debug.chr(','); debug.uint32(_uint32(state.seqno)); debug.nl(); }
if db > 1 then debug.dumpb("", msg, len);
	PeerSend(state.peer, msg, len);	// FIXME - defined before import
    }

    proc SendAlert(code: AlertCode, fatal: boolean)
    {   var pam: AlertMsg;

	// FIXME - get buf dynamic
	pam = AlertMsg(hstate.buf[HeaderT?size:]);
	if fatal then pam.level = FATAL; else pam.level = WARNING;
	pam.code = code;
	Send(hstate.buf, 2, Alert);
    }

    proc SendCCS()
    {   var pcc: ChangeCipherMsg;

	// FIXME - get buf dynamic
	pcc = ChangeCipherMsg(hstate.buf[HeaderT?size:]);
	// FIXME - get buf dynamic
	pcc.which = 1;
	Send(hstate.buf, 1, ChangeCipher);
    }

    proc SendData(data: @[]_byte, len: _uint)
    {
	hstate.buf[HeaderT?size:len] = data[0:len];
	Send(hstate.buf, len, Data);
    }

    proc SendHandshake(msg: @[]_byte, len: _uint, what: HandshakeT)
    {	var phm: HandshakeMsg;

	len -= HandshakeMsgT?size;	// caller had included this size
	// prepend handshake header
	phm = HandshakeMsg(msg[HeaderT?size:HandshakeMsgT?size]);
	phm.type = what;
	_packbe(phm.seqno, hstate.seqno);
	_packbe(phm.length, len);
	_packbe(phm.fragoff, 0);
	_packbe(phm.fraglen, len);
	hstate.seqno += 1;
	len += HandshakeMsgT?size;		// include header
	HashUpdate(msg[HeaderT?size:], len);    // hash the payload
	// send on
	Send(msg, len, Handshake);
    }

    proc CalculateKeyBlock()
    {
	var pmlen: _uint;
	var pmsecret: [32]_byte;  // FIXME - is the size protocol specific
	var seed: [32+32]_byte;

if db > 0 then debug.str("CalculateKeyBlock\n");
	// The pre-master secret is dependent on the key exchange protocol
	if state.cipher.calcpmsec != 0 then
	   pmlen = state.cipher.calcpmsec@(pmsecret);
if db > 1 then debug.dumpb("pre-master secret=\n", pmsecret, pmlen);
	// Now calculate the master secret (RFC 5246 #8.1)
	seed[0:32]  = hstate.our.random;
	seed[32:32] = hstate.rmt.random;
if db > 2 then debug.dumpb("random=\n", seed, 64);
	prf(pmsecret, pmlen, LabelMaster, LabelMaster?len,
		 seed, seed?len, hstate.msecret, hstate.msecret?len);
if db > 1 then debug.dumpb("master secret=\n", hstate.msecret, hstate.msecret?len);
	// Now create the key block from the master secret
	const kblen = 40;			// FIXME
	var keyblock: [kblen]_byte;	// FIXME
	seed[0:32]  = hstate.rmt.random;
	seed[32:32] = hstate.our.random;
	prf(hstate.msecret, hstate.msecret?len, LabelKey, LabelKey?len,
		seed, seed?len, keyblock, kblen);
if db > 2 then debug.dumpb("key block=\n", keyblock, kblen);
	state.ourkey = keyblock[0:16];
	state.rmtkey = keyblock[16:16];
	state.ouriv  = keyblock[32:4];
	state.rmtiv  = keyblock[36:4];
    }

    proc SwitchCipher()
    {
if db > 0 then debug.str("SwitchCipher\n");
	SendCCS();
	IncEpoch();
	state.xsecure = true;
    }

    proc SendClientHello(cookie: @[]_byte, cookielen: _uint)
    {	var pch: ClientHelloMsg;
	var pb: @[]_byte;
	var i, j, k, n: _uint;

if db > 0 then debug.str("SendClientHello\n");
	// FIXME - get buf dynamic
	pch = ClientHelloMsg(hstate.buf[HeaderT?size:]);
	pch.version = Version;
	if cookielen == 0 then
	    InitRandom();
	pch.random = hstate.our.random;
	// now for the variable length part
	i = 0;
	pch.bytes[i] = 0;  i += 1;			// session_id length
	pch.bytes[i] = cookielen;  i += 1;		// cookie length
	if cookielen != 0 then
	{   pch.bytes[i:cookielen] = cookie[0:cookielen];
	    i += cookielen;
	}
	// save space for the length of cipher list
	k = i;
	i += 2;
	// then the list
	j = 0;
	while CipherSuites[j] != 0 do
	{   _packbe(pch.bytes[i:2], _uint16(CipherSuites@[j].code));
if db > 2 then { debug.hex16(_uint16(CipherSuites@[j].code)); debug.nl(); }
	    i += 2;
	    j += 1;
	}
	// do we really need this
	_packbe(pch.bytes[i:2], _uint16(CipherCode.FALLBACK_SCSV_VALUE)); i += 2;
	// now we can do the length
	_packbe(pch.bytes[k:2], _uint16(i-k-2));
	// compression list
	pch.bytes[i] = 1;  i += 1;		// size of compression list
	pch.bytes[i] = 0;  i += 1;		// TLS_COMPRESSION_NULL
	// extensions, skip the length for now
	k = i;
	i += 2;
	// Do we do extensions for everything, or just our preferred?
	var extend: Extension;
	// For now, just preferred
	extend = CipherSuites@[0].extension;
	// FIXME - this is a temporary hack
	if extend[SIGNALGO] then
	{
	    _packbe(pch.bytes[i:2], _uint16(ExtensionCode.SIG_HASH_ALGO));
	    i += 2;
	    _packbe(pch.bytes[i:2], 4);  i += 2;	// extension size
	    _packbe(pch.bytes[i:2], 2);  i += 2;	// list size
	    _packbe(pch.bytes[i:2], _uint16(Signature.ECDSA_SHA256));
	    i += 2;
	}
	if extend[CLICERT] then
	{   // Client certificate types supported
	    _packbe(pch.bytes[i:2],
		    _uint16(ExtensionCode.CLIENT_CERTIFICATE_TYPE));
	    i += 2;
	    _packbe(pch.bytes[i:2], 2);  i += 2;	// extension size
	    pch.bytes[i] = 1;  i += 1;			// list size
	    pch.bytes[i] = _uint8(CertificateType.RAW_PUBLIC_KEY);
	    i += 1;
	}
	if extend[SRVCERT] then
	{   // Server certificate types supported
	    _packbe(pch.bytes[i:2],
		    _uint16(ExtensionCode.SERVER_CERTIFICATE_TYPE));
	    i += 2;
	    _packbe(pch.bytes[i:2], 2);  i += 2;	// extension size
	    pch.bytes[i] = 1;  i += 1;			// list size
	    pch.bytes[i] = _uint8(CertificateType.RAW_PUBLIC_KEY);
	    i += 1;
	}
	if extend[EC] then
	{   // Elliptic curves supported
	    _packbe(pch.bytes[i:2], _uint16(ExtensionCode.ELLIPTIC_CURVES));
	    i += 2;
	    _packbe(pch.bytes[i:2], 4);  i += 2;	// extension size
	    _packbe(pch.bytes[i:2], 2);  i += 2;	// list size
	    _packbe(pch.bytes[i:2], _uint16(EllipticCurve.SECP256R1)); i += 2;
	    // EC point formats supported
	    _packbe(pch.bytes[i:2], _uint16(ExtensionCode.EC_POINT_FORMATS));
	    i += 2;
	    _packbe(pch.bytes[i:2], 2);  i += 2;	// extension size
	    pch.bytes[i] = 1;  i += 1;			// list size
	    pch.bytes[i] = _uint8(ECPointFormat.UNCOMPRESSED);
	    i += 1;
	}
	if extend[CUSTOM] then
	{   // search the list for custom extensions
	    j = 0;
if db > 1 then debug.str("custom extension\n");
	    while CipherSuites[j] != 0 do
	    {	if CipherSuites[j].hellocli != 0 then
		    i += CipherSuites[j].hellocli@(pch.bytes[i:]);
		j += 1;
	    }
	}
	// now go back and do the length of the extensions
	_packbe(pch.bytes[k:2], _uint16(i-k-2));	// size of extensions
	HashInit();
	SendHandshake(hstate.buf, ClientHelloMsgT?size + i, ClientHello);
    }

    proc SendClientKey()
    {
	var pck: ClientKeyMsg;
	var n: _uint;

if db > 0 then debug.str("SendClientKey\n");
	if state.cipher.sendkeyx == 0 then return;
	// FIXME - get buf dynamic
	pck = ClientKeyMsg(hstate.buf[HeaderT?size:]);
	n = state.cipher.sendkeyx@(pck.bytes[0:]);
	SendHandshake(hstate.buf, ClientKeyMsgT?size + n, ClientKeyExchange);
    }

    proc SendFinished()
    {   var pf: FinishedMsg;
	var hash: [sha256.DigestSize]_byte;

if db > 0 then debug.str("SendFinished\n");
	// FIXME - get buf dynamic
	pf = FinishedMsg(hstate.buf[HeaderT?size:]);
	HashSnapshot(hash);
if db > 2 then debug.dumpb("final hash=\n", hash, hash?len);
if db > 2 then debug.dumpb("msecret=\n", hstate.msecret, hstate.msecret?len);
if db > 2 then debug.dumpb("label=\n", LabelClient, LabelClient?len);
	prf(hstate.msecret, hstate.msecret?len, LabelClient, LabelClient?len,
		hash, hash?len, pf.bytes, FinishLength);
if db > 2 then debug.dumpb("final prf=\n", pf.bytes, FinishLength);
	SendHandshake(hstate.buf, FinishedMsgT?size + FinishLength, Finished);
	state.mdone = true;
    }

    /*
     * The server has sent us a HelloVerifyRequest which contains a "cookie".
     * We must resend our HelloRequest with that cookie
     */
    proc RecvVerifyRequest(msg: @[]_byte, n: _uint)
    {	var pvr: HelloVerifyRequestMsg;

	pvr = HelloVerifyRequestMsg(msg[0:]);
	SendClientHello(pvr.cookie, pvr.cookielen);
    }

    /*
     * The server has sent us a ServerHello which contains:
     * a lot of stuff.
     */
    proc RecvServerHello(msg: @[]_byte, n: _uint)
    {   var psh: ServerHelloMsg;
	var i, j, k: _uint;
	var ciphercode: CipherCode;
	var cipher: @CipherSuite;

if db > 0 then { debug.str("RecvServerHello n="); debug.uint(n); debug.nl(); }
	// FIXME - check than length n is sufficient, how?
	HashUpdate(msg, n);
	psh = ServerHelloMsg(msg[0:]);
	if psh.version != Version then
	{   SendAlert(PROTOCOL_VERSION, true);
	    return;
	}
	hstate.sendcert = false;    // until we get a cert request
	hstate.sendvrfy = false;
	hstate.rmt.random= psh.random;
	// now for the variable part
	i = 0;
	k = psh.bytes[0];	// length of session id
	i += k+1;		// skip session id
	// check cipher suite
	ciphercode = CipherCode(_unpkbe(psh.bytes[i:2]));
if db > 1 then { debug.str("cipher="); debug.hex16(_uint16(ciphercode)); debug.nl(); }
	j = 0; cipher = 0;
	while CipherSuites[j] != 0 &&
	      CipherSuites@[j].code != ciphercode do
	    j += 1;
	cipher = CipherSuites[j];
	if cipher == 0 then
	{   SendAlert(INSUFFICIENT_SECURITY, true);
	    return;
	}
	state.cipher = cipher;
	i += 2;
	// check compression
	if psh.bytes[i] != 0 then	// compression not allowed
	{   SendAlert(INSUFFICIENT_SECURITY, true);
	    return;
	}
	i += 1;
	// next are extensions, if any
	if i + ServerHelloMsgT?size >= n then return;
	var ext: ExtensionCode;
	var siz: _uint;
	k = _unpkbe(psh.bytes[i:2]);	// length of extensions
	i += 2;
	while k > 0 do
	{   ext = ExtensionCode(_unpkbe(psh.bytes[i:2]));
	    siz = _unpkbe(psh.bytes[i+2:2]);
if db > 1 then { debug.str("extension=0x"); debug.hex16(_uint16(ext)); debug.nl(); }
	    if ext
	    is CLIENT_CERTIFICATE_TYPE then
	    {	// assert siz == 1;
if db > 2 then { debug.str("client certificate type="); debug.uint8(psh.bytes[i+4]); debug.nl(); }
	    }
	    is SERVER_CERTIFICATE_TYPE then
	    {	// assert siz == 1;
if db > 2 then { debug.str("server certificate type="); debug.uint8(psh.bytes[i+4]); debug.nl(); }
	    }
	    is EC_POINT_FORMATS then
	    {
if db > 2 then { debug.str("ec point formats="); debug.hex16(_unpkbe(psh.bytes[i+4:2])); debug.nl(); }
	    }
	    is ELLIPTIC_CURVES then
	    {
	    }
	    is RENEGOTIATION_INFO then
	    {
	    }
	    else
	    {	if cipher.hellosrv != 0 then
		    cipher.hellosrv@(psh.bytes[i:], k);
		// else ignore?
	    }
	    i += 4 + siz;
	    k -= 4 + siz;
	}
    }

    /*
     * The server has sent us a ServerKeyExchange.
     */
    proc RecvServerKey(msg: @[]_byte, n: _uint): boolean
    {   var psk: ServerKeyMsg;
	var len: _uint;

if db > 0 then { debug.str("RecvServerKey n="); debug.uint(n); debug.nl(); }
	HashUpdate(msg, n);
	if state.cipher.recvkeyx == 0 then
	    SendAlert(UNEXPECTED_MESSAGE, true);
	psk = ServerKeyMsg(msg[0:]);
	len = _unpkbe(psk.length);
	state.cipher.recvkeyx@(psk.bytes[0:], len);
    }


    /*
     * The server has sent us a ServerHelloDone.
     */
    proc RecvServerDone(msg: @[]_byte, n: _uint)
    {
if db > 0 then { debug.str("RecvServerDone n="); debug.uint(n); debug.nl(); }
	HashUpdate(msg, n);
	if hstate.sendcert && state.cipher.sendcert != 0 then
	    state.cipher.sendcert@();
	SendClientKey();
	if hstate.sendvrfy && state.cipher.sendcertv != 0 then
	    state.cipher.sendcertv@();
	CalculateKeyBlock();	// FIXME - default?
	SwitchCipher();
	SendFinished();
    }

    /*
     * The server has sent us a Finished.
     */
    proc RecvFinished(msg: @[]_byte, n: _uint)
    {   var pf: FinishedMsg;
	var hash: [sha256.DigestSize]_byte;
	var verify: [FinishLength]_byte;
	var len: _uint;

if db > 0 then { debug.str("RecvFinished n="); debug.uint(n); debug.nl(); }
	pf = FinishedMsg(msg[0:]);
	HashSnapshot(hash);
if db > 2 then debug.dumpb("final hash\n", hash, sha256.DigestSize);
	prf(hstate.msecret, hstate.msecret?len, LabelServer, LabelServer?len,
		hash, hash?len, verify, FinishLength);
if db > 2 then debug.dumpb("recvhash=\n", pf.bytes, n - FinishedMsgT?size);
if db > 2 then debug.dumpb("verify=\n", verify, FinishLength);
	state.pdone = true;
    }

    // Fragments must appear in order
    proc RecvFragment(msg: @[]_byte, n: _uint,
		      len: _uint32, foff: _uint32, flen: _uint32): @[]_byte, _uint
    {	var phm: HandshakeMsg;
	var xoff, xlen: _uint32;

if db > 0 then { debug.str("RecvHandshake fragment foff="); debug.uint32(foff);
debug.str(" flen="); debug.uint32(flen); debug.nl(); }
	if foff == 0 then   // first fragment, copy header + payload
	{   hstate.buf[0:n] = msg[0:n];
	}
	else		    // not first fragment, just copy payload
	{   phm = HandshakeMsg(hstate.buf[0:]);
	    xoff = _unpkbe(phm.fraglen);    // expected offset
	    if foff == xoff then	    // frag is next in order
	    {   hstate.buf[HandshakeMsgT?size+foff:flen] = msg[HandshakeMsgT?size:flen];
		xlen = _unpkbe(phm.fraglen) + flen;
		_packbe(phm.fraglen, xlen);		// update fraglen
		if xlen == len then	    // complete
		    return hstate.buf, len + HandshakeMsgT?size;
	    }
	}
	return 0, 0;
    }

    proc RecvHandshake(msg: @[]_byte, n: _uint)
    {	var phm: HandshakeMsg;
	var len, flen, foff: _uint32;

	phm = HandshakeMsg(msg[0:]);
	len = _unpkbe(phm.length);
	foff = _unpkbe(phm.fragoff);
	flen = _unpkbe(phm.fraglen);
	if len > flen then
	{   msg, n = RecvFragment(msg, n, len, foff, flen);
	    if n == 0 then
		return;			// reassembly incomplete
	    phm = HandshakeMsg(msg[0:]);
	}
	// FIXME - check fragoff == 0, etc
	// len = _unpkbe(phm.fraglen);
if db > 2 then { debug.str("Handshake type="); debug.uint8(_uint8(phm.type));
debug.str(" len="); debug.uint(len); debug.nl(); }
	if phm.type
	is HelloVerifyRequest then
	    RecvVerifyRequest(msg, n);
	is ServerHello then
	    RecvServerHello(msg, n);
	is ServerKeyExchange then
	    RecvServerKey(msg, n);
	is Certificate then
	{   if state.cipher.recvcert != 0 then
		state.cipher.recvcert@(msg, n);
	    else
		SendAlert(UNEXPECTED_MESSAGE, true);
	}
	is CertificateRequest then
	{   if state.cipher.recvcertr != 0 then
		state.cipher.recvcertr@(msg, n);
	    else
		SendAlert(UNEXPECTED_MESSAGE, true);
	}
	is ServerHelloDone then
	    RecvServerDone(msg, n);
	is Finished then
	    RecvFinished(msg, n);
    }

    proc Recv(msg: @[]_byte, n: _uint)
    {	var ph: Header;
	var len: _uint;	// length from header
	var k: _uint;	// acutal length after decryption
	var i: _uint;
	var epoch: _uint16;
	var seqno: _uint64;

if db > 0 then { debug.str("\n====\nRecv n="); debug.uint(n); debug.nl(); }
	i = 0;
	while i < n do
	{   ph = Header(msg[i:dtls.HeaderT?size]);
	    // FIXME - check version, save seqno, etc.
	    epoch = _unpkbe(ph.seqno[0:2]);
	    seqno = _unpkbe(ph.seqno[2:6]);		// low 48 bits
	    len =   _unpkbe(ph.length);
if db > 2 then { debug.str("\nseqno="); debug.uint16(epoch);
debug.chr(','); debug.uint32(_uint32(seqno));
debug.str(" len="); debug.uint(len);
debug.dumpb("\n", msg[i:], _min(n, len)+dtls.HeaderT?size); }
	    k = len;
	    if state.rsecure then
	    {
if db > 2 then debug.str("Recv encrypted\n");
		k = state.cipher.decrypt@(ph, msg[i:], len);
	    }
	    i += dtls.HeaderT?size;

	    if ph.content
	    is Handshake then
	    {
		RecvHandshake(msg[i:], k);
	    }
	    is Alert then
	    {   var pam: AlertMsg;
		pam = AlertMsg(msg[i:]);
if db > 1 then { debug.str("Recv Alert level="); debug.uint8(_uint8(pam.level));
debug.str(" code="); debug.uint8(_uint8(pam.code)); debug.nl(); }
	    }
	    is ChangeCipher then
	    {
if db > 1 then debug.str("Recv ChangeCipher\n");
		state.rsecure = true;
	    }
	    is Data then
	    {
if db > 1 then debug.str("Recv Data\n");
	    }
	    i += len;
	}
    }

    proc HandshakeStart()
    {
	SendClientHello(0, 0);
    }
}
// vim: ts=8 sw=4 noet nowrap
