/*
 * NIST Eliptic curve P256
 *
 * P = 2²⁵⁶ - 2²²⁴ + 2¹⁹² + 2⁹⁶ - 1
 * References:
 *  1. NIST FIPS PUB 186-4 §D.2.3
 *  2. Hankerson,Menezes&Vanstone - Guide to Elliptic Curve Cryptography
 *
 * Copyright Brian G. Lucas, 2017
 * License: New BSD.
 */

import bignum4;

package secp256r1
{
    alias bignum as bn;

    const W = 256;					// width in bits
    const K = (W+(bn.Base?bits)-1)/bn.Base?bits;	// width in chunks
    type MPInt: [K]_uint32;
    type MPInt1: [K+1]_uint32;
    type MPInt2: [K*2]_uint32;
    type Point: { x: MPInt; y: MPInt; };

    const P: MPInt = {	0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000,
			0x00000000, 0x00000000, 0x00000001, 0xFFFFFFFF};
    // the parameters a and b of the elliptic curve, a = -3
    const A: MPInt = {	0xFFFFFFFC, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000,
			0x00000000, 0x00000000, 0x00000001, 0xFFFFFFFF};
    const B: MPInt = {	0x27D2604B, 0x3BCE3C3E, 0xCC53B0F6, 0x651D06B0,
			0x769886BC, 0xB3EBBD55, 0xAA3A93E7, 0x5AC635D8};
    // The base point of G
    const G: Point = { {0xD898C296, 0xF4A13945, 0x2DEB33A0, 0x77037D81,
			0x63A440F2, 0xF8BCE6E5, 0xE12C4247, 0x6B17D1F2},
		       {0x37BF51F5, 0xCBB64068, 0x6B315ECE, 0x2BCE3357,
			0x7C0F9E16, 0x8EE7EB4A, 0xFE1A7F9B, 0x4FE342E2} };
    // The order n of G
    const N: MPInt1 = {  0xFC632551, 0xF3B9CAC2, 0xA7179E84, 0xBCE6FAAD,
			0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0xFFFFFFFF,
			0x00000000};
    const order_mu: MPInt1 = 	// µ in Barrett reduction
		    {   0xEEDF9BFE, 0x012FFD85, 0xDF1A6C21, 0x43190552,
			0xFFFFFFFF, 0xFFFFFFFE, 0xFFFFFFFF, 0x00000000,
			0x00000001};

    import ffieldp;

    package ffieldp
    {
	// r = x mod P
	// double length vector in x (x must be writable)
	proc ModP(r: @MPInt, x: @MPInt2)
	{   var s: MPInt;

	    r@ = x[0:K];	// s₁
	    s[0:3] = { 0 };
	    s[3:5] = x[3+8:5];	// s₂
	    AddModP(r, r, s);	// s₁+s₂
	    AddModP(r, r, s);	// s₁+2s₂
	    s[0:3] = { 0 };
	    s[3:4] = x[3+9:4];
	    s[7]   = 0;		// s₃
	    AddModP(r, r, s);	// s₁+2s₂+s₃
	    AddModP(r, r, s);	// s₁+2s₂+2s₃
	    s[0:3] = x[0+8:3];
	    s[3:3] = { 0 };
	    s[6:2] = x[6+8:2];	// s₄
	    AddModP(r, r, s);	// s₁+2s₂+2s₃+s₄
	    s[0:3] = x[0+9:3];
	    s[3:3] = x[3+10:3];
	    s[6]   = x[6+7];
	    s[7]   = x[7+1];	// s₅
	    AddModP(r, r, s);	// s₁+2s₂+2s₃+s₄+s₅
	    s[0:3] = x[0+11:3];
	    s[3:3] = { 0 };
	    s[6]   = x[6+2];
	    s[7]   = x[7+3];	// s₆
	    SubModP(r, r, s);	// s₁+2s₂+2s₃+s₄+s₅-s₆
	    s[0:4] = x[0+12:4];
	    s[4:2] = { 0 };
	    s[6]   = x[6+3];
	    s[7]   = x[7+4];	// s₇
	    SubModP(r, r, s);	// s₁+2s₂+2s₃+s₄+s₅-s₆-s₇
	    s[0:3] = x[0+13:3];
	    s[3:3] = x[3+5:3];
	    s[6]   = 0;
	    s[7]   = x[7+5];	// s₈
	    SubModP(r, r, s);	// s₁+2s₂+2s₃+s₄+s₅-s₆-s₇-s₈
	    s[0:2] = x[0+14:2];
	    s[2]   = 0;
	    s[3:3] = x[3+6:3];
	    s[6]   = 0;
	    s[7]   = x[7+6];	// s₉
	    SubModP(r, r, s);	// s₁+2s₂+2s₃+s₄+s₅-s₆-s₇-s₈-s₉
	}
    }

    import eccp;
}

