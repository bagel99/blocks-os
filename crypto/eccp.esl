/*
 * Common routines for Elliptic Curve routines based on NIST primes
 *
 * Before importing, define the finite field and import ffieldp.
 *
 * Also, define a random routine "Rand" needed to generate keys.
 */

    if !_defined(Rand) then error "Rand not defined";
    alias ffieldp as f;
    const NB = W/8;					// width in bytes
    type Bytes: [NB]_byte;

    proc (dst: @MPInt) Import(src: @Bytes)
    {	bn.Import(dst, src, NB);
    }

    proc (src: @MPInt) Export(dst: @Bytes)
    {	bn.Export(dst, src, NB);
    }

    proc (src: @Point) Export(dst: @[NB+NB+1]_byte, compressed: boolean): _uint
    {
	if compressed then
	{   dst[0] = 0x02; // FIXME + low order bit of pt.y
	    src.x.Export(dst[1:NB]);
	    return NB + 1;
	}
	else	// uncompressed
	{   dst[0] = 0x04;
	    src.x.Export(dst[1:NB]);
	    src.y.Export(dst[NB+1:NB]);
	    return (NB*2) + 1;
	}
    }

    proc (dst: @Point) Import(src: @[NB+NB+1]_byte)
    {
	if src[0] == 0x04 then // uncompressed
	{   dst.x.Import(src[1:NB]);
	    dst.y.Import(src[1+NB:NB]);
	}
	else
	{   // FIXME - compressed
	}
    }

    if _defined(debug.dumpb) then {
	proc (src: @MPInt) Dump(name: @[]_byte)
	{   var buf: [NB]_byte;
	    src.Export(buf);
	    debug.dumpb(name, buf, NB);
	}

	proc (src: @Point) Dump(name: @[]_byte)
	{   var buf: [1+NB+NB]_byte;
	    src.Export(buf, false);
	    debug.dumpb(name, buf[1:NB], NB);
	    debug.dumpb("", buf[1+NB:NB], NB);
	}
    }

    proc PointDouble(r: @Point, p: @Point)
    {
	var s, t: MPInt;

	if bn.isZero(p.x, K) && bn.isZero(p.y, K) then
	{   _zero(r@);
	    return;
	}
	_zero(s);		// for small constants
	f.MulModP(t, p.x, p.x);	// t = p.x²
	s[0] = 1;		// s = 1
	f.SubModP(t, t, s);	// t = p.x²-1
	s[0] = 3;		// s = 3
	f.MulModP(t, t, s);	// t = 3(p.x²-1) = 3p.x²+a because a=-3
	f.AddModP(s, p.y, p.y);	// s = 2p.y
	f.InvModP(s, s);	// s = 1/2p.y
	f.MulModP(s, t, s);	// s = (3p.x²+a)/2p.y
	f.MulModP(t, s, s);	// t = s²
	f.SubModP(t, t, p.x);	// t = s²-p.x
	f.SubModP(r.x, t, p.x);	// r.x = s²-p.x-p.x = s²-2p.x
	f.SubModP(t, p.x, r.x);	// t = p.x-r.x
	f.MulModP(s, s, t);	// s = s(p.x-r.x)
	f.SubModP(r.y, s, p.y);	// r.y = s(p.x-r.x)-p.y
    }

    proc PointAdd(r: @Point, p: @Point, q: @Point)
    {
	var t, u, v: MPInt;

	if bn.isZero(p.x, K) && bn.isZero(p.y, K) then
	{   r@ = q@;
	    return;
	}
	if bn.isZero(q.x, K) && bn.isZero(q.y, K) then
	{   r@ = p@;
	    return;
	}
	if p.x == q.x then
	{   if p.y == q.y then
		PointDouble(r, p);
	    else
	    {	_zero(r@);
	    }
	    return;
	}
	f.SubModP(t, p.y, q.y);	// t = p.y-q-y
	f.SubModP(u, p.x, q.x);	// u = p.x-q.x
	f.InvModP(u, u);	// u = 1/(p.x-q.x)
	f.MulModP(v, t, u);	// v = (p.y-q-y)/(p.x-q.x)
	f.MulModP(t, v, v);	// t = v²
	f.SubModP(u, t, p.x);	// u = v²-p.x
	f.SubModP(r.x, u, q.x);	// r.x = v²-p.x-q.x
	f.SubModP(u, q.x, r.x);	// u = q.x-r.x
	f.MulModP(v, v, u);	// v = v(q.x-r.x)
	f.SubModP(r.y, v, q.y);	// r.y = v(q.x-r.x)-q.y
    }

    // multiply  point (px,py) by scalar sc, result point is (rx,ry)
    proc PointMul(r: @Point, p: @Point, sc: @MPInt)
    {
	var q, t: Point;
	var i: _uint;

	_zero(q);
	i = W;
	while i > 0 do
	{   i -= 1;
	    PointDouble(t, q);
	    q = t;
	    if sc[i/32] & (_uint32(1) << (i%32)) != 0 then
	    {	PointAdd(t, q, p);
		q = t;
	    }
	}
	r@ = q;
    }

    proc PointEQ(p1: @Point, p2: @Point): boolean
    {
	if bn.Cmp(p1.x, p2.x, K) != 0 then return false;
	if bn.Cmp(p1.y, p2.y, K) != 0 then return false;
	return true;
    }

    proc ECDH(pub: @Point, priv: @MPInt, result: @Point)
    {
	PointMul(result, pub, priv);
    }

    // Generate public key with specific generator gen
    proc (gen: Point) GenPubKey(priv: @MPInt, pub: @Point)
    {
	PointMul(pub, gen, priv);
    }

    // Generate public key with default generator G
    proc GenPubKey(priv: @MPInt, pub: @Point)
    {
	PointMul(pub, G, priv);
    }

    proc IsKeyValid(key: @MPInt): boolean
    {
	return bn.isGT(N, key, K);
    }

    // Generate public and private keys with specific generator gen
    proc (gen: Point) GenerateKeys(priv: @MPInt, pub: @Point)
    {
	var rand: [NB]_byte: align(4);

	do
	{   Rand(rand, NB);
	    priv.Import(rand);
	} while !IsKeyValid(priv);
	gen.GenPubKey(priv, pub);
    }

    // r = x mod N where N is the order of the curve
    // uses Barrett's reduction method
    proc ModN(r: @MPInt, x: @MPInt2, len: _uint)
    {   var q1q3: MPInt1;
	var q2:   [(K+1)*2]_uint32;

	// if x is smaller than the modulus
	if len == K && bn.isLT(x, N, K) then
	{   //if x != out then	// not the same vector
	    r@ = x[0:K];
	    return;
	}
	bn.RShf(q1q3, x, len, K+1, K-1);
	f.Mul(q2, order_mu, q1q3, K+1);
	bn.RShf(q1q3, q2, (K+1)*2, K, K+1);
	f.Mul(q2, q1q3, N, K);
	bn.Sub(q1q3, x, q2, K+1);
	while bn.isGE(q1q3, N, K+1) do
	    bn.Sub(q1q3, q1q3, N, K+1);
	r@ = q1q3[0:K];
    }

    proc MulModN(r: @MPInt, x: @MPInt, y: @MPInt)
    {	var t: MPInt2;

	f.Mul(t, x, y, K);
	ModN(r, t, K*2);
    }

    // r = (x + y) mod N
    proc AddModN(r: @MPInt, x: @MPInt, y: @MPInt)
    {
	// if carry out or result larger than N then reduce
	if bn.Add(r, x, y, K) != 0 || bn.isGE(r, N, K) then
	    bn.Sub(r, r, N, K);
    }

    // r = (x - y) mod N
    proc SubModN(r: @MPInt, x: @MPInt, y: @MPInt)
    {   var tmp: MPInt;

	// if carry out then we wrapped
	if bn.Sub(r, x, y, K) != 0 then
	    bn.Add(r, r, N, K);
    }

    // r = -x mod N
    proc NegModN(r: @MPInt, x: @MPInt)
    {
	bn.Sub(r, N, x, K);
    }

    proc Sign(d: @MPInt,			// private key on the curve
	      e: @MPInt,			// hash to sign
	      k: @MPInt,			// random data
	      r: @MPInt, s: @MPInt	// out, signature
	     ):  boolean		// true if all was OK
    {
	var T: Point;
	var t1, t2: MPInt;

	if bn.isZero(k, K) || !bn.isGT(N, k, K) then
	    return false;		// 0 < k < N failed
	PointMul(T, G, k);
	r@ = T.x;
	if !bn.isGT(N, r, K) then	// must reduce mod N
	    bn.Sub(r, r, N, K);
	if bn.isZero(r@, K) then
	    return false;		// bad random number
	MulModN(t1, r, d);
	f.AddMod(t2, e, t1, N);
	f.InvMod(t1, k, N);
	MulModN(s, t1, t2);
	if bn.isZero(s@, K) then return false;
	return true;
    }

    proc Validate(pub: @Point,		// coordinates of the public key
		  e: @MPInt,		// hash
	          r: @MPInt, s: @MPInt	// signature
	         ):  boolean		// true if all was OK
    {
	var w: MPInt;
	var u1, u2: MPInt;
	var p: Point;
	var t1, t2, t3: Point;
	var t3x, t3y: MPInt;

	f.InvMod(w, s, N);
	MulModN(u1, e, w);
	MulModN(u2, r, w);
	PointMul(t1, G, u1);
	PointMul(t2, pub, u2);
	PointAdd(t3, t1, t2);

	return t3.x == r@;
    }

