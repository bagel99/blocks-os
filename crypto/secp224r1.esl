/*
 * NIST Eliptic curve P224
 *
 * P = 2²²⁴ - 2⁹⁶ + 1
 * References:
 *  1. NIST FIPS PUB 186-4 §D.2.2
 *  2. Hankerson,Menezes&Vanstone - Guide to Elliptic Curve Cryptography
 *
 * Copyright Brian G. Lucas, 2017
 * License: New BSD.
 */

import bignum4;

package secp224r1
{
    alias bignum as bn;

    const W = 224;					// width in bits
    const K = (W+(bn.Base?bits)-1)/bn.Base?bits;	// width in chunks
    type MPInt: [K]_uint32;
    type MPInt1: [K+1]_uint32;
    type MPInt2: [K*2]_uint32;
    type Point: { x: MPInt; y: MPInt; };
    const P: MPInt = {	0x00000001,0x00000000,0x00000000,0xFFFFFFFF,
			0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF};
    const B: MPInt = {	0x2355FFB4,0x270B3943,0xD7BFD8BA,0x5044B0B7,
			0xF5413256,0x0C04B3AB,0xB4050A85};
    const G: Point = { {0x115C1D21,0x343280D6,0x56C21122,0x4A03C1D3,
			0x321390B9,0x6BB4BF7F,0xB70E0CBD},
		       {0x85007E34,0x44D58199,0x5A074764,0xCD4375A0,
			0x4C22DFE6,0xB5F723FB,0xBD376388} };
    const N: MPInt1 = {  0x5C5C2A3D,0x13DD2945,0xE0B8F03E,0xFFFF16A2,
			0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0x00000000};
    const order_mu: MPInt1 = 	// µ in Barrett reduction
		    {	0xA3A3D5C3, 0xEC22D6BA, 0x1F470FC1, 0x0000E95D,
			0x00000000, 0x00000000, 0x00000000, 0x00000001};

    import ffieldp;

    package ffieldp
    {
	// r = x mod P
	// double length vector in x
	proc ModP(r: @MPInt, x: @MPInt2)
	{   var s: MPInt;

	    r@ = x[0:K];	// s₁
	    s[0:3] = { 0 };
	    s[3:4] = x[7:4];	// s₂
	    AddModP(r, r, s);	// s₁+s₂
	    s[0:3] = { 0 };
	    s[3:3] = x[11:3];
	    s[6] = 0;		// s₃
	    AddModP(r, r, s);	// s₁+s₂+s₃
	    s[0:7] = x[7:7];	// s₄
	    SubModP(r, r, s);	// s₁+s₂+s₃-s₄
	    s[0:3] = x[11:3];
	    s[3:4] = { 0 };	// s₅
	    SubModP(r, r, s);	// s₁+s₂+s₃-s₄-s₅
	}
    }

    import eccp;
}

