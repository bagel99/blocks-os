/*
 * NIST Eliptic curve P521
 *
 * P = 2⁵²¹ - 1	(This a pure Mersenne prime)
 * References:
 *  1. NIST FIPS PUB 186-4 §D.2.5
 *  2. Hankerson,Menezes&Vanstone - Guide to Elliptic Curve Cryptography
 *
 * Copyright Brian G. Lucas, 2017
 * License: New BSD.
 */

import bignum4;

package secp521r1
{
    alias bignum as bn;

    const W = 521;					// width in bits
    const K = (W+(bn.Base?bits)-1)/bn.Base?bits;	// width in chunks
    type Vect: [K]_uint32;
    type Vect1: [K+1]_uint32;
    type Vect2: [K*2]_uint32;
    type Point: { x: Vect; y: Vect; };
    const P: Vect = {	0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
    			0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
    			0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
    			0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
    			0x000001FF };
    const B: Vect = {	0x6B503F00, 0xEF451FD4, 0x3D2C34F1, 0x3573DF88,
			0x3BB1BF07, 0x1652C0BD, 0xEC7E937B, 0x56193951,
			0x8EF109E1, 0xB8B48991, 0x99B315F3, 0xA2DA725B,
			0xB68540EE, 0x929A21A0, 0x8E1C9A1F, 0x953EB961,
			0x00000051 };
    const G: Point = { {0xC2E5BD66, 0xF97E7E31, 0x856A429B, 0x3348B3C1,
			0xA2FFA8DE, 0xFE1DC127, 0xEFE75928, 0xA14B5E77,
			0x6B4D3DBA, 0xF828AF60, 0x053FB521, 0x9C648139,
			0x2395B442, 0x9E3ECB66, 0x0404E9CD, 0x858E06B7,
			0x000000C6},
		       {0x9FD16650, 0x88BE9476, 0xA272C240, 0x353C7086,
		        0x3FAD0761, 0xC550B901, 0x5EF42640, 0x97EE7299,
		        0x273E662C, 0x17AFBD17, 0x579B4468, 0x98F54449,
		        0x2C7D1BD9, 0x5C8A5FB4, 0x9A3BC004, 0x39296A78,
		        0x00000118} };
    const N: Vect1 = {  0x91386409, 0xBB6FB71E, 0x899C47AE, 0x3BB5C9B8,
			0xF709A5D0, 0x7FCC0148, 0xBF2F966B, 0x51868783,
			0xFFFFFFFA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
			0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
			0x000001FF, 0x00000000 };


  package field
  {
    proc RShf(x: @Vect)
    {   var i: _uint;
	var c, t: _uint32;

	c = 0;
	i = K;
	do
	{   i -= 1;
	    t = x[i] & 1;
	    x[i] = (x[i] >> 1) | (c << 31);
	    c = t;
	} while i > 0;
	    
    }
    
    // r = (x + y) mod P
    proc AddP(r: @Vect, x: @Vect, y: @Vect)
    {
	// if carry out or result larger than P then reduce
	if bn.Add(r, x, y, K) != 0 || bn.isGE(r, P, K) then
	    bn.Sub(r, r, P, K);
    }

    // r = (x + y) mod m
    proc AddM(r: @Vect, x: @Vect, y: @Vect, m: @Vect)
    {
	// if carry out or result larger than P then reduce
	if bn.Add(r, x, y, K) != 0 || bn.isGE(r, m, K) then
	    bn.Sub(r, r, m, K);
    }

    // r = (x - y) mod P
    proc SubP(r: @Vect, x: @Vect, y: @Vect)
    {   var tmp: Vect;

	// if carry out then we wrapped
	if bn.Sub(r, x, y, K) != 0 then
	    bn.Add(r, r, P, K);
    }

    // called with len=K and len=K+1
    proc Mul(r: @Vect, x: @Vect, y: @Vect, n: _uint32)
    {   var i, j: _uint;
	var t: _uint64;
	var tmp: [(K+1)*2]_uint32;

	_zero(tmp[0:n*2]);
	_zero(r[0:n*2]);
	for i from 0 to n-1 do
	{   for j from 0 to n-1 do
	    {	t = x[j] * y[i];
		tmp[i+j] = _uint32(t);
		tmp[i+j+1] = _uint32(t >> 32);
		bn.Add(r[i+j:], tmp[i+j:], r[i+j:], n*2 - (i+j));
		_zero(tmp[0:n*2]);
	    }
	}
    }

    // r = x mod P
    // double length vector in x (x must be writable)
    // assert x < P²
    proc ModP(r: @Vect, x: @Vect2)
    {   var s: Vect1;

	// s2 is low order 521 bits
	r@ = x[0:K]; r[K-1] &= 0x1FF;		// s₂
	// s1 is high order 521 bits
	s = x[K-1:K+1];
//	bn.RShfN(s, s, 9, K);	// FIXME - replace by bignum shift by n
	var i: _uint;
	for i from 0 to 9-1 do
	    bn.RShf1(s, K);
	AddP(r, r, s[0:K]);			// s₁+s₂
    }

    // r = (x * y) mod P
    proc MulModP(r: @Vect, x: @Vect, y: @Vect)
    {	var t: Vect2;

	Mul(t, x, y, K);
	ModP(r, t);
    }

    // Multiplicative inverse
    // r = 1/x mod m
    proc InvModM(r: @Vect, x: @Vect, m: @Vect)
    {   var t: _int;
	var c: bn.Base;
	var a, b, u, v: Vect;

	a = x@;
	b = m@;
	_zero(u); u[0] = 1;	// u = {1}
	_zero(v);
	loop
	{   t = bn.Cmp(a, b, K);
	  exit t == 0;
	    c = 0;
	    if bn.isEven(a) then
	    {	bn.RShf1(a, K);
		if bn.isOdd(u) then
		    c = bn.Add(u, u, m, K);
		bn.RShf1(u, K);
		u[K-1] |= c << (bn.Base?bits-1);
	    }
	    elif bn.isEven(b) then
	    {	bn.RShf1(b, K);
		if bn.isOdd(v) then
		    c = bn.Add(v, v, m, K);
		bn.RShf1(v, K);
		v[K-1] |= c << (bn.Base?bits-1);
	    }
	    elif t > 0 then
	    {	bn.Sub(a, a, b, K);
		bn.RShf1(a, K);
		if bn.Cmp(u, v, K) < 0 then
		    bn.Add(u, u, m, K);
		bn.Sub(u, u, v, K);
		if bn.isOdd(u) then
		    c = bn.Add(u, u, m, K);
		bn.RShf1(u, K);
		u[K-1] |= c << (bn.Base?bits-1);
	    }
	    else
	    {	bn.Sub(b, b, a, K);
		bn.RShf1(b, K);
		if bn.Cmp(v, u, K) < 0 then
		    bn.Add(v, v, m, K);
		bn.Sub(v, v, u, K);
		if bn.isOdd(v) then
		    c = bn.Add(v, v, m, K);
		bn.RShf1(v, K);
		v[K-1] |= c << (bn.Base?bits-1);
	    }
	}
	r@ = u;
    }

    proc InvModP(r: @Vect, x: @Vect)
    {
	InvModM(r, x, P);
    }
  }	// end package field

    alias field as f;

    proc PointDouble(r: @Point, p: @Point)
    {
	var s, t: Vect;

	if bn.isZero(p.x, K) && bn.isZero(p.y, K) then
	{   _zero(r@);
	    return;
	}
	_zero(s);		// for small constants
	f.MulModP(t, p.x, p.x);	// t = p.x²
	s[0] = 1;		// s = 1
	f.SubP(t, t, s);	// t = p.x²-1
	s[0] = 3;		// s = 3
	f.MulModP(t, t, s);	// t = 3(p.x²-1) = 3p.x²+a because a=-3
	f.AddP(s, p.y, p.y);	// s = 2p.y
	f.InvModP(s, s);	// s = 1/2p.y
	f.MulModP(s, t, s);	// s = (3p.x²+a)/2p.y
	f.MulModP(t, s, s);	// t = s²
	f.SubP(t, t, p.x);	// t = s²-p.x
	f.SubP(r.x, t, p.x);	// r.x = s²-p.x-p.x = s²-2p.x
	f.SubP(t, p.x, r.x);	// t = p.x-r.x
	f.MulModP(s, s, t);	// s = s(p.x-r.x)
	f.SubP(r.y, s, p.y);	// r.y = s(p.x-r.x)-p.y
    }

    proc PointAdd(r: @Point, p: @Point, q: @Point)
    {
	var t, u, v: Vect;

	if bn.isZero(p.x, K) && bn.isZero(p.y, K) then
	{   r@ = q@;
	    return;
	}
	if bn.isZero(q.x, K) && bn.isZero(q.y, K) then
	{   r@ = p@;
	    return;
	}
	if p.x == q.x then
	{   if p.y == q.y then
		PointDouble(r, p);
	    else
	    {	_zero(r@);
	    }
	    return;
	}
	f.SubP(t, p.y, q.y);
	f.SubP(u, p.x, q.x);
	f.InvModP(u, u);
	f.MulModP(v, t, u);
	f.MulModP(t, v, v);
	f.SubP(u, t, p.x);
	f.SubP(r.x, u, q.x);
	f.SubP(u, q.x, r.x);
	f.MulModP(v, v, u);
	f.SubP(r.y, v, q.y);
    }

    // multiply  point (px,py) by scalar sc, result point is (rx,ry)
    proc PointMul(r: @Point, p: @Point, sc: @Vect)
    {
	var q, t: Point;
	var i: _uint;

	_zero(q);
	i = W;
	while i > 0 do
	{   i -= 1;
	    PointDouble(t, q);
	    q = t;
	    if sc[i/32] & (_uint32(1) << (i%32)) != 0 then
	    {	PointAdd(t, q, p);
		q = t;
	    }
	}
	r@ = q;
    }

    proc ECDH(pub: @Point, priv: @Vect, result: @Point)
    {
	PointMul(result, pub, priv);
    }

    proc GenPubKey(priv: @Vect, pub: @Point)
    {
	PointMul(pub, G, priv);
    }

    proc IsKeyValid(key: @Vect): boolean
    {
	return bn.isGT(N, key, K);
    }

    // r = x mod N where N is the order of the curve
    // uses Barrett's reduction method
    proc ModN(r: @Vect, x: @Vect2, len: _uint)
    {   var q1q3: Vect1;
	var q2:   [(K+1)*2]_uint32;
	const order_mu: Vect1 = 	// µ in Barrett reduction
	{   0xF501C8D1, 0xE6FDC408, 0x12385BB1, 0xEE145124,
	    0x8D91DD98, 0x968BF112, 0xFFADC23D, 0x1A65200C,
	    0x5E1F1034, 0x00016B9E, 0x00000000, 0x00000000,
	    0x00000000, 0x00000000, 0x00000000, 0x00000000,
	    0x00000000, 0x00800000
	};

	// if x is smaller than the modulus
	if len == K && bn.isLT(x, N, K) then
	{   //if x != out then	// not the same vector
	    r@ = x[0:K];
	    return;
	}
	bn.RShf(q1q3, x, len, K+1, K-1);
	f.Mul(q2, order_mu, q1q3, K+1);
	bn.RShf(q1q3, q2, (K+1)*2, K, K+1);
	f.Mul(q2, q1q3, N, K);
	bn.Sub(q1q3, x, q2, K+1);
	while bn.isGE(q1q3, N, K+1) do
	    bn.Sub(q1q3, q1q3, N, K+1);
	r@ = q1q3[0:K];
    }

    proc MulModN(r: @Vect, x: @Vect, y: @Vect)
    {	var t: Vect2;

	f.Mul(t, x, y, K);
	ModN(r, t, K*2);
    }

    proc Sign(d: @Vect,			// private key on the curve
	      e: @Vect,			// hash to sign
	      k: @Vect,			// random data
	      r: @Vect, s: @Vect	// out, signature
	     ):  boolean		// true if all was OK
    {
	var T: Point;
	var t1, t2: Vect;

	if bn.isZero(k, K) || !bn.isGT(N, k, K) then
	    return false;		// 0 < k < N failed
	PointMul(T, G, k);
	r@ = T.x;
	if !bn.isGT(N, r, K) then	// must reduce mod N
	    bn.Sub(r, r, N, K);
	if bn.isZero(r@, K) then
	    return false;		// bad random number
	MulModN(t1, r, d);
	f.AddM(t2, e, t1, N);
	f.InvModM(t1, k, N);
	MulModN(s, t1, t2);
	if bn.isZero(s@, K) then return false;
	return true;
    }

    proc Validate(pub: @Point,		// coordinates of the public key
		  e: @Vect,		// hash
	          r: @Vect, s: @Vect	// signature
	         ):  boolean		// true if all was OK
    {
	var w: Vect;
	var u1, u2: Vect;
	var p: Point;
	var t1, t2, t3: Point;
	var t3x, t3y: Vect;

	f.InvModM(w, s, N);
	MulModN(u1, e, w);
	MulModN(u2, r, w);
	PointMul(t1, G, u1);
	PointMul(t2, pub, u2);
	PointAdd(t3, t1, t2);

	return t3.x == r@;
    }
}

