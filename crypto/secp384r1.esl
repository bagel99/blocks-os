/*
 * NIST Eliptic curve P384
 *
 * P = 2³⁸⁴ - 2¹²⁸ - 2⁹⁶ + 2³¹ - 1
 * References:
 *  1. NIST FIPS PUB 186-4 §D.2.4
 *  2. Hankerson,Menezes&Vanstone - Guide to Elliptic Curve Cryptography
 *
 * Copyright Brian G. Lucas, 2017
 * License: New BSD.
 */

import bignum4;

package secp384r1
{
    alias bignum as bn;

    const W = 384;					// width in bits
    const K = (W+(bn.Base?bits)-1)/bn.Base?bits;	// width in chunks
    type Vect: [K]_uint32;
    type Vect1: [K+1]_uint32;
    type Vect2: [K*2]_uint32;
    type Point: { x: Vect; y: Vect; };
    const P: Vect = {	0xFFFFFFFF, 0x00000000, 0x00000000, 0xFFFFFFFF,
			0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
			0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF };
    // the parameters a and b of the elliptic curve, a = -3
    const A: Vect = {	0xFFFFFFFC, 0x00000000, 0x00000000, 0xFFFFFFFF,
			0xFFFFFFFE, 0xFFFFFFFF,	0xFFFFFFFF, 0xFFFFFFFF,
			0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF };
    const B: Vect = {	0xD3EC2AEF, 0x2A85C8ED, 0x8A2ED19D, 0xC656398D,
			0x5013875A, 0x0314088F, 0xFE814112, 0x181D9C6E,
			0xE3F82D19, 0x988E056B, 0xE23EE7E4, 0xB3312FA7 };
    const G: Point = { {0x72760AB7, 0x3A545E38, 0xBF55296C, 0x5502F25D,
			0x82542A38, 0x59F741E0, 0x8BA79B98, 0x6E1D3B62,
			0xF320AD74, 0x8EB1C71E, 0xBE8B0537, 0xAA87CA22},
		       {0x90EA0E5F, 0x7A431D7C, 0x1D7E819D, 0x0A60B1CE,
			0xB5F0B8C0, 0xE9DA3113, 0x289A147C, 0xF8F41DBD,
			0x9292DC29, 0x5D9E98BF, 0x96262C6F, 0x3617DE4A} };
    const N: Vect1 = {  0xCCC52973, 0xECEC196A, 0x48B0A77A, 0x581A0DB2,
			0xF4372DDF, 0xC7634D81, 0xFFFFFFFF, 0xFFFFFFFF,
			0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
			0x00000000 };
    const order_mu: Vect1 = 	// µ in Barrett reduction
		    {	0x333AD68D, 0x1313E695, 0xB74F5885, 0xA7E5F24D,
			0x0BC8D220, 0x389CB27E, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000001};

    import ffieldp;

    package ffieldp
    {
	// r = x mod P
	// double length vector in x (x must be writable)
	proc ModP(r: @Vect, x: @Vect2)
	{   var s: Vect;

	    r@ = x[0:K];	// t
	    s[0:4] = { 0 };
	    s[4:3] = x[21:3];
	    s[7:5] = { 0 };	// s₁
	    AddModP(r, r, s);	// t+s₁
	    AddModP(r, r, s);	// t+2s₁
	    s = x[12:12];	// s₂
	    AddModP(r, r, s);	// t+2s₁+s₂
	    s[0:3] = x[21:3];
	    s[3:9] = x[12:9];	// s₃
	    AddModP(r, r, s);	// t+2s₁+s₂+s₃
	    s[0] = 0;
	    s[1] = x[23];
	    s[2] = 0;
	    s[3] = x[20];
	    s[4:8] = x[12:8];	// s₄
	    AddModP(r, r, s);	// t+2s₁+s₂+s₃+s₄
	    s[0:4] = { 0 };
	    s[4:4] = x[20:4];
	    s[8:4] = { 0 };	// s₅
	    AddModP(r, r, s);	// t+2s₁+s₂+s₃+s₄+s₅
	    s[0] = x[20];
	    s[1:2] = { 0 };
	    s[3:3] = x[21:3];
	    s[6:6] = { 0 };	// s₆
	    AddModP(r, r, s);	// t+2s₁+s₂+s₃+s₄+s₅+s₆
	    s[0] = x[23];
	    s[1:11] = x[12:11];	// d₁
	    SubModP(r, r, s);	// t+2s₁+s₂+s₃+s₄+s₅+s₆-d₁
	    s[0] = 0;
	    s[1:4] = x[20:4];
	    s[5:7] = { 0 };	// d₂
	    SubModP(r, r, s);	// t+2s₁+s₂+s₃+s₄+s₅+s₆-d₁-d₂
	    s[0:3] = { 0 };
	    s[3] = x[23];
	    s[4] = x[23];
	    s[5:7] = { 0 };	// d₃
	    SubModP(r, r, s);	// t+2s₁+s₂+s₃+s₄+s₅+s₆-d₁-d₂-d₃
	}
    }

    import eccp;
}

