/*
 * AES CCM mode
 * References:
 *  1. RFC 3610
 *  2. NIST FIPS 800-38C
 * Notation:
 *  1. nonce
 *  2. mdata - message data to encrypt and authenticate (aka "payload")
 *  3. adata - additional data to authenticate (aka "header")
 *  4. tag - message digest
 * Implementation limitations:
 *  1. nonce length - 15
 *  2. adata length - _uint16?max - 256 
 *  3. mdata length - _uint16?max
 *  4. tag length   - 2,4,6,8,10,12,14,16
 * Copyright Brian G. Lucas, 2016
 * License: New BSD.
 */

import aes;

package aesccm
{
	const AesBlockSize = 16;	// must be 16, i.e. 128 bits

	type State:
	{   aes:    aes.Context;    // AES expanded key
	    B:      [AesBlockSize]_byte;    // current block
	    X:      [AesBlockSize]_byte;    // previous block
	    ctr:    [AesBlockSize]_byte;
	    ctrpad: [AesBlockSize]_byte;
	    alen:   _uint16;	    // length of adata
	    acur:   _uint16;
	    mlen:   _uint16;	    // length of mdata
	    mcur:   _uint16;
	    nlen:   _uint8;	    // length of nonce
	    blklen: _uint8;
	    ctrlen: _uint8;
	    tlen:   _uint8;	    // length of tag (MAC)
	};
	type pState: @State;

	proc (s: pState) DoBlock()
	{   var i: _uint;

	    if s.blklen < AesBlockSize then
		_zero(s.B[s.blklen:AesBlockSize-s.blklen]);
//debug.dumpb("Bi: ", s.B, AesBlockSize);
	    for i from 0 to AesBlockSize-1 do
		s.B[i] = s.B[i] ^ s.X[i];
	    s.aes.Encrypt(s.B, s.X);
	    
	}
	
	proc (s: pState) SetKey(key: @[]_byte, ks: aes.KeySize)
	{
	    s.aes.LoadKey(ks, key);
	}

	proc (s: pState) Start(alen: _uint,
			       mlen: _uint,
			       tlen: _uint,
			       nonce: @[]_byte,
			       nlen: _uint)
	{
	    var L: _uint;       // number of octets needed for payload length
	    var len, i: _uint;

	    tlen = tlen & ~1;		    // tag length must be even
	    tlen = _min(tlen, AesBlockSize);    // and not larger than block

	    L = 0;
	    len = mlen;
	    while len > 0 do
	    {   L += 1;
		len = len / 256;
	    }
	    L = _max(L, 2);			    // L must be at least 2
	    if 15 - nlen < L then       // nonce too long
		return;     // FIXME - error
	    L = 15 - nlen;

	    s.B[0] = (_uint8(alen != 0) << 6) |	    // adata present
			_uint8(((tlen -2 ) >> 1) << 3) |    // tag length
			_uint8(L - 1);			    // mlen octets
	    s.B[1:nlen] = nonce[0:nlen];

	    len = mlen;
	    i = AesBlockSize-1;
	    while i > nlen do
	    {   s.B[i] = _uint(len);
		len = len / 256;
		i -= 1;
	    }
//debug.dumpb("B0: ", s.B, AesBlockSize);
	    s.aes.Encrypt(s.B, s.X);

	    if alen > 0 then
	    {   if alen < 65536 - 256 then
		{   _packbe(s.B[0:2], _uint16(alen));
		    s.blklen = 2;
		}
		else
		{   s.B[0] = 0xFF;
		    s.B[1] = 0xFE;
		    _packbe(s.B[2:4], _uint32(alen));
		    s.blklen = 6;
		}
	    }

	    s.ctr[0] = L - 1;
	    s.ctr[1:nlen] = nonce[0:nlen];
	    _zero(s.ctr[nlen+1:AesBlockSize-nlen+1]);

	    s.nlen = nlen;
	    s.alen = alen;
	    s.acur = 0;
	    s.mlen = mlen;
	    s.mcur = 0;
	    s.ctrlen = AesBlockSize;
	    s.tlen = tlen;
	}

	proc (s: pState) Header(hdr: @[]_byte, len: _uint)
	{   var i: _uint;

	    if s.acur + len > s.alen then   // overflow
		return;     // FIXME - what should we do?
	    for i from 0 to len-1 do
	    {   if s.blklen == AesBlockSize then   // block buffer full
		{   s.DoBlock();
		    s.blklen = 0;
		}
		s.B[s.blklen] = hdr[i];
		s.blklen += 1;
	    }

	    s.acur += len;
	    if s.acur == s.alen then    // done header, process
	    {   if s.blklen != 0 then
		{   s.DoBlock();
		}
		s.blklen = 0;
	    }
	}

	proc (s: pState) Payload(in: @[]_byte, out: @[]_byte, len: _uint, decrypt: boolean)
	{   var i, j: _uint;
	    var t: _byte;

	    if s.mcur + len > s.mlen then       // overflow
		return;     // FIXME - what should we do?
	    for i from 0 to len-1 do
	    {   if s.ctrlen == 16 then
		{   j = AesBlockSize - 1;
		    loop
		    {   s.ctr[j] += 1;
		      exit s.ctr[j] != 0;     // no carry
			j -= 1;
		      exit j == s.nlen;
		    }
		    s.aes.Encrypt(s.ctr, s.ctrpad);
		    s.ctrlen = 0;
		}
		t = in[i];
		out[i] = t ^ s.ctrpad[s.ctrlen];
		if decrypt then t = out[i];
		s.ctrlen += 1;
		if s.blklen == AesBlockSize then
		{   s.DoBlock();
		    s.blklen = 0;
		}
		s.B[s.blklen] = t;
		s.blklen += 1;
	    }

	    s.mcur += len;
	    if s.mcur >= s.mlen then    // done text
	    {   if s.blklen != 0 then
		{   s.DoBlock();
		}
		// FIXME - replace by _zero
		for i from s.nlen+1 to AesBlockSize-1 do
		    s.ctr[i] = 0;
	    }        
        }

	proc (s: pState) Encrypt(in: @[]_byte, out: @[]_byte, len: _uint)
	{
	    s.Payload(in, out, len, false);
	}

	proc (s: pState) Decrypt(in: @[]_byte, out: @[]_byte, len: _uint)
	{
	    s.Payload(in, out, len, true);
	}

	proc (s: pState) Finish(tag: @[]_byte, len: _uint): _uint
	{   var i: _uint;

	    if s.mcur != s.mlen then		// wrong size text
		return 0;     // FIXME - what should we do?
	    if s.tlen > 0 then
	    {   s.aes.Encrypt(s.ctr, s.ctrpad);
		for i from 0 to len-1 do
		    tag[i] = s.X[i] ^ s.ctrpad[i];
	    }
	    return s.tlen;
	}

}
// vim: ts=8 sw=4 noet nowrap
