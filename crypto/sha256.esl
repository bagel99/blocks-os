/*
 * SHA256 crptographic hash function
 *
 * Copyright Brian G. Lucas, 2016
 * License: New BSD.
 */

package sha256
{
    type be32: _uint32: be;	// big-endian 32-bit unsigned

    const BlockSize  = 64;
    const DigestSize = 32;

    type Context:
    {	total:    _uint64;
	state:    [8]_uint32;
	leftover: [BlockSize]_byte;
    };
    type pContext: @Context;

    const padding: [BlockSize]_byte =
    {	0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };

    const K: [64]_uint32 =
    {	0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2,
    };

    proc S0(x: _uint32): _uint32: inline
    {
	return _ror(x,7) ^ _ror(x,18) ^ (x >> 3);
    }

    proc S1(x: _uint32): _uint32: inline
    {
	return _ror(x,17) ^ _ror(x,19) ^ (x >> 10);
    }

    proc S2(x: _uint32): _uint32: inline
    {
	return _ror(x,2) ^ _ror(x,13) ^ _ror(x,22);
    }

    proc S3(x: _uint32): _uint32: inline
    {
	return _ror(x,6) ^ _ror(x,11) ^ _ror(x,25);
    }

    proc F0(x: _uint32, y: _uint32, z: _uint32): _uint32: inline
    {
	return (x & y) | (z & (x | y));
    }

    proc F1(x: _uint32, y: _uint32, z: _uint32): _uint32: inline
    {
	return z ^ (x & (y ^ z));
    }

    proc (ctx: pContext) Start()
    {
	ctx.total = 0;
        ctx.state[0] = 0x6A09E667;
        ctx.state[1] = 0xBB67AE85;
        ctx.state[2] = 0x3C6EF372;
        ctx.state[3] = 0xA54FF53A;
        ctx.state[4] = 0x510E527F;
        ctx.state[5] = 0x9B05688C;
        ctx.state[6] = 0x1F83D9AB;
        ctx.state[7] = 0x5BE0CD19;
    }

    proc (ctx: pContext) Process(data: @[64]_byte)
    {   var i: _uint;
	var tmp1, tmp2: _uint32;
	var A: [8]_uint32;
	var W: [64]_uint32;

	A = ctx.state;			// array copy

	for i from 0 to 63 do
	{   if i < 16 then
		W[i] = _unpkbe(data[i*4:4]);
	    else
		W[i] = S1(W[i-2]) + W[i-7] + S0(W[i-15]) + W[i-16];
//	P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
//          a     b     c     d     e     f     g     h     x     K
//    temp1 = h + S3(e) + F1(e,f,g) + K + x; 
//    temp2 = S2(a) + F0(a,b,c);
//    d += temp1; h = temp1 + temp2;
	    tmp1 = A[7] + S3(A[4]) + F1(A[4],A[5],A[6]) + K[i] + W[i];
	    tmp2 = S2(A[0]) + F0(A[0],A[1],A[2]);
	    A[3] += tmp1;
	    A[7] = tmp1 + tmp2;

	    tmp1 = A[7];  A[7] = A[6];  A[6] = A[5];  A[5] = A[4];
	    A[4] = A[3];  A[3] = A[2];  A[2] = A[1];  A[1] = A[0];
	    A[0] = tmp1;
	}
	for i from 0 to 7 do
	    ctx.state[i] += A[i];
    }

    proc (ctx: pContext) Update(data: @[]_byte, len: _uint)
    {   var i: _uint;
	var left, fill: _uint;

	if len == 0 then
	    return;
	left = ctx.total & 0x3F;
	fill = 64 - left;
	ctx.total += len;
	i = 0;
	// if any leftovers and we can fill it, then process
	if left != 0 && len >= fill then
	{   ctx.leftover[left:fill] = data[0:fill];
	    left = 0;
	    ctx.Process(ctx.leftover);
	    i = fill;
	    len -= fill;
	}
	// process any complete blocks
	while len >= 64 do
	{   ctx.Process(data[i:64]);
	    i += 64;
	    len -= 64;
	}
	// if any left, then save
	if len > 0 then
	    ctx.leftover[left:len] = data[i:len];
    }

    proc (ctx: pContext) Finish(out: @[DigestSize]_byte)
    {   var i: _uint;
	var left, npad: _uint;
	var tmp: [8]_byte;

	_packbe(tmp[0:8], ctx.total<<3);
	left = ctx.total & 0x3F;
	if left < 56 then
	    npad = 56 - left;		// npad in 1..56
	else
	    npad = 120 - left;		// npad in 57..64
	ctx.Update(padding, npad);	// padding
	
	ctx.Update(tmp, 8);		// message length
	

	for i from 0 to 7 do
	    _packbe(out[i*4:4], ctx.state[i]);
    }

    // This is like Finish, but leaves context unchanged
    proc (ctx: pContext) Snapshot(out: @[]_byte)
    {   var tmp: Context;

	tmp = ctx@;
	tmp.Finish(out);
    }

    proc Hash(in: @[]_byte, len: _uint, out: @[32]_byte)
    {   var ctx: Context;       // FIXME - large stack area

	ctx.Start();
	ctx.Update(in, len);
	ctx.Finish(out);	
    }
}
// vim: ts=8 sw=4 noet nowrap
	    
