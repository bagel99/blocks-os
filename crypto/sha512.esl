/*
 * SHA512 crptographic hash function
 *
 * Reference
 *  1. NIST FIPS 180-2
 *
 * Copyright Brian G. Lucas, 2017
 * License: New BSD.
 */

package sha512
{
    const BlockSize  = 128;
    const DigestSize = 64;

    type Context:
    {	total:    [2]_uint64;       // _uint128
	state:    [8]_uint64;
	leftover: [BlockSize]_byte;
    };
    type pContext: @Context;

    const padding: [BlockSize]_byte =
    {	0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };

    const K: [80]_uint64 =
    {
	0x428A2F98D728AE22, 0x7137449123EF65CD,
	0xB5C0FBCFEC4D3B2F, 0xE9B5DBA58189DBBC,
	0x3956C25BF348B538, 0x59F111F1B605D019,
	0x923F82A4AF194F9B, 0xAB1C5ED5DA6D8118,
	0xD807AA98A3030242, 0x12835B0145706FBE,
	0x243185BE4EE4B28C, 0x550C7DC3D5FFB4E2,
	0x72BE5D74F27B896F, 0x80DEB1FE3B1696B1,
	0x9BDC06A725C71235, 0xC19BF174CF692694,
	0xE49B69C19EF14AD2, 0xEFBE4786384F25E3,
	0x0FC19DC68B8CD5B5, 0x240CA1CC77AC9C65,
	0x2DE92C6F592B0275, 0x4A7484AA6EA6E483,
	0x5CB0A9DCBD41FBD4, 0x76F988DA831153B5,
	0x983E5152EE66DFAB, 0xA831C66D2DB43210,
	0xB00327C898FB213F, 0xBF597FC7BEEF0EE4,
	0xC6E00BF33DA88FC2, 0xD5A79147930AA725,
	0x06CA6351E003826F, 0x142929670A0E6E70,
	0x27B70A8546D22FFC, 0x2E1B21385C26C926,
	0x4D2C6DFC5AC42AED, 0x53380D139D95B3DF,
	0x650A73548BAF63DE, 0x766A0ABB3C77B2A8,
	0x81C2C92E47EDAEE6, 0x92722C851482353B,
	0xA2BFE8A14CF10364, 0xA81A664BBC423001,
	0xC24B8B70D0F89791, 0xC76C51A30654BE30,
	0xD192E819D6EF5218, 0xD69906245565A910,
	0xF40E35855771202A, 0x106AA07032BBD1B8,
	0x19A4C116B8D2D0C8, 0x1E376C085141AB53,
	0x2748774CDF8EEB99, 0x34B0BCB5E19B48A8,
	0x391C0CB3C5C95A63, 0x4ED8AA4AE3418ACB,
	0x5B9CCA4F7763E373, 0x682E6FF3D6B2B8A3,
	0x748F82EE5DEFB2FC, 0x78A5636F43172F60,
	0x84C87814A1F0AB72, 0x8CC702081A6439EC,
	0x90BEFFFA23631E28, 0xA4506CEBDE82BDE9,
	0xBEF9A3F7B2C67915, 0xC67178F2E372532B,
	0xCA273ECEEA26619C, 0xD186B8C721C0C207,
	0xEADA7DD6CDE0EB1E, 0xF57D4F7FEE6ED178,
	0x06F067AA72176FBA, 0x0A637DC5A2C898A6,
	0x113F9804BEF90DAE, 0x1B710B35131C471B,
	0x28DB77F523047D84, 0x32CAAB7B40C72493,
	0x3C9EBE0A15C9BEBC, 0x431D67C49C100D4C,
	0x4CC5D4BECB3E42B6, 0x597F299CFC657E2A,
	0x5FCB6FAB3AD6FAEC, 0x6C44198C4A475817
    };

    const InitHash: [8]_uint64 =
    {
	0x6A09E667F3BCC908,
	0xBB67AE8584CAA73B,
	0x3C6EF372FE94F82B,
	0xA54FF53A5F1D36F1,
	0x510E527FADE682D1,
	0x9B05688C2B3E6C1F,
	0x1F83D9ABFB41BD6B,
	0x5BE0CD19137E2179
    };

    proc (ctx: pContext) Start()
    {
	ctx.total[0] = 0;  ctx.total[1] = 0;
	ctx.state = InitHash;
	_zero(ctx.leftover);
    }

    proc S0(x: _uint64): _uint64: inline
    {
	return _ror(x,1) ^ _ror(x,8) ^ (x >> 7);
    }

    proc S1(x: _uint64): _uint64: inline
    {
	return _ror(x,19) ^ _ror(x,61) ^ (x >> 6);
    }

    proc S2(x: _uint64): _uint64: inline
    {
	return _ror(x,28) ^ _ror(x,34) ^ _ror(x,39);
    }

    proc S3(x: _uint64): _uint64: inline
    {
	return _ror(x,14) ^ _ror(x,18) ^ _ror(x,41);
    }

    proc F0(x: _uint64, y: _uint64, z: _uint64): _uint64: inline
    {
	return (x & y) | (z & (x | y));
    }

    proc F1(x: _uint64, y: _uint64, z: _uint64): _uint64: inline
    {
	return z ^ (x & (y ^ z));
    }

    proc (ctx: pContext) Process(data: @[128]_byte)
    {   var i: _uint;
	var tmp1, tmp2: _uint64;
	var A: [8]_uint64;		// a,b,c,d,e,f,g,h
	var W: [80]_uint64;

	A = ctx.state;			// array copy
	
	for i from 0 to 79 do
	{   if i < 16 then
		W[i] = _unpkbe(data[i*8:8]);
	    else
		W[i] = S1(W[i-2]) + W[i-7] + S0(W[i-15]) + W[i-16];
	    //	P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
	    //      a     b     c     d     e     f     g     h     x     K
	    //    tmp1 = h + S3(e) + F1(e,f,g) + K + x; 
	    //    tmp2 = S2(a) + F0(a,b,c);
	    //    d += tmp1; h = tmp1 + tmp2;
	    tmp1 = A[7] + S3(A[4]) + F1(A[4],A[5],A[6]) + K[i] + W[i];
	    tmp2 = S2(A[0]) + F0(A[0],A[1],A[2]);
	    A[3] += tmp1;
	    A[7] = tmp1 + tmp2;

	    tmp1 = A[7];  A[7] = A[6];  A[6] = A[5];  A[5] = A[4];
	    A[4] = A[3];  A[3] = A[2];  A[2] = A[1];  A[1] = A[0];
	    A[0] = tmp1;
	}     

	for i from 0 to 7 do
	    ctx.state[i] += A[i];
    }

    proc (ctx: pContext) Update(data: @[]_byte, len: _uint)
    {   var i: _uint;
	var left, fill: _uint;

	if len == 0 then
	    return;
	left = ctx.total[0] & 0x7F;
	fill = 128 - left;
	ctx.total[0] += len;
	if ctx.total[0] < len then      // carry out
	    ctx.total[1] += 1;
	i = 0;
	// if any leftovers and we can fill it, then process
	if left != 0 && len >= fill then
	{   ctx.leftover[left:fill] = data[0:fill];
	    left = 0;
	    ctx.Process(ctx.leftover);
	    i = fill;
	    len -= fill;
	}
	// process any complete blocks
	while len >= 128 do
	{   ctx.Process(data[i:128]);
	    i += 128;
	    len -= 128;
	}
	// if any left, then save
	if len > 0 then
	    ctx.leftover[left:len] = data[i:len];
    }

    proc (ctx: pContext) Finish(out: @[DigestSize]_byte)
    {   var i: _uint;
	var left, npad: _uint;
	var hi, lo: _uint64;
	var tmp: [16]_byte;

	lo = ctx.total[0] << 3;
	hi = (ctx.total[1] << 3) | (ctx.total[0] >> 61);
	_packbe(tmp[0:8], hi);
	_packbe(tmp[8:8], lo);
	left = ctx.total[0] & 0x7F;
	if left < 112 then
	    npad = 112 - left;		// npad in 1..112
	else
	    npad = 240 - left;		// npad in 113..128
	ctx.Update(padding, npad);	// padding
	
	ctx.Update(tmp, 16);		// message length
	

	for i from 0 to 7 do
	    _packbe(out[i*8:8], ctx.state[i]);
    }

    // This is like Finish, but leaves context unchanged
    proc (ctx: pContext) Snapshot(out: @[DigestSize]_byte)
    {   var tmp: Context;

	tmp = ctx@;
	tmp.Finish(out);
    }

    proc Hash(in: @[]_byte, len: _uint, out: @[DigestSize]_byte)
    {   var ctx: Context;       // FIXME - large stack area

	ctx.Start();
	ctx.Update(in, len);
	ctx.Finish(out);	
    }

}
// vim: ts=8 sw=4 noet nowrap

